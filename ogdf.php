<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('ogdf')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_ogdf.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('ogdf.so')) return;
    } else {
      if (!dl('ogdf.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class ogdf {
	const before = 0;

	const after = after;

	const rrNone = 0;

	const rrInserted = rrInserted;

	const rrMostCrossed = rrMostCrossed;

	const rrAll = rrAll;

	const rrIncremental = rrIncremental;

	const rrIncInserted = rrIncInserted;

	const stNone = 0;

	const stSolid = stSolid;

	const stDash = stDash;

	const stDot = stDot;

	const stDashdot = stDashdot;

	const stDashdotdot = stDashdotdot;

	static function intToStrokeType($i) {
		return intToStrokeType($i);
	}

	const slcButt = 0;

	const slcRound = slcRound;

	const slcSquare = slcSquare;

	const sljMiter = 0;

	const sljRound = sljRound;

	const sljBevel = sljBevel;

	const fpNone = 0;

	const fpSolid = fpSolid;

	const fpDense1 = fpDense1;

	const fpDense2 = fpDense2;

	const fpDense3 = fpDense3;

	const fpDense4 = fpDense4;

	const fpDense5 = fpDense5;

	const fpDense6 = fpDense6;

	const fpDense7 = fpDense7;

	const fpHorizontal = fpHorizontal;

	const fpVertical = fpVertical;

	const fpCross = fpCross;

	const fpBackwardDiagonal = fpBackwardDiagonal;

	const fpForwardDiagonal = fpForwardDiagonal;

	const fpDiagonalCross = fpDiagonalCross;

	static function intToFillPattern($i) {
		return intToFillPattern($i);
	}

	const shRect = 0;

	const shRoundedRect = shRoundedRect;

	const shEllipse = shEllipse;

	const shTriangle = shTriangle;

	const shPentagon = shPentagon;

	const shHexagon = shHexagon;

	const shOctagon = shOctagon;

	const shRhomb = shRhomb;

	const shTrapeze = shTrapeze;

	const shParallelogram = shParallelogram;

	const shInvTriangle = shInvTriangle;

	const shInvTrapeze = shInvTrapeze;

	const shInvParallelogram = shInvParallelogram;

	const shImage = shImage;

	const eaNone = 0;

	const eaLast = eaLast;

	const eaFirst = eaFirst;

	const eaBoth = eaBoth;

	const eaUndefined = eaUndefined;
}

/* PHP Proxy Classes */
class IntListIterator {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function valid() {
		return IntListIterator_valid($this->_cPtr);
	}

	function ListIteratorEqualsEquals($it) {
		return IntListIterator_ListIteratorEqualsEquals($this->_cPtr,$it);
	}

	function ListIteratorNotEquals($it) {
		return IntListIterator_ListIteratorNotEquals($this->_cPtr,$it);
	}

	function succ() {
		$r=IntListIterator_succ($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function pred() {
		$r=IntListIterator_pred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function get_val() {
		return IntListIterator_get_val($this->_cPtr);
	}

	function set_val($val) {
		IntListIterator_set_val($this->_cPtr,$val);
	}

	function inc() {
		IntListIterator_inc($this->_cPtr);
	}

	function dec() {
		IntListIterator_dec($this->_cPtr);
	}

	function eq($it) {
		return IntListIterator_eq($this->_cPtr,$it);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__ListIteratorT_int_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_IntListIterator();
	}
}

class IntList {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function c_List($l=null) {
		if (is_resource($l) && get_resource_type($l) === '_p_ogdf__ListT_int_t') {
			$this->_cPtr=$l;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_c_List(); break;
		default: $this->_cPtr=new_c_List($l);
		}
	}

	function c_empty() {
		return IntList_c_empty($this->_cPtr);
	}

	function size() {
		return IntList_size($this->_cPtr);
	}

	function front() {
		return IntList_front($this->_cPtr);
	}

	function back() {
		return IntList_back($this->_cPtr);
	}

	function get($pos) {
		$r=IntList_get($this->_cPtr,$pos);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function pos($it) {
		return IntList_pos($this->_cPtr,$it);
	}

	function begin() {
		$r=IntList_begin($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function end() {
		$r=IntList_end($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function rbegin() {
		$r=IntList_rbegin($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function rend() {
		$r=IntList_rend($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function cyclicPred($it) {
		$r=IntList_cyclicPred($this->_cPtr,$it);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function cyclicSucc($it) {
		$r=IntList_cyclicSucc($this->_cPtr,$it);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function ListEqualsEquals($L) {
		return IntList_ListEqualsEquals($this->_cPtr,$L);
	}

	function ListNotEquals($L) {
		return IntList_ListNotEquals($this->_cPtr,$L);
	}

	function pushFront($x) {
		$r=IntList_pushFront($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function pushBack($x) {
		$r=IntList_pushBack($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function insert($x,$it,$dir=null) {
		switch (func_num_args()) {
		case 2: $r=IntList_insert($this->_cPtr,$x,$it); break;
		default: $r=IntList_insert($this->_cPtr,$x,$it,$dir);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function insertBefore($x,$it) {
		$r=IntList_insertBefore($this->_cPtr,$x,$it);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function insertAfter($x,$it) {
		$r=IntList_insertAfter($this->_cPtr,$x,$it);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function popFront() {
		IntList_popFront($this->_cPtr);
	}

	function popFrontRet() {
		return IntList_popFrontRet($this->_cPtr);
	}

	function popBack() {
		IntList_popBack($this->_cPtr);
	}

	function popBackRet() {
		return IntList_popBackRet($this->_cPtr);
	}

	function _del($it) {
		IntList__del($this->_cPtr,$it);
	}

	function removeFirst($x) {
		return IntList_removeFirst($this->_cPtr,$x);
	}

	function clear() {
		IntList_clear($this->_cPtr);
	}

	function exchange($it1,$it2) {
		IntList_exchange($this->_cPtr,$it1,$it2);
	}

	function moveToFront($it,$L2=null) {
		switch (func_num_args()) {
		case 1: IntList_moveToFront($this->_cPtr,$it); break;
		default: IntList_moveToFront($this->_cPtr,$it,$L2);
		}
	}

	function moveToBack($it,$L2=null) {
		switch (func_num_args()) {
		case 1: IntList_moveToBack($this->_cPtr,$it); break;
		default: IntList_moveToBack($this->_cPtr,$it,$L2);
		}
	}

	function moveToSucc($it,$itBefore_or_L2,$itBefore=null) {
		switch (func_num_args()) {
		case 2: IntList_moveToSucc($this->_cPtr,$it,$itBefore_or_L2); break;
		default: IntList_moveToSucc($this->_cPtr,$it,$itBefore_or_L2,$itBefore);
		}
	}

	function moveToPrec($it,$itBefore_or_L2,$itBefore=null) {
		switch (func_num_args()) {
		case 2: IntList_moveToPrec($this->_cPtr,$it,$itBefore_or_L2); break;
		default: IntList_moveToPrec($this->_cPtr,$it,$itBefore_or_L2,$itBefore);
		}
	}

	function conc($L2) {
		IntList_conc($this->_cPtr,$L2);
	}

	function concFront($L2) {
		IntList_concFront($this->_cPtr,$L2);
	}

	function reverse() {
		IntList_reverse($this->_cPtr);
	}

	function quicksort() {
		IntList_quicksort($this->_cPtr);
	}

	function permute() {
		IntList_permute($this->_cPtr);
	}

	function search($e) {
		$r=IntList_search($this->_cPtr,$e);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function chooseIterator() {
		$r=IntList_chooseIterator($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntListIterator($r);
		}
		return $r;
	}

	function chooseElement() {
		return IntList_chooseElement($this->_cPtr);
	}
}

class AdjElement {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function theEdge() {
		$r=AdjElement_theEdge($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function theNode() {
		$r=AdjElement_theNode($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function twin() {
		$r=AdjElement_twin($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function twinNode() {
		$r=AdjElement_twinNode($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function index() {
		return AdjElement_index($this->_cPtr);
	}

	function clockwiseFaceSucc() {
		$r=AdjElement_clockwiseFaceSucc($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function clockwiseFacePred() {
		$r=AdjElement_clockwiseFacePred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function counterClockwiseFaceSucc() {
		$r=AdjElement_counterClockwiseFaceSucc($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function counterClockwiseFacePred() {
		$r=AdjElement_counterClockwiseFacePred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function faceCycleSucc() {
		$r=AdjElement_faceCycleSucc($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function faceCyclePred() {
		$r=AdjElement_faceCyclePred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function succ() {
		$r=AdjElement_succ($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function pred() {
		$r=AdjElement_pred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function cyclicSucc() {
		$r=AdjElement_cyclicSucc($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function cyclicPred() {
		$r=AdjElement_cyclicPred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	static function compare($x,$y) {
		return AdjElement_compare($x,$y);
	}
}

class NodeElement {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function index() {
		return NodeElement_index($this->_cPtr);
	}

	function indeg() {
		return NodeElement_indeg($this->_cPtr);
	}

	function outdeg() {
		return NodeElement_outdeg($this->_cPtr);
	}

	function degree() {
		return NodeElement_degree($this->_cPtr);
	}

	function firstAdj() {
		$r=NodeElement_firstAdj($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function lastAdj() {
		$r=NodeElement_lastAdj($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function succ() {
		$r=NodeElement_succ($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function pred() {
		$r=NodeElement_pred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	static function compare($x,$y) {
		return NodeElement_compare($x,$y);
	}
}

class EdgeElement {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function index() {
		return EdgeElement_index($this->_cPtr);
	}

	function source() {
		$r=EdgeElement_source($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function target() {
		$r=EdgeElement_target($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function adjSource() {
		$r=EdgeElement_adjSource($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function adjTarget() {
		$r=EdgeElement_adjTarget($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AdjElement($r);
		}
		return $r;
	}

	function opposite($v) {
		$r=EdgeElement_opposite($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function isSelfLoop() {
		return EdgeElement_isSelfLoop($this->_cPtr);
	}

	function succ() {
		$r=EdgeElement_succ($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function pred() {
		$r=EdgeElement_pred($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function isIncident($v) {
		return EdgeElement_isIncident($this->_cPtr,$v);
	}

	function commonNode($e) {
		$r=EdgeElement_commonNode($this->_cPtr,$e);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	static function compare($x,$y) {
		return EdgeElement_compare($x,$y);
	}
}

class Graph {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	const association = 0;

	const generalization = 1;

	const dependency = 2;

	const vertex = 0;

	const dummy = Graph_dummy;

	const generalizationMerger = Graph_generalizationMerger;

	const generalizationExpander = Graph_generalizationExpander;

	const highDegreeExpander = Graph_highDegreeExpander;

	const lowDegreeExpander = Graph_lowDegreeExpander;

	const associationClass = Graph_associationClass;

	function __construct($G=null) {
		if (is_resource($G) && get_resource_type($G) === '_p_ogdf__Graph') {
			$this->_cPtr=$G;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Graph(); break;
		default: $this->_cPtr=new_Graph($G);
		}
	}

	function c_empty() {
		return Graph_c_empty($this->_cPtr);
	}

	function numberOfNodes() {
		return Graph_numberOfNodes($this->_cPtr);
	}

	function numberOfEdges() {
		return Graph_numberOfEdges($this->_cPtr);
	}

	function maxNodeIndex() {
		return Graph_maxNodeIndex($this->_cPtr);
	}

	function maxEdgeIndex() {
		return Graph_maxEdgeIndex($this->_cPtr);
	}

	function maxAdjEntryIndex() {
		return Graph_maxAdjEntryIndex($this->_cPtr);
	}

	function nodeArrayTableSize() {
		return Graph_nodeArrayTableSize($this->_cPtr);
	}

	function edgeArrayTableSize() {
		return Graph_edgeArrayTableSize($this->_cPtr);
	}

	function adjEntryArrayTableSize() {
		return Graph_adjEntryArrayTableSize($this->_cPtr);
	}

	function firstNode() {
		$r=Graph_firstNode($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function lastNode() {
		$r=Graph_lastNode($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function firstEdge() {
		$r=Graph_firstEdge($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function lastEdge() {
		$r=Graph_lastEdge($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function chooseNode() {
		$r=Graph_chooseNode($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function chooseEdge() {
		$r=Graph_chooseEdge($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function allNodes($nodeListOUT) {
		Graph_allNodes($this->_cPtr,$nodeListOUT);
	}

	function allEdges($edgeListOUT) {
		Graph_allEdges($this->_cPtr,$edgeListOUT);
	}

	function adjEdges($v,$edgeListOUT) {
		Graph_adjEdges($this->_cPtr,$v,$edgeListOUT);
	}

	function adjEntries($v,$adjListOUT) {
		Graph_adjEntries($this->_cPtr,$v,$adjListOUT);
	}

	function inEdges($v,$edgeListOUT) {
		Graph_inEdges($this->_cPtr,$v,$edgeListOUT);
	}

	function outEdges($v,$edgeListOUT) {
		Graph_outEdges($this->_cPtr,$v,$edgeListOUT);
	}

	function newNode($index=null) {
		switch (func_num_args()) {
		case 0: $r=Graph_newNode($this->_cPtr); break;
		default: $r=Graph_newNode($this->_cPtr,$index);
		}
		if (!is_resource($r)) return $r;
		return new NodeElement($r);
	}

	function newEdge($v_or_adjSrc,$w_or_adjTgt,$index_or_dir=null) {
		switch (func_num_args()) {
		case 2: $r=Graph_newEdge($this->_cPtr,$v_or_adjSrc,$w_or_adjTgt); break;
		default: $r=Graph_newEdge($this->_cPtr,$v_or_adjSrc,$w_or_adjTgt,$index_or_dir);
		}
		if (!is_resource($r)) return $r;
		return new EdgeElement($r);
	}

	function delNode($v) {
		Graph_delNode($this->_cPtr,$v);
	}

	function delEdge($e) {
		Graph_delEdge($this->_cPtr,$e);
	}

	function clear() {
		Graph_clear($this->_cPtr);
	}

	function hideEdge($e) {
		Graph_hideEdge($this->_cPtr,$e);
	}

	function restoreEdge($e) {
		Graph_restoreEdge($this->_cPtr,$e);
	}

	function restoreAllEdges() {
		Graph_restoreAllEdges($this->_cPtr);
	}

	function split($e) {
		$r=Graph_split($this->_cPtr,$e);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function unsplit($u_or_eIn,$eOut=null) {
		switch (func_num_args()) {
		case 1: Graph_unsplit($this->_cPtr,$u_or_eIn); break;
		default: Graph_unsplit($this->_cPtr,$u_or_eIn,$eOut);
		}
	}

	function splitNode($adjStartLeft,$adjStartRight) {
		$r=Graph_splitNode($this->_cPtr,$adjStartLeft,$adjStartRight);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function contract($e) {
		$r=Graph_contract($this->_cPtr,$e);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NodeElement($r);
		}
		return $r;
	}

	function move($e,$adjSrc,$dirSrc,$adjTgt,$dirTgt) {
		Graph_move($this->_cPtr,$e,$adjSrc,$dirSrc,$adjTgt,$dirTgt);
	}

	function moveTarget($e,$w_or_adjTgt,$dir=null) {
		switch (func_num_args()) {
		case 2: Graph_moveTarget($this->_cPtr,$e,$w_or_adjTgt); break;
		default: Graph_moveTarget($this->_cPtr,$e,$w_or_adjTgt,$dir);
		}
	}

	function moveSource($e,$w_or_adjSrc,$dir=null) {
		switch (func_num_args()) {
		case 2: Graph_moveSource($this->_cPtr,$e,$w_or_adjSrc); break;
		default: Graph_moveSource($this->_cPtr,$e,$w_or_adjSrc,$dir);
		}
	}

	function searchEdge($v,$w) {
		$r=Graph_searchEdge($this->_cPtr,$v,$w);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new EdgeElement($r);
		}
		return $r;
	}

	function reverseEdge($e) {
		Graph_reverseEdge($this->_cPtr,$e);
	}

	function reverseAllEdges() {
		Graph_reverseAllEdges($this->_cPtr);
	}

	function collaps($nodeListIN) {
		Graph_collaps($this->_cPtr,$nodeListIN);
	}

	function sort($v,$adjListOUT) {
		Graph_sort($this->_cPtr,$v,$adjListOUT);
	}

	function moveAdj($adjMove,$dir,$adjPos) {
		Graph_moveAdj($this->_cPtr,$adjMove,$dir,$adjPos);
	}

	function moveAdjAfter($adjMove,$adjAfter) {
		Graph_moveAdjAfter($this->_cPtr,$adjMove,$adjAfter);
	}

	function moveAdjBefore($adjMove,$adjBefore) {
		Graph_moveAdjBefore($this->_cPtr,$adjMove,$adjBefore);
	}

	function reverseAdjEdges($v=null) {
		switch (func_num_args()) {
		case 0: Graph_reverseAdjEdges($this->_cPtr); break;
		default: Graph_reverseAdjEdges($this->_cPtr,$v);
		}
	}

	function swapAdjEdges($adj1,$adj2) {
		Graph_swapAdjEdges($this->_cPtr,$adj1,$adj2);
	}

	function genus() {
		return Graph_genus($this->_cPtr);
	}

	function representsCombEmbedding() {
		return Graph_representsCombEmbedding($this->_cPtr);
	}

	function consistencyCheck() {
		return Graph_consistencyCheck($this->_cPtr);
	}

	function resetEdgeIdCount($maxId) {
		Graph_resetEdgeIdCount($this->_cPtr,$maxId);
	}

	static function nextPower2($start,$idCount) {
		return Graph_nextPower2($start,$idCount);
	}
}

class IntNodeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G_or_A=null,$x=null) {
		if (is_resource($G_or_A) && get_resource_type($G_or_A) === '_p_ogdf__NodeArrayT_int_t') {
			$this->_cPtr=$G_or_A;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_IntNodeArray(); break;
		case 1: $this->_cPtr=new_IntNodeArray($G_or_A); break;
		default: $this->_cPtr=new_IntNodeArray($G_or_A,$x);
		}
	}

	function valid() {
		return IntNodeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=IntNodeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: IntNodeArray_init($this->_cPtr); break;
		case 1: IntNodeArray_init($this->_cPtr,$G); break;
		default: IntNodeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		IntNodeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return IntNodeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		IntNodeArray_set_val($this->_cPtr,$n,$d);
	}
}

class LongNodeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G_or_A=null,$x=null) {
		if (is_resource($G_or_A) && get_resource_type($G_or_A) === '_p_ogdf__NodeArrayT_long_t') {
			$this->_cPtr=$G_or_A;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_LongNodeArray(); break;
		case 1: $this->_cPtr=new_LongNodeArray($G_or_A); break;
		default: $this->_cPtr=new_LongNodeArray($G_or_A,$x);
		}
	}

	function valid() {
		return LongNodeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=LongNodeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: LongNodeArray_init($this->_cPtr); break;
		case 1: LongNodeArray_init($this->_cPtr,$G); break;
		default: LongNodeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		LongNodeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return LongNodeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		LongNodeArray_set_val($this->_cPtr,$n,$d);
	}
}

class FloatNodeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G_or_A=null,$x=null) {
		if (is_resource($G_or_A) && get_resource_type($G_or_A) === '_p_ogdf__NodeArrayT_float_t') {
			$this->_cPtr=$G_or_A;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_FloatNodeArray(); break;
		case 1: $this->_cPtr=new_FloatNodeArray($G_or_A); break;
		default: $this->_cPtr=new_FloatNodeArray($G_or_A,$x);
		}
	}

	function valid() {
		return FloatNodeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=FloatNodeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: FloatNodeArray_init($this->_cPtr); break;
		case 1: FloatNodeArray_init($this->_cPtr,$G); break;
		default: FloatNodeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		FloatNodeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return FloatNodeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		FloatNodeArray_set_val($this->_cPtr,$n,$d);
	}
}

class DoubleNodeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G_or_A=null,$x=null) {
		if (is_resource($G_or_A) && get_resource_type($G_or_A) === '_p_ogdf__NodeArrayT_double_t') {
			$this->_cPtr=$G_or_A;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_DoubleNodeArray(); break;
		case 1: $this->_cPtr=new_DoubleNodeArray($G_or_A); break;
		default: $this->_cPtr=new_DoubleNodeArray($G_or_A,$x);
		}
	}

	function valid() {
		return DoubleNodeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=DoubleNodeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: DoubleNodeArray_init($this->_cPtr); break;
		case 1: DoubleNodeArray_init($this->_cPtr,$G); break;
		default: DoubleNodeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		DoubleNodeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return DoubleNodeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		DoubleNodeArray_set_val($this->_cPtr,$n,$d);
	}
}

class IntEdgeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G=null,$x=null) {
		if (is_resource($G) && get_resource_type($G) === '_p_ogdf__EdgeArrayT_int_t') {
			$this->_cPtr=$G;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_IntEdgeArray(); break;
		case 1: $this->_cPtr=new_IntEdgeArray($G); break;
		default: $this->_cPtr=new_IntEdgeArray($G,$x);
		}
	}

	function valid() {
		return IntEdgeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=IntEdgeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: IntEdgeArray_init($this->_cPtr); break;
		case 1: IntEdgeArray_init($this->_cPtr,$G); break;
		default: IntEdgeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		IntEdgeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return IntEdgeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		IntEdgeArray_set_val($this->_cPtr,$n,$d);
	}
}

class LongEdgeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G=null,$x=null) {
		if (is_resource($G) && get_resource_type($G) === '_p_ogdf__EdgeArrayT_long_t') {
			$this->_cPtr=$G;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_LongEdgeArray(); break;
		case 1: $this->_cPtr=new_LongEdgeArray($G); break;
		default: $this->_cPtr=new_LongEdgeArray($G,$x);
		}
	}

	function valid() {
		return LongEdgeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=LongEdgeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: LongEdgeArray_init($this->_cPtr); break;
		case 1: LongEdgeArray_init($this->_cPtr,$G); break;
		default: LongEdgeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		LongEdgeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return LongEdgeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		LongEdgeArray_set_val($this->_cPtr,$n,$d);
	}
}

class FloatEdgeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G=null,$x=null) {
		if (is_resource($G) && get_resource_type($G) === '_p_ogdf__EdgeArrayT_float_t') {
			$this->_cPtr=$G;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_FloatEdgeArray(); break;
		case 1: $this->_cPtr=new_FloatEdgeArray($G); break;
		default: $this->_cPtr=new_FloatEdgeArray($G,$x);
		}
	}

	function valid() {
		return FloatEdgeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=FloatEdgeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: FloatEdgeArray_init($this->_cPtr); break;
		case 1: FloatEdgeArray_init($this->_cPtr,$G); break;
		default: FloatEdgeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		FloatEdgeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return FloatEdgeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		FloatEdgeArray_set_val($this->_cPtr,$n,$d);
	}
}

class DoubleEdgeArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($G=null,$x=null) {
		if (is_resource($G) && get_resource_type($G) === '_p_ogdf__EdgeArrayT_double_t') {
			$this->_cPtr=$G;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_DoubleEdgeArray(); break;
		case 1: $this->_cPtr=new_DoubleEdgeArray($G); break;
		default: $this->_cPtr=new_DoubleEdgeArray($G,$x);
		}
	}

	function valid() {
		return DoubleEdgeArray_valid($this->_cPtr);
	}

	function graphOf() {
		$r=DoubleEdgeArray_graphOf($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function init($G=null,$x=null) {
		switch (func_num_args()) {
		case 0: DoubleEdgeArray_init($this->_cPtr); break;
		case 1: DoubleEdgeArray_init($this->_cPtr,$G); break;
		default: DoubleEdgeArray_init($this->_cPtr,$G,$x);
		}
	}

	function fill($x) {
		DoubleEdgeArray_fill($this->_cPtr,$x);
	}

	function get_val($n) {
		return DoubleEdgeArray_get_val($this->_cPtr,$n);
	}

	function set_val($n,$d) {
		DoubleEdgeArray_set_val($this->_cPtr,$n,$d);
	}
}

class LayoutModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class MultilevelBuilder {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function setEdgeLengthAdjustment($factor) {
		MultilevelBuilder_setEdgeLengthAdjustment($this->_cPtr,$factor);
	}

	function getNumLevels() {
		return MultilevelBuilder_getNumLevels($this->_cPtr);
	}
}

class EdgeCoverMerger extends MultilevelBuilder {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		MultilevelBuilder::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return MultilevelBuilder::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return MultilevelBuilder::__isset($var);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__EdgeCoverMerger') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_EdgeCoverMerger();
	}

	function setFactor($factor) {
		EdgeCoverMerger_setFactor($this->_cPtr,$factor);
	}
}

class IndependentSetMerger extends MultilevelBuilder {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		MultilevelBuilder::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return MultilevelBuilder::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return MultilevelBuilder::__isset($var);
	}

	function setSearchDepthBase($base) {
		IndependentSetMerger_setSearchDepthBase($this->_cPtr,$base);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__IndependentSetMerger') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_IndependentSetMerger();
	}
}

class LocalBiconnectedMerger extends MultilevelBuilder {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		MultilevelBuilder::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return MultilevelBuilder::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return MultilevelBuilder::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function setFactor($factor) {
		LocalBiconnectedMerger_setFactor($this->_cPtr,$factor);
	}
}

class MatchingMerger extends MultilevelBuilder {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		MultilevelBuilder::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return MultilevelBuilder::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return MultilevelBuilder::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function selectByNodeMass($on) {
		MatchingMerger_selectByNodeMass($this->_cPtr,$on);
	}
}

class RandomMerger extends MultilevelBuilder {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		MultilevelBuilder::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return MultilevelBuilder::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return MultilevelBuilder::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function setFactor($factor) {
		RandomMerger_setFactor($this->_cPtr,$factor);
	}
}

class SolarMerger extends MultilevelBuilder {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		MultilevelBuilder::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return MultilevelBuilder::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return MultilevelBuilder::__isset($var);
	}

	function __construct($simple=false,$massAsNodeRadius=false) {
		if (is_resource($simple) && get_resource_type($simple) === '_p_ogdf__SolarMerger') {
			$this->_cPtr=$simple;
			return;
		}
		$this->_cPtr=new_SolarMerger($simple,$massAsNodeRadius);
	}
}

class InitialPlacer {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function setRandomOffset($on) {
		InitialPlacer_setRandomOffset($this->_cPtr,$on);
	}
}

class SolarPlacer extends InitialPlacer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		InitialPlacer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return InitialPlacer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return InitialPlacer::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class RandomPlacer extends InitialPlacer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		InitialPlacer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return InitialPlacer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return InitialPlacer::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function setCircleSize($factor) {
		RandomPlacer_setCircleSize($this->_cPtr,$factor);
	}
}

class CirclePlacer extends InitialPlacer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		InitialPlacer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return InitialPlacer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return InitialPlacer::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	const nsNew = 0;

	const nsOld = CirclePlacer_nsOld;

	const nsAll = CirclePlacer_nsAll;

	function setRadiusFixed($fixed) {
		CirclePlacer_setRadiusFixed($this->_cPtr,$fixed);
	}

	function setCircleSize($sizeIncrease) {
		CirclePlacer_setCircleSize($this->_cPtr,$sizeIncrease);
	}

	function setNodeSelection($nodeSel) {
		CirclePlacer_setNodeSelection($this->_cPtr,$nodeSel);
	}
}

class ZeroPlacer extends InitialPlacer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		InitialPlacer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return InitialPlacer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return InitialPlacer::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function setRandomRange($range) {
		ZeroPlacer_setRandomRange($this->_cPtr,$range);
	}
}

class BarycenterPlacer extends InitialPlacer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		InitialPlacer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return InitialPlacer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return InitialPlacer::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function weightedPositionPriority($on) {
		BarycenterPlacer_weightedPositionPriority($this->_cPtr,$on);
	}
}

class MedianPlacer extends InitialPlacer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		InitialPlacer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return InitialPlacer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return InitialPlacer::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class HierarchyLayoutModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class FastHierarchyLayout extends HierarchyLayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		HierarchyLayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return HierarchyLayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return HierarchyLayoutModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function nodeDistance($dist=null) {
		switch (func_num_args()) {
		case 0: $r=FastHierarchyLayout_nodeDistance($this->_cPtr); break;
		default: $r=FastHierarchyLayout_nodeDistance($this->_cPtr,$dist);
		}
		return $r;
	}

	function layerDistance($dist=null) {
		switch (func_num_args()) {
		case 0: $r=FastHierarchyLayout_layerDistance($this->_cPtr); break;
		default: $r=FastHierarchyLayout_layerDistance($this->_cPtr,$dist);
		}
		return $r;
	}

	function fixedLayerDistance($b=null) {
		switch (func_num_args()) {
		case 0: $r=FastHierarchyLayout_fixedLayerDistance($this->_cPtr); break;
		default: $r=FastHierarchyLayout_fixedLayerDistance($this->_cPtr,$b);
		}
		return $r;
	}
}

class FastSimpleHierarchyLayout extends HierarchyLayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		HierarchyLayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return HierarchyLayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return HierarchyLayoutModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function nodeDistance($dist=null) {
		switch (func_num_args()) {
		case 0: $r=FastSimpleHierarchyLayout_nodeDistance($this->_cPtr); break;
		default: $r=FastSimpleHierarchyLayout_nodeDistance($this->_cPtr,$dist);
		}
		return $r;
	}

	function layerDistance($dist=null) {
		switch (func_num_args()) {
		case 0: $r=FastSimpleHierarchyLayout_layerDistance($this->_cPtr); break;
		default: $r=FastSimpleHierarchyLayout_layerDistance($this->_cPtr,$dist);
		}
		return $r;
	}

	function downward($d=null) {
		switch (func_num_args()) {
		case 0: $r=FastSimpleHierarchyLayout_downward($this->_cPtr); break;
		default: $r=FastSimpleHierarchyLayout_downward($this->_cPtr,$d);
		}
		return $r;
	}

	function leftToRight($b=null) {
		switch (func_num_args()) {
		case 0: $r=FastSimpleHierarchyLayout_leftToRight($this->_cPtr); break;
		default: $r=FastSimpleHierarchyLayout_leftToRight($this->_cPtr,$b);
		}
		return $r;
	}

	function balanced($b=null) {
		switch (func_num_args()) {
		case 0: $r=FastSimpleHierarchyLayout_balanced($this->_cPtr); break;
		default: $r=FastSimpleHierarchyLayout_balanced($this->_cPtr,$b);
		}
		return $r;
	}
}

class OptimalHierarchyLayout extends HierarchyLayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		HierarchyLayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return HierarchyLayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return HierarchyLayoutModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function nodeDistance($x=null) {
		switch (func_num_args()) {
		case 0: $r=OptimalHierarchyLayout_nodeDistance($this->_cPtr); break;
		default: $r=OptimalHierarchyLayout_nodeDistance($this->_cPtr,$x);
		}
		return $r;
	}

	function layerDistance($x=null) {
		switch (func_num_args()) {
		case 0: $r=OptimalHierarchyLayout_layerDistance($this->_cPtr); break;
		default: $r=OptimalHierarchyLayout_layerDistance($this->_cPtr,$x);
		}
		return $r;
	}

	function fixedLayerDistance($b=null) {
		switch (func_num_args()) {
		case 0: $r=OptimalHierarchyLayout_fixedLayerDistance($this->_cPtr); break;
		default: $r=OptimalHierarchyLayout_fixedLayerDistance($this->_cPtr,$b);
		}
		return $r;
	}

	function weightSegments($w=null) {
		switch (func_num_args()) {
		case 0: $r=OptimalHierarchyLayout_weightSegments($this->_cPtr); break;
		default: $r=OptimalHierarchyLayout_weightSegments($this->_cPtr,$w);
		}
		return $r;
	}

	function weightBalancing($w=null) {
		switch (func_num_args()) {
		case 0: $r=OptimalHierarchyLayout_weightBalancing($this->_cPtr); break;
		default: $r=OptimalHierarchyLayout_weightBalancing($this->_cPtr,$w);
		}
		return $r;
	}
}

class RankingModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class OptimalRanking extends RankingModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		RankingModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return RankingModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return RankingModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function separateMultiEdges($b=null) {
		switch (func_num_args()) {
		case 0: $r=OptimalRanking_separateMultiEdges($this->_cPtr); break;
		default: $r=OptimalRanking_separateMultiEdges($this->_cPtr,$b);
		}
		return $r;
	}

	function setSubgraph($pSubgraph) {
		OptimalRanking_setSubgraph($this->_cPtr,$pSubgraph);
	}
}

class LongestPathRanking extends RankingModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		RankingModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return RankingModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return RankingModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function separateDeg0Layer($sdl=null) {
		switch (func_num_args()) {
		case 0: $r=LongestPathRanking_separateDeg0Layer($this->_cPtr); break;
		default: $r=LongestPathRanking_separateDeg0Layer($this->_cPtr,$sdl);
		}
		return $r;
	}

	function separateMultiEdges($b=null) {
		switch (func_num_args()) {
		case 0: $r=LongestPathRanking_separateMultiEdges($this->_cPtr); break;
		default: $r=LongestPathRanking_separateMultiEdges($this->_cPtr,$b);
		}
		return $r;
	}

	function optimizeEdgeLength($b=null) {
		switch (func_num_args()) {
		case 0: $r=LongestPathRanking_optimizeEdgeLength($this->_cPtr); break;
		default: $r=LongestPathRanking_optimizeEdgeLength($this->_cPtr,$b);
		}
		return $r;
	}

	function alignBaseClasses($b=null) {
		switch (func_num_args()) {
		case 0: $r=LongestPathRanking_alignBaseClasses($this->_cPtr); break;
		default: $r=LongestPathRanking_alignBaseClasses($this->_cPtr,$b);
		}
		return $r;
	}

	function alignSiblings($b=null) {
		switch (func_num_args()) {
		case 0: $r=LongestPathRanking_alignSiblings($this->_cPtr); break;
		default: $r=LongestPathRanking_alignSiblings($this->_cPtr,$b);
		}
		return $r;
	}

	function setSubgraph($pSubgraph) {
		LongestPathRanking_setSubgraph($this->_cPtr,$pSubgraph);
	}
}

class CoffmanGrahamRanking extends RankingModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		RankingModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return RankingModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return RankingModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function setSubgraph($pSubgraph) {
		CoffmanGrahamRanking_setSubgraph($this->_cPtr,$pSubgraph);
	}

	function width($w=null) {
		switch (func_num_args()) {
		case 0: $r=CoffmanGrahamRanking_width($this->_cPtr); break;
		default: $r=CoffmanGrahamRanking_width($this->_cPtr,$w);
		}
		return $r;
	}
}

class AcyclicSubgraphModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class DfsAcyclicSubgraph extends AcyclicSubgraphModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		AcyclicSubgraphModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return AcyclicSubgraphModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return AcyclicSubgraphModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class GreedyCycleRemoval extends AcyclicSubgraphModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		AcyclicSubgraphModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return AcyclicSubgraphModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return AcyclicSubgraphModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class LayeredCrossMinModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class LayerByLayerSweep extends LayeredCrossMinModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayeredCrossMinModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayeredCrossMinModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayeredCrossMinModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class GlobalSifting extends LayeredCrossMinModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayeredCrossMinModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayeredCrossMinModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayeredCrossMinModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function nRepeats($num=null) {
		switch (func_num_args()) {
		case 0: $r=GlobalSifting_nRepeats($this->_cPtr); break;
		default: $r=GlobalSifting_nRepeats($this->_cPtr,$num);
		}
		return $r;
	}
}

class GridSifting extends LayeredCrossMinModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayeredCrossMinModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayeredCrossMinModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayeredCrossMinModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function verticalStepsBound($b=null) {
		switch (func_num_args()) {
		case 0: $r=GridSifting_verticalStepsBound($this->_cPtr); break;
		default: $r=GridSifting_verticalStepsBound($this->_cPtr,$b);
		}
		return $r;
	}
}

class HierarchyClusterLayoutModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class CrossingMinimizationModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class SubgraphPlanarizer extends CrossingMinimizationModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		CrossingMinimizationModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return CrossingMinimizationModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return CrossingMinimizationModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class PlanarSubgraphModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class MaximalPlanarSubgraphSimple extends PlanarSubgraphModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		PlanarSubgraphModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return PlanarSubgraphModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return PlanarSubgraphModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class FastPlanarSubgraph extends PlanarSubgraphModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		PlanarSubgraphModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return PlanarSubgraphModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return PlanarSubgraphModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function runs($nRuns) {
		FastPlanarSubgraph_runs($this->_cPtr,$nRuns);
	}
}

class EdgeInsertionModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class FixedEmbeddingInserter extends EdgeInsertionModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EdgeInsertionModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EdgeInsertionModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EdgeInsertionModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function removeReinsert($rrOption) {
		FixedEmbeddingInserter_removeReinsert($this->_cPtr,$rrOption);
	}

	function percentMostCrossed($percent) {
		FixedEmbeddingInserter_percentMostCrossed($this->_cPtr,$percent);
	}

	function keepEmbedding($keep) {
		FixedEmbeddingInserter_keepEmbedding($this->_cPtr,$keep);
	}
}

class VariableEmbeddingInserter extends EdgeInsertionModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EdgeInsertionModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EdgeInsertionModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EdgeInsertionModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function removeReinsert($rrOption) {
		VariableEmbeddingInserter_removeReinsert($this->_cPtr,$rrOption);
	}

	function percentMostCrossed($percent) {
		VariableEmbeddingInserter_percentMostCrossed($this->_cPtr,$percent);
	}
}

class MultiEdgeApproxInserter extends EdgeInsertionModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EdgeInsertionModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EdgeInsertionModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EdgeInsertionModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function removeReinsertFix($rrOption) {
		MultiEdgeApproxInserter_removeReinsertFix($this->_cPtr,$rrOption);
	}

	function removeReinsertVar($rrOption) {
		MultiEdgeApproxInserter_removeReinsertVar($this->_cPtr,$rrOption);
	}

	function percentMostCrossedFix($percent) {
		MultiEdgeApproxInserter_percentMostCrossedFix($this->_cPtr,$percent);
	}

	function percentMostCrossedVar($percent) {
		MultiEdgeApproxInserter_percentMostCrossedVar($this->_cPtr,$percent);
	}

	function statistics($b) {
		MultiEdgeApproxInserter_statistics($this->_cPtr,$b);
	}
}

class VariableEmbeddingInserterDyn extends EdgeInsertionModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EdgeInsertionModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EdgeInsertionModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EdgeInsertionModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function removeReinsert($rrOption) {
		VariableEmbeddingInserterDyn_removeReinsert($this->_cPtr,$rrOption);
	}

	function percentMostCrossed($percent) {
		VariableEmbeddingInserterDyn_percentMostCrossed($this->_cPtr,$percent);
	}
}

class EmbedderModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class EmbedderMaxFaceLayers extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class EmbedderMinDepth extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class EmbedderMaxFace extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class SimpleEmbedder extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class EmbedderMinDepthMaxFace extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class EmbedderMinDepthPiTa extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class EmbedderMinDepthMaxFaceLayers extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class EmbedderOptimalFlexDraw extends EmbedderModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		EmbedderModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return EmbedderModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return EmbedderModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class LayoutPlanRepModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class OrthoLayout extends LayoutPlanRepModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutPlanRepModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutPlanRepModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutPlanRepModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function separation($sep) {
		OrthoLayout_separation($this->_cPtr,$sep);
	}

	function cOverhang($c_) {
		OrthoLayout_cOverhang($this->_cPtr,$c_);
	}

	function margin($m) {
		OrthoLayout_margin($this->_cPtr,$m);
	}

	function progressive($b) {
		OrthoLayout_progressive($this->_cPtr,$b);
	}

	function scaling($b) {
		OrthoLayout_scaling($this->_cPtr,$b);
	}

	function bendBound($i) {
		OrthoLayout_bendBound($this->_cPtr,$i);
	}
}

class CCLayoutPackModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class TileToRowsCCPacker extends CCLayoutPackModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		CCLayoutPackModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return CCLayoutPackModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return CCLayoutPackModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class UPRLayoutModule {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class LayerBasedUPRLayout extends UPRLayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		UPRLayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return UPRLayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return UPRLayoutModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class Color {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($r_or_str=null,$g=null,$b=null,$a=255) {
		if (is_resource($r_or_str) && get_resource_type($r_or_str) === '_p_ogdf__Color') {
			$this->_cPtr=$r_or_str;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Color(); break;
		case 1: $this->_cPtr=new_Color($r_or_str); break;
		case 2: $this->_cPtr=new_Color($r_or_str,$g); break;
		default: $this->_cPtr=new_Color($r_or_str,$g,$b,$a);
		}
	}

	function red($r_=null) {
		switch (func_num_args()) {
		case 0: $r=Color_red($this->_cPtr); break;
		default: $r=Color_red($this->_cPtr,$r_);
		}
		return $r;
	}

	function green($g=null) {
		switch (func_num_args()) {
		case 0: $r=Color_green($this->_cPtr); break;
		default: $r=Color_green($this->_cPtr,$g);
		}
		return $r;
	}

	function blue($b=null) {
		switch (func_num_args()) {
		case 0: $r=Color_blue($this->_cPtr); break;
		default: $r=Color_blue($this->_cPtr,$b);
		}
		return $r;
	}

	function alpha($a=null) {
		switch (func_num_args()) {
		case 0: $r=Color_alpha($this->_cPtr); break;
		default: $r=Color_alpha($this->_cPtr,$a);
		}
		return $r;
	}

	function toString() {
		return Color_toString($this->_cPtr);
	}

	function fromString($str) {
		return Color_fromString($this->_cPtr,$str);
	}

	function __notequals__($c_) {
		return Color___notequals__($this->_cPtr,$c_);
	}
}

class Stroke {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Stroke_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'm_color') return new Color(Stroke_m_color_get($this->_cPtr));
		$func = 'Stroke_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Stroke_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($c_=null) {
		if (is_resource($c_) && get_resource_type($c_) === '_p_ogdf__Stroke') {
			$this->_cPtr=$c_;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Stroke(); break;
		default: $this->_cPtr=new_Stroke($c_);
		}
	}
}

class Fill {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Fill_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'm_color') return new Color(Fill_m_color_get($this->_cPtr));
		if ($var === 'm_bgColor') return new Color(Fill_m_bgColor_get($this->_cPtr));
		if ($var === 'm_pattern') return Fill_m_pattern_get($this->_cPtr);
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Fill_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($c_=null,$pattern_or_bgColor=null,$pattern=null) {
		if (is_resource($c_) && get_resource_type($c_) === '_p_ogdf__Fill') {
			$this->_cPtr=$c_;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Fill(); break;
		case 1: $this->_cPtr=new_Fill($c_); break;
		case 2: $this->_cPtr=new_Fill($c_,$pattern_or_bgColor); break;
		default: $this->_cPtr=new_Fill($c_,$pattern_or_bgColor,$pattern);
		}
	}
}

class GraphAttributes {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	const nodeGraphics = GraphAttributes_nodeGraphics;

	const edgeGraphics = GraphAttributes_edgeGraphics;

	const edgeIntWeight = GraphAttributes_edgeIntWeight;

	const edgeDoubleWeight = GraphAttributes_edgeDoubleWeight;

	const edgeLabel = GraphAttributes_edgeLabel;

	const nodeLabel = GraphAttributes_nodeLabel;

	const edgeType = GraphAttributes_edgeType;

	const nodeType = GraphAttributes_nodeType;

	const nodeId = GraphAttributes_nodeId;

	const edgeArrow = GraphAttributes_edgeArrow;

	const edgeStyle = GraphAttributes_edgeStyle;

	const nodeStyle = GraphAttributes_nodeStyle;

	const nodeTemplate = GraphAttributes_nodeTemplate;

	const edgeSubGraphs = GraphAttributes_edgeSubGraphs;

	const nodeWeight = GraphAttributes_nodeWeight;

	const threeD = GraphAttributes_threeD;

	function __construct($G=null,$initAttributes=null) {
		if (is_resource($G) && get_resource_type($G) === '_p_ogdf__GraphAttributes') {
			$this->_cPtr=$G;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_GraphAttributes(); break;
		case 1: $this->_cPtr=new_GraphAttributes($G); break;
		default: $this->_cPtr=new_GraphAttributes($G,$initAttributes);
		}
	}

	function attributes() {
		return GraphAttributes_attributes($this->_cPtr);
	}

	function init($G,$initAttr) {
		GraphAttributes_init($this->_cPtr,$G,$initAttr);
	}

	function initAttributes($attr) {
		GraphAttributes_initAttributes($this->_cPtr,$attr);
	}

	function destroyAttributes($attr) {
		GraphAttributes_destroyAttributes($this->_cPtr,$attr);
	}

	function constGraph() {
		$r=GraphAttributes_constGraph($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Graph($r);
		}
		return $r;
	}

	function directed() {
		return GraphAttributes_directed($this->_cPtr);
	}

	function setDirected($directed) {
		GraphAttributes_setDirected($this->_cPtr,$directed);
	}

	function x($v) {
		return GraphAttributes_x($this->_cPtr,$v);
	}

	function setX($v,$val) {
		GraphAttributes_setX($this->_cPtr,$v,$val);
	}

	function y($v) {
		return GraphAttributes_y($this->_cPtr,$v);
	}

	function setY($v,$val) {
		GraphAttributes_setY($this->_cPtr,$v,$val);
	}

	function z($v) {
		return GraphAttributes_z($this->_cPtr,$v);
	}

	function setZ($v,$val) {
		GraphAttributes_setZ($this->_cPtr,$v,$val);
	}

	function height($v) {
		return GraphAttributes_height($this->_cPtr,$v);
	}

	function setHeight($v,$val) {
		GraphAttributes_setHeight($this->_cPtr,$v,$val);
	}

	function width($v) {
		return GraphAttributes_width($this->_cPtr,$v);
	}

	function setWidth($v,$val) {
		GraphAttributes_setWidth($this->_cPtr,$v,$val);
	}

	function shape($v) {
		return GraphAttributes_shape($this->_cPtr,$v);
	}

	function setShape($v,$val) {
		GraphAttributes_setShape($this->_cPtr,$v,$val);
	}

	function fillPattern($v) {
		return GraphAttributes_fillPattern($this->_cPtr,$v);
	}

	function setFillPattern($v,$fp) {
		GraphAttributes_setFillPattern($this->_cPtr,$v,$fp);
	}

	function fillColor($v) {
		$r=GraphAttributes_fillColor($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Color($r);
		}
		return $r;
	}

	function setFillColor($v,$val) {
		GraphAttributes_setFillColor($this->_cPtr,$v,$val);
	}

	function fillBgColor($v) {
		$r=GraphAttributes_fillBgColor($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Color($r);
		}
		return $r;
	}

	function setFillBgColor($v,$val) {
		GraphAttributes_setFillBgColor($this->_cPtr,$v,$val);
	}

	function templateNode($v) {
		return GraphAttributes_templateNode($this->_cPtr,$v);
	}

	function setTemplateNode($v,$val) {
		GraphAttributes_setTemplateNode($this->_cPtr,$v,$val);
	}

	function weight($v) {
		return GraphAttributes_weight($this->_cPtr,$v);
	}

	function setWeight($v,$val) {
		GraphAttributes_setWeight($this->_cPtr,$v,$val);
	}

	function idNode($v) {
		return GraphAttributes_idNode($this->_cPtr,$v);
	}

	function setIdNode($v,$val) {
		GraphAttributes_setIdNode($this->_cPtr,$v,$val);
	}

	function bends($v) {
		return GraphAttributes_bends($this->_cPtr,$v);
	}

	function setBends($v,$val) {
		GraphAttributes_setBends($this->_cPtr,$v,$val);
	}

	function arrowType($v) {
		return GraphAttributes_arrowType($this->_cPtr,$v);
	}

	function setArrowType($v,$val) {
		GraphAttributes_setArrowType($this->_cPtr,$v,$val);
	}

	function strokeType($v_or_e) {
		return GraphAttributes_strokeType($this->_cPtr,$v_or_e);
	}

	function setStrokeType($v_or_e,$st) {
		GraphAttributes_setStrokeType($this->_cPtr,$v_or_e,$st);
	}

	function strokeColor($v) {
		$r=GraphAttributes_strokeColor($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Color($r);
		}
		return $r;
	}

	function setStrokeColor($v,$val) {
		GraphAttributes_setStrokeColor($this->_cPtr,$v,$val);
	}

	function strokeWidth($v) {
		return GraphAttributes_strokeWidth($this->_cPtr,$v);
	}

	function setStrokeWidth($v,$val) {
		GraphAttributes_setStrokeWidth($this->_cPtr,$v,$val);
	}

	function label($v) {
		return GraphAttributes_label($this->_cPtr,$v);
	}

	function setLabel($v,$val) {
		GraphAttributes_setLabel($this->_cPtr,$v,$val);
	}

	function intWeight($v) {
		return GraphAttributes_intWeight($this->_cPtr,$v);
	}

	function setIntWeight($v,$val) {
		GraphAttributes_setIntWeight($this->_cPtr,$v,$val);
	}

	function doubleWeight($v) {
		return GraphAttributes_doubleWeight($this->_cPtr,$v);
	}

	function setDoubleWeight($v,$val) {
		GraphAttributes_setDoubleWeight($this->_cPtr,$v,$val);
	}

	function _type($v) {
		return GraphAttributes__type($this->_cPtr,$v);
	}

	function setType($v,$val) {
		GraphAttributes_setType($this->_cPtr,$v,$val);
	}

	function subGraphBits($v) {
		return GraphAttributes_subGraphBits($this->_cPtr,$v);
	}

	function setSubGraphBits($v,$val) {
		GraphAttributes_setSubGraphBits($this->_cPtr,$v,$val);
	}

	function inSubGraph($e,$n) {
		return GraphAttributes_inSubGraph($this->_cPtr,$e,$n);
	}

	function addSubGraph($e,$n) {
		GraphAttributes_addSubGraph($this->_cPtr,$e,$n);
	}

	function removeSubGraph($e,$n) {
		GraphAttributes_removeSubGraph($this->_cPtr,$e,$n);
	}

	function boundingBox() {
		return GraphAttributes_boundingBox($this->_cPtr);
	}

	function setAllWidth($w) {
		GraphAttributes_setAllWidth($this->_cPtr,$w);
	}

	function setAllHeight($h) {
		GraphAttributes_setAllHeight($this->_cPtr,$h);
	}

	function clearAllBends() {
		GraphAttributes_clearAllBends($this->_cPtr);
	}

	function removeUnnecessaryBendsHV() {
		GraphAttributes_removeUnnecessaryBendsHV($this->_cPtr);
	}

	function addNodeCenter2Bends($mode=1) {
		GraphAttributes_addNodeCenter2Bends($this->_cPtr,$mode);
	}

	function isAssociationClass($v) {
		return GraphAttributes_isAssociationClass($this->_cPtr,$v);
	}

	function hierarchyList($list) {
		return GraphAttributes_hierarchyList($this->_cPtr,$list);
	}
}

class GEMLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	function __construct($fl=null) {
		if (is_resource($fl) && get_resource_type($fl) === '_p_ogdf__GEMLayout') {
			$this->_cPtr=$fl;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_GEMLayout(); break;
		default: $this->_cPtr=new_GEMLayout($fl);
		}
	}

	function call($GA) {
		GEMLayout_call($this->_cPtr,$GA);
	}

	function numberOfRounds($n=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_numberOfRounds($this->_cPtr); break;
		default: $r=GEMLayout_numberOfRounds($this->_cPtr,$n);
		}
		return $r;
	}

	function minimalTemperature($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_minimalTemperature($this->_cPtr); break;
		default: $r=GEMLayout_minimalTemperature($this->_cPtr,$x);
		}
		return $r;
	}

	function initialTemperature($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_initialTemperature($this->_cPtr); break;
		default: $r=GEMLayout_initialTemperature($this->_cPtr,$x);
		}
		return $r;
	}

	function gravitationalConstant($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_gravitationalConstant($this->_cPtr); break;
		default: $r=GEMLayout_gravitationalConstant($this->_cPtr,$x);
		}
		return $r;
	}

	function desiredLength($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_desiredLength($this->_cPtr); break;
		default: $r=GEMLayout_desiredLength($this->_cPtr,$x);
		}
		return $r;
	}

	function maximalDisturbance($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_maximalDisturbance($this->_cPtr); break;
		default: $r=GEMLayout_maximalDisturbance($this->_cPtr,$x);
		}
		return $r;
	}

	function rotationAngle($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_rotationAngle($this->_cPtr); break;
		default: $r=GEMLayout_rotationAngle($this->_cPtr,$x);
		}
		return $r;
	}

	function oscillationAngle($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_oscillationAngle($this->_cPtr); break;
		default: $r=GEMLayout_oscillationAngle($this->_cPtr,$x);
		}
		return $r;
	}

	function rotationSensitivity($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_rotationSensitivity($this->_cPtr); break;
		default: $r=GEMLayout_rotationSensitivity($this->_cPtr,$x);
		}
		return $r;
	}

	function oscillationSensitivity($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_oscillationSensitivity($this->_cPtr); break;
		default: $r=GEMLayout_oscillationSensitivity($this->_cPtr,$x);
		}
		return $r;
	}

	function attractionFormula($n=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_attractionFormula($this->_cPtr); break;
		default: $r=GEMLayout_attractionFormula($this->_cPtr,$n);
		}
		return $r;
	}

	function minDistCC($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_minDistCC($this->_cPtr); break;
		default: $r=GEMLayout_minDistCC($this->_cPtr,$x);
		}
		return $r;
	}

	function pageRatio($x=null) {
		switch (func_num_args()) {
		case 0: $r=GEMLayout_pageRatio($this->_cPtr); break;
		default: $r=GEMLayout_pageRatio($this->_cPtr,$x);
		}
		return $r;
	}
}

class FMMMLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	const pfPortrait = 0;

	const pfLandscape = FMMMLayout_pfLandscape;

	const pfSquare = FMMMLayout_pfSquare;

	const qvsGorgeousAndEfficient = 0;

	const qvsBeautifulAndFast = FMMMLayout_qvsBeautifulAndFast;

	const qvsNiceAndIncredibleSpeed = FMMMLayout_qvsNiceAndIncredibleSpeed;

	const elmMidpoint = 0;

	const elmBoundingCircle = FMMMLayout_elmBoundingCircle;

	const apAll = 0;

	const apInteger = FMMMLayout_apInteger;

	const apExponent = FMMMLayout_apExponent;

	const toNone = 0;

	const toNoGrowingRow = FMMMLayout_toNoGrowingRow;

	const toAlways = FMMMLayout_toAlways;

	const psNone = 0;

	const psDecreasingHeight = FMMMLayout_psDecreasingHeight;

	const psDecreasingWidth = FMMMLayout_psDecreasingWidth;

	const gcUniformProb = 0;

	const gcNonUniformProbLowerMass = FMMMLayout_gcNonUniformProbLowerMass;

	const gcNonUniformProbHigherMass = FMMMLayout_gcNonUniformProbHigherMass;

	const micConstant = 0;

	const micLinearlyDecreasing = FMMMLayout_micLinearlyDecreasing;

	const micRapidlyDecreasing = FMMMLayout_micRapidlyDecreasing;

	const ipmSimple = 0;

	const ipmAdvanced = FMMMLayout_ipmAdvanced;

	const fmFruchtermanReingold = 0;

	const fmEades = FMMMLayout_fmEades;

	const fmNew = FMMMLayout_fmNew;

	const rfcExact = 0;

	const rfcGridApproximation = FMMMLayout_rfcGridApproximation;

	const rfcNMM = FMMMLayout_rfcNMM;

	const scFixedIterations = 0;

	const scThreshold = FMMMLayout_scThreshold;

	const scFixedIterationsOrThreshold = FMMMLayout_scFixedIterationsOrThreshold;

	const ipfUniformGrid = 0;

	const ipfRandomTime = FMMMLayout_ipfRandomTime;

	const ipfRandomRandIterNr = FMMMLayout_ipfRandomRandIterNr;

	const ipfKeepPositions = FMMMLayout_ipfKeepPositions;

	const rtcPathByPath = 0;

	const rtcSubtreeBySubtree = FMMMLayout_rtcSubtreeBySubtree;

	const scfIteratively = 0;

	const scfAluru = FMMMLayout_scfAluru;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__FMMMLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FMMMLayout();
	}

	function call($GA_or_AG,$GC_or_edgeLength_or_ps_file=null,$ps_file=null) {
		switch (func_num_args()) {
		case 1: FMMMLayout_call($this->_cPtr,$GA_or_AG); break;
		case 2: FMMMLayout_call($this->_cPtr,$GA_or_AG,$GC_or_edgeLength_or_ps_file); break;
		default: FMMMLayout_call($this->_cPtr,$GA_or_AG,$GC_or_edgeLength_or_ps_file,$ps_file);
		}
	}

	function getCpuTime() {
		return FMMMLayout_getCpuTime($this->_cPtr);
	}

	function useHighLevelOptions($uho=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_useHighLevelOptions($this->_cPtr); break;
		default: $r=FMMMLayout_useHighLevelOptions($this->_cPtr,$uho);
		}
		return $r;
	}

	function setSingleLevel($b) {
		FMMMLayout_setSingleLevel($this->_cPtr,$b);
	}

	function pageFormat($t=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_pageFormat($this->_cPtr); break;
		default: $r=FMMMLayout_pageFormat($this->_cPtr,$t);
		}
		return $r;
	}

	function unitEdgeLength($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_unitEdgeLength($this->_cPtr); break;
		default: $r=FMMMLayout_unitEdgeLength($this->_cPtr,$x);
		}
		return $r;
	}

	function newInitialPlacement($nip=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_newInitialPlacement($this->_cPtr); break;
		default: $r=FMMMLayout_newInitialPlacement($this->_cPtr,$nip);
		}
		return $r;
	}

	function qualityVersusSpeed($qvs=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_qualityVersusSpeed($this->_cPtr); break;
		default: $r=FMMMLayout_qualityVersusSpeed($this->_cPtr,$qvs);
		}
		return $r;
	}

	function randSeed($p=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_randSeed($this->_cPtr); break;
		default: $r=FMMMLayout_randSeed($this->_cPtr,$p);
		}
		return $r;
	}

	function edgeLengthMeasurement($elm=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_edgeLengthMeasurement($this->_cPtr); break;
		default: $r=FMMMLayout_edgeLengthMeasurement($this->_cPtr,$elm);
		}
		return $r;
	}

	function allowedPositions($ap=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_allowedPositions($this->_cPtr); break;
		default: $r=FMMMLayout_allowedPositions($this->_cPtr,$ap);
		}
		return $r;
	}

	function maxIntPosExponent($e=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_maxIntPosExponent($this->_cPtr); break;
		default: $r=FMMMLayout_maxIntPosExponent($this->_cPtr,$e);
		}
		return $r;
	}

	function pageRatio($r_=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_pageRatio($this->_cPtr); break;
		default: $r=FMMMLayout_pageRatio($this->_cPtr,$r_);
		}
		return $r;
	}

	function stepsForRotatingComponents($n=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_stepsForRotatingComponents($this->_cPtr); break;
		default: $r=FMMMLayout_stepsForRotatingComponents($this->_cPtr,$n);
		}
		return $r;
	}

	function tipOverCCs($to=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_tipOverCCs($this->_cPtr); break;
		default: $r=FMMMLayout_tipOverCCs($this->_cPtr,$to);
		}
		return $r;
	}

	function minDistCC($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_minDistCC($this->_cPtr); break;
		default: $r=FMMMLayout_minDistCC($this->_cPtr,$x);
		}
		return $r;
	}

	function presortCCs($ps=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_presortCCs($this->_cPtr); break;
		default: $r=FMMMLayout_presortCCs($this->_cPtr,$ps);
		}
		return $r;
	}

	function minGraphSize($n=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_minGraphSize($this->_cPtr); break;
		default: $r=FMMMLayout_minGraphSize($this->_cPtr,$n);
		}
		return $r;
	}

	function galaxyChoice($gc=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_galaxyChoice($this->_cPtr); break;
		default: $r=FMMMLayout_galaxyChoice($this->_cPtr,$gc);
		}
		return $r;
	}

	function randomTries($n=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_randomTries($this->_cPtr); break;
		default: $r=FMMMLayout_randomTries($this->_cPtr,$n);
		}
		return $r;
	}

	function maxIterChange($mic=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_maxIterChange($this->_cPtr); break;
		default: $r=FMMMLayout_maxIterChange($this->_cPtr,$mic);
		}
		return $r;
	}

	function maxIterFactor($f=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_maxIterFactor($this->_cPtr); break;
		default: $r=FMMMLayout_maxIterFactor($this->_cPtr,$f);
		}
		return $r;
	}

	function initialPlacementMult($ipm=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_initialPlacementMult($this->_cPtr); break;
		default: $r=FMMMLayout_initialPlacementMult($this->_cPtr,$ipm);
		}
		return $r;
	}

	function forceModel($fm=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_forceModel($this->_cPtr); break;
		default: $r=FMMMLayout_forceModel($this->_cPtr,$fm);
		}
		return $r;
	}

	function springStrength($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_springStrength($this->_cPtr); break;
		default: $r=FMMMLayout_springStrength($this->_cPtr,$x);
		}
		return $r;
	}

	function repForcesStrength($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_repForcesStrength($this->_cPtr); break;
		default: $r=FMMMLayout_repForcesStrength($this->_cPtr,$x);
		}
		return $r;
	}

	function repulsiveForcesCalculation($rfc=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_repulsiveForcesCalculation($this->_cPtr); break;
		default: $r=FMMMLayout_repulsiveForcesCalculation($this->_cPtr,$rfc);
		}
		return $r;
	}

	function stopCriterion($rsc=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_stopCriterion($this->_cPtr); break;
		default: $r=FMMMLayout_stopCriterion($this->_cPtr,$rsc);
		}
		return $r;
	}

	function threshold($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_threshold($this->_cPtr); break;
		default: $r=FMMMLayout_threshold($this->_cPtr,$x);
		}
		return $r;
	}

	function fixedIterations($n=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_fixedIterations($this->_cPtr); break;
		default: $r=FMMMLayout_fixedIterations($this->_cPtr,$n);
		}
		return $r;
	}

	function forceScalingFactor($f=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_forceScalingFactor($this->_cPtr); break;
		default: $r=FMMMLayout_forceScalingFactor($this->_cPtr,$f);
		}
		return $r;
	}

	function coolTemperature($b=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_coolTemperature($this->_cPtr); break;
		default: $r=FMMMLayout_coolTemperature($this->_cPtr,$b);
		}
		return $r;
	}

	function coolValue($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_coolValue($this->_cPtr); break;
		default: $r=FMMMLayout_coolValue($this->_cPtr,$x);
		}
		return $r;
	}

	function initialPlacementForces($ipf=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_initialPlacementForces($this->_cPtr); break;
		default: $r=FMMMLayout_initialPlacementForces($this->_cPtr,$ipf);
		}
		return $r;
	}

	function resizeDrawing($b=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_resizeDrawing($this->_cPtr); break;
		default: $r=FMMMLayout_resizeDrawing($this->_cPtr,$b);
		}
		return $r;
	}

	function resizingScalar($s=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_resizingScalar($this->_cPtr); break;
		default: $r=FMMMLayout_resizingScalar($this->_cPtr,$s);
		}
		return $r;
	}

	function fineTuningIterations($n=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_fineTuningIterations($this->_cPtr); break;
		default: $r=FMMMLayout_fineTuningIterations($this->_cPtr,$n);
		}
		return $r;
	}

	function fineTuneScalar($s=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_fineTuneScalar($this->_cPtr); break;
		default: $r=FMMMLayout_fineTuneScalar($this->_cPtr,$s);
		}
		return $r;
	}

	function adjustPostRepStrengthDynamically($b=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_adjustPostRepStrengthDynamically($this->_cPtr); break;
		default: $r=FMMMLayout_adjustPostRepStrengthDynamically($this->_cPtr,$b);
		}
		return $r;
	}

	function postSpringStrength($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_postSpringStrength($this->_cPtr); break;
		default: $r=FMMMLayout_postSpringStrength($this->_cPtr,$x);
		}
		return $r;
	}

	function postStrengthOfRepForces($x=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_postStrengthOfRepForces($this->_cPtr); break;
		default: $r=FMMMLayout_postStrengthOfRepForces($this->_cPtr,$x);
		}
		return $r;
	}

	function frGridQuotient($p=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_frGridQuotient($this->_cPtr); break;
		default: $r=FMMMLayout_frGridQuotient($this->_cPtr,$p);
		}
		return $r;
	}

	function nmTreeConstruction($rtc=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_nmTreeConstruction($this->_cPtr); break;
		default: $r=FMMMLayout_nmTreeConstruction($this->_cPtr,$rtc);
		}
		return $r;
	}

	function nmSmallCell($scf=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_nmSmallCell($this->_cPtr); break;
		default: $r=FMMMLayout_nmSmallCell($this->_cPtr,$scf);
		}
		return $r;
	}

	function nmParticlesInLeaves($n=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_nmParticlesInLeaves($this->_cPtr); break;
		default: $r=FMMMLayout_nmParticlesInLeaves($this->_cPtr,$n);
		}
		return $r;
	}

	function nmPrecision($p=null) {
		switch (func_num_args()) {
		case 0: $r=FMMMLayout_nmPrecision($this->_cPtr); break;
		default: $r=FMMMLayout_nmPrecision($this->_cPtr,$p);
		}
		return $r;
	}
}

class DavidsonHarelLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	const spStandard = 0;

	const spRepulse = DavidsonHarelLayout_spRepulse;

	const spPlanar = DavidsonHarelLayout_spPlanar;

	const sppFast = 0;

	const sppMedium = DavidsonHarelLayout_sppMedium;

	const sppHQ = DavidsonHarelLayout_sppHQ;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__DavidsonHarelLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_DavidsonHarelLayout();
	}

	function call($GA) {
		DavidsonHarelLayout_call($this->_cPtr,$GA);
	}

	function fixSettings($sp) {
		DavidsonHarelLayout_fixSettings($this->_cPtr,$sp);
	}

	function setSpeed($sp) {
		DavidsonHarelLayout_setSpeed($this->_cPtr,$sp);
	}

	function setPreferredEdgeLengthMultiplier($multi) {
		DavidsonHarelLayout_setPreferredEdgeLengthMultiplier($this->_cPtr,$multi);
	}

	function setPreferredEdgeLength($elen) {
		DavidsonHarelLayout_setPreferredEdgeLength($this->_cPtr,$elen);
	}

	function setRepulsionWeight($w) {
		DavidsonHarelLayout_setRepulsionWeight($this->_cPtr,$w);
	}

	function getRepulsionWeight() {
		return DavidsonHarelLayout_getRepulsionWeight($this->_cPtr);
	}

	function setAttractionWeight($arg1) {
		DavidsonHarelLayout_setAttractionWeight($this->_cPtr,$arg1);
	}

	function getAttractionWeight() {
		return DavidsonHarelLayout_getAttractionWeight($this->_cPtr);
	}

	function setNodeOverlapWeight($arg1) {
		DavidsonHarelLayout_setNodeOverlapWeight($this->_cPtr,$arg1);
	}

	function getNodeOverlapWeight() {
		return DavidsonHarelLayout_getNodeOverlapWeight($this->_cPtr);
	}

	function setPlanarityWeight($arg1) {
		DavidsonHarelLayout_setPlanarityWeight($this->_cPtr,$arg1);
	}

	function getPlanarityWeight() {
		return DavidsonHarelLayout_getPlanarityWeight($this->_cPtr);
	}

	function setStartTemperature($t) {
		DavidsonHarelLayout_setStartTemperature($this->_cPtr,$t);
	}

	function getStartTemperature() {
		return DavidsonHarelLayout_getStartTemperature($this->_cPtr);
	}

	function setNumberOfIterations($steps) {
		DavidsonHarelLayout_setNumberOfIterations($this->_cPtr,$steps);
	}

	function getNumberOfIterations() {
		return DavidsonHarelLayout_getNumberOfIterations($this->_cPtr);
	}

	function setIterationNumberAsFactor($b) {
		DavidsonHarelLayout_setIterationNumberAsFactor($this->_cPtr,$b);
	}
}

class TutteLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__TutteLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TutteLayout();
	}

	function bbox($bb=null) {
		switch (func_num_args()) {
		case 0: $r=TutteLayout_bbox($this->_cPtr); break;
		default: $r=TutteLayout_bbox($this->_cPtr,$bb);
		}
		return $r;
	}

	function call($AG,$givenNodes=null) {
		switch (func_num_args()) {
		case 1: TutteLayout_call($this->_cPtr,$AG); break;
		default: TutteLayout_call($this->_cPtr,$AG,$givenNodes);
		}
	}
}

class TreeLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	const rootIsSource = 0;

	const rootIsSink = TreeLayout_rootIsSink;

	const rootByCoord = TreeLayout_rootByCoord;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__TreeLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TreeLayout();
	}

	function call($GA) {
		TreeLayout_call($this->_cPtr,$GA);
	}

	function siblingDistance($x) {
		TreeLayout_siblingDistance($this->_cPtr,$x);
	}

	function subtreeDistance($x) {
		TreeLayout_subtreeDistance($this->_cPtr,$x);
	}

	function levelDistance($x) {
		TreeLayout_levelDistance($this->_cPtr,$x);
	}

	function treeDistance($x) {
		TreeLayout_treeDistance($this->_cPtr,$x);
	}

	function orthogonalLayout($b) {
		TreeLayout_orthogonalLayout($this->_cPtr,$b);
	}

	function orientation($orientation) {
		TreeLayout_orientation($this->_cPtr,$orientation);
	}

	function rootSelection($rootSelection) {
		TreeLayout_rootSelection($this->_cPtr,$rootSelection);
	}
}

class RadialTreeLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	const rootIsSource = 0;

	const rootIsSink = RadialTreeLayout_rootIsSink;

	const rootIsCenter = RadialTreeLayout_rootIsCenter;

	function __construct($tl=null) {
		if (is_resource($tl) && get_resource_type($tl) === '_p_ogdf__RadialTreeLayout') {
			$this->_cPtr=$tl;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_RadialTreeLayout(); break;
		default: $this->_cPtr=new_RadialTreeLayout($tl);
		}
	}

	function call($GA) {
		RadialTreeLayout_call($this->_cPtr,$GA);
	}

	function levelDistance($x) {
		RadialTreeLayout_levelDistance($this->_cPtr,$x);
	}

	function connectedComponentDistance($x) {
		RadialTreeLayout_connectedComponentDistance($this->_cPtr,$x);
	}

	function rootSelection($sel) {
		RadialTreeLayout_rootSelection($this->_cPtr,$sel);
	}
}

class CircularLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__CircularLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_CircularLayout();
	}

	function call($GA) {
		CircularLayout_call($this->_cPtr,$GA);
	}

	function minDistCircle($x) {
		CircularLayout_minDistCircle($this->_cPtr,$x);
	}

	function minDistLevel($x) {
		CircularLayout_minDistLevel($this->_cPtr,$x);
	}

	function minDistSibling($x) {
		CircularLayout_minDistSibling($this->_cPtr,$x);
	}

	function minDistCC($x) {
		CircularLayout_minDistCC($this->_cPtr,$x);
	}

	function pageRatio($x) {
		CircularLayout_pageRatio($this->_cPtr,$x);
	}
}

class BalloonLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__BalloonLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_BalloonLayout();
	}

	function call($AG) {
		BalloonLayout_call($this->_cPtr,$AG);
	}

	function setEvenAngles($b) {
		BalloonLayout_setEvenAngles($this->_cPtr,$b);
	}
}

class PlanarizationLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__PlanarizationLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_PlanarizationLayout();
	}

	function call($ga) {
		PlanarizationLayout_call($this->_cPtr,$ga);
	}

	function pageRatio($ratio) {
		PlanarizationLayout_pageRatio($this->_cPtr,$ratio);
	}

	function minCliqueSize($i) {
		PlanarizationLayout_minCliqueSize($this->_cPtr,$i);
	}

	function setCrossMin($pCrossMin) {
		PlanarizationLayout_setCrossMin($this->_cPtr,$pCrossMin);
	}

	function setEmbedder($pEmbedder) {
		PlanarizationLayout_setEmbedder($this->_cPtr,$pEmbedder);
	}

	function setPlanarLayouter($pPlanarLayouter) {
		PlanarizationLayout_setPlanarLayouter($this->_cPtr,$pPlanarLayouter);
	}

	function setPacker($pPacker) {
		PlanarizationLayout_setPacker($this->_cPtr,$pPacker);
	}
}

class SugiyamaLayout {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ogdf__SugiyamaLayout') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SugiyamaLayout();
	}

	function call($GA) {
		SugiyamaLayout_call($this->_cPtr,$GA);
	}

	function fails($nFails) {
		SugiyamaLayout_fails($this->_cPtr,$nFails);
	}

	function runs($nRuns) {
		SugiyamaLayout_runs($this->_cPtr,$nRuns);
	}

	function transpose($bTranspose) {
		SugiyamaLayout_transpose($this->_cPtr,$bTranspose);
	}

	function arrangeCCs($bArrange) {
		SugiyamaLayout_arrangeCCs($this->_cPtr,$bArrange);
	}

	function minDistCC($x) {
		SugiyamaLayout_minDistCC($this->_cPtr,$x);
	}

	function pageRatio($x) {
		SugiyamaLayout_pageRatio($this->_cPtr,$x);
	}

	function alignBaseClasses($b) {
		SugiyamaLayout_alignBaseClasses($this->_cPtr,$b);
	}

	function alignSiblings($b) {
		SugiyamaLayout_alignSiblings($this->_cPtr,$b);
	}

	function permuteFirst($b) {
		SugiyamaLayout_permuteFirst($this->_cPtr,$b);
	}

	function maxThreads($n) {
		SugiyamaLayout_maxThreads($this->_cPtr,$n);
	}

	function setRanking($pRanking) {
		SugiyamaLayout_setRanking($this->_cPtr,$pRanking);
	}

	function setCrossMin($pCrossMin) {
		SugiyamaLayout_setCrossMin($this->_cPtr,$pCrossMin);
	}

	function setLayout($pLayout) {
		SugiyamaLayout_setLayout($this->_cPtr,$pLayout);
	}

	function setClusterLayout($pLayout) {
		SugiyamaLayout_setClusterLayout($this->_cPtr,$pLayout);
	}

	function setPacker($pPacker) {
		SugiyamaLayout_setPacker($this->_cPtr,$pPacker);
	}
}

class UpwardPlanarizationLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function call($AG) {
		UpwardPlanarizationLayout_call($this->_cPtr,$AG);
	}
}

class DominanceLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function call($ga) {
		DominanceLayout_call($this->_cPtr,$ga);
	}

	function setMinGridDistance($dist) {
		DominanceLayout_setMinGridDistance($this->_cPtr,$dist);
	}
}

class VisibilityLayout extends LayoutModule {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		LayoutModule::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return LayoutModule::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return LayoutModule::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function call($ga) {
		VisibilityLayout_call($this->_cPtr,$ga);
	}

	function setMinGridDistance($dist) {
		VisibilityLayout_setMinGridDistance($this->_cPtr,$dist);
	}
}

class SVGSettings {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_SVGSettings') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SVGSettings();
	}

	function margin($m=null) {
		switch (func_num_args()) {
		case 0: $r=SVGSettings_margin($this->_cPtr); break;
		default: $r=SVGSettings_margin($this->_cPtr,$m);
		}
		return $r;
	}

	function fontSize($fs=null) {
		switch (func_num_args()) {
		case 0: $r=SVGSettings_fontSize($this->_cPtr); break;
		default: $r=SVGSettings_fontSize($this->_cPtr,$fs);
		}
		return $r;
	}

	function fontColor($fc=null) {
		switch (func_num_args()) {
		case 0: $r=SVGSettings_fontColor($this->_cPtr); break;
		default: $r=SVGSettings_fontColor($this->_cPtr,$fc);
		}
		return $r;
	}

	function fontFamily($fm=null) {
		switch (func_num_args()) {
		case 0: $r=SVGSettings_fontFamily($this->_cPtr); break;
		default: $r=SVGSettings_fontFamily($this->_cPtr,$fm);
		}
		return $r;
	}
}

class GraphIO {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ogdf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ogdf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	static function readRome($G,$filename_or_is) {
		return GraphIO_readRome($G,$filename_or_is);
	}

	static function writeRome($G,$filename_or_os) {
		return GraphIO_writeRome($G,$filename_or_os);
	}

	static function readLEDA($G,$filename_or_is) {
		return GraphIO_readLEDA($G,$filename_or_is);
	}

	static function writeLEDA($G,$filename_or_os) {
		return GraphIO_writeLEDA($G,$filename_or_os);
	}

	static function readChaco($G,$filename_or_is) {
		return GraphIO_readChaco($G,$filename_or_is);
	}

	static function writeChaco($G,$filename_or_os) {
		return GraphIO_writeChaco($G,$filename_or_os);
	}

	static function readPMDissGraph($G,$filename_or_is) {
		return GraphIO_readPMDissGraph($G,$filename_or_is);
	}

	static function writePMDissGraph($G,$filename_or_os) {
		return GraphIO_writePMDissGraph($G,$filename_or_os);
	}

	static function readYGraph($G,$filename_or_is) {
		return GraphIO_readYGraph($G,$filename_or_is);
	}

	static function readRudy($A,$G,$filename_or_is) {
		return GraphIO_readRudy($A,$G,$filename_or_is);
	}

	static function writeRudy($A,$filename_or_os) {
		return GraphIO_writeRudy($A,$filename_or_os);
	}

	static function readGML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G=null,$filename=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readGML($G_or_C_or_A,$filename_or_is_or_G_or_C); break;
		case 3: $r=GraphIO_readGML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G); break;
		default: $r=GraphIO_readGML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G,$filename);
		}
		return $r;
	}

	static function writeGML($G_or_C_or_A,$filename_or_os) {
		return GraphIO_writeGML($G_or_C_or_A,$filename_or_os);
	}

	static function readOGML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G=null,$filename_or_is=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readOGML($G_or_C_or_A,$filename_or_is_or_G_or_C); break;
		case 3: $r=GraphIO_readOGML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G); break;
		default: $r=GraphIO_readOGML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G,$filename_or_is);
		}
		return $r;
	}

	static function writeOGML($G_or_C_or_A,$filename_or_os) {
		return GraphIO_writeOGML($G_or_C_or_A,$filename_or_os);
	}

	static function readBENCH($G,$hypernodes,$shell,$filename_or_is) {
		return GraphIO_readBENCH($G,$hypernodes,$shell,$filename_or_is);
	}

	static function readPLA($G,$hypernodes,$shell,$filename) {
		return GraphIO_readPLA($G,$hypernodes,$shell,$filename);
	}

	static function readChallengeGraph($G,$gl,$filename_or_is) {
		return GraphIO_readChallengeGraph($G,$gl,$filename_or_is);
	}

	static function writeChallengeGraph($G,$gl,$filename_or_os) {
		return GraphIO_writeChallengeGraph($G,$gl,$filename_or_os);
	}

	static function readGraphML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G=null,$filename_or_is=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readGraphML($G_or_C_or_A,$filename_or_is_or_G_or_C); break;
		case 3: $r=GraphIO_readGraphML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G); break;
		default: $r=GraphIO_readGraphML($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G,$filename_or_is);
		}
		return $r;
	}

	static function writeGraphML($G_or_C_or_A,$filename_or_os) {
		return GraphIO_writeGraphML($G_or_C_or_A,$filename_or_os);
	}

	static function readDOT($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G=null,$filename=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readDOT($G_or_C_or_A,$filename_or_is_or_G_or_C); break;
		case 3: $r=GraphIO_readDOT($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G); break;
		default: $r=GraphIO_readDOT($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G,$filename);
		}
		return $r;
	}

	static function writeDOT($G_or_C_or_A,$filename_or_os) {
		return GraphIO_writeDOT($G_or_C_or_A,$filename_or_os);
	}

	static function readGEXF($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G=null,$filename_or_is=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readGEXF($G_or_C_or_A,$filename_or_is_or_G_or_C); break;
		case 3: $r=GraphIO_readGEXF($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G); break;
		default: $r=GraphIO_readGEXF($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G,$filename_or_is);
		}
		return $r;
	}

	static function writeGEXF($G_or_C_or_A,$filename_or_os) {
		return GraphIO_writeGEXF($G_or_C_or_A,$filename_or_os);
	}

	static function readGDF($G_or_A,$filename_or_is_or_G,$filename_or_is=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readGDF($G_or_A,$filename_or_is_or_G); break;
		default: $r=GraphIO_readGDF($G_or_A,$filename_or_is_or_G,$filename_or_is);
		}
		return $r;
	}

	static function writeGDF($G_or_A,$filename_or_os) {
		return GraphIO_writeGDF($G_or_A,$filename_or_os);
	}

	static function readTLP($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G=null,$filename=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readTLP($G_or_C_or_A,$filename_or_is_or_G_or_C); break;
		case 3: $r=GraphIO_readTLP($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G); break;
		default: $r=GraphIO_readTLP($G_or_C_or_A,$filename_or_is_or_G_or_C,$filename_or_is_or_G,$filename);
		}
		return $r;
	}

	static function writeTLP($G_or_C_or_A,$filename_or_os) {
		return GraphIO_writeTLP($G_or_C_or_A,$filename_or_os);
	}

	static function readDL($G_or_A,$filename_or_is_or_G,$filename_or_is=null) {
		switch (func_num_args()) {
		case 2: $r=GraphIO_readDL($G_or_A,$filename_or_is_or_G); break;
		default: $r=GraphIO_readDL($G_or_A,$filename_or_is_or_G,$filename_or_is);
		}
		return $r;
	}

	static function writeDL($G_or_A,$filename_or_os) {
		return GraphIO_writeDL($G_or_A,$filename_or_os);
	}

	static function readSTP($wG,$terminals,$isTerminal,$filename_or_is) {
		return GraphIO_readSTP($wG,$terminals,$isTerminal,$filename_or_is);
	}

	static function readEdgeListSubgraph($G,$delEdges,$filename_or_is) {
		return GraphIO_readEdgeListSubgraph($G,$delEdges,$filename_or_is);
	}

	static function writeEdgeListSubgraph($G,$delEdges,$filename_or_os) {
		return GraphIO_writeEdgeListSubgraph($G,$delEdges,$filename_or_os);
	}

	static function drawSVG($A,$filename,$settings) {
		return GraphIO_drawSVG($A,$filename,$settings);
	}

	static function indentChar() {
		return GraphIO_indentChar();
	}

	static function indentWidth() {
		return GraphIO_indentWidth();
	}

	static function setIndentChar($c_) {
		GraphIO_setIndentChar($c_);
	}

	static function setIndentWidth($w) {
		GraphIO_setIndentWidth($w);
	}

	static function indent($os,$depth) {
		return GraphIO_indent($os,$depth);
	}
}


?>
