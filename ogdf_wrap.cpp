/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPHP

#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef Z_SET_ISREF_P
/* For PHP < 5.3 */
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
/* For PHP < 5.3 */
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval *resource;
      zend_class_entry **ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      int result;
      const char * p;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      if (SWIG_PREFIX_LEN > 0) {
        char * classname = (char*)emalloc(SWIG_PREFIX_LEN + type_name_len + 1);
        strcpy(classname, SWIG_PREFIX);
        strcpy(classname + SWIG_PREFIX_LEN, type_name);
        result = zend_lookup_class(classname, SWIG_PREFIX_LEN + type_name_len, &ce TSRMLS_CC);
        efree(classname);
      } else {
        result = zend_lookup_class((char *)type_name, type_name_len, &ce TSRMLS_CC);
      }
      if (result != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval*), NULL);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  const char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if (type==-1) return NULL;
  if (flags & SWIG_POINTER_DISOWN) {
    value->newobject = 0;
  }
  p = value->ptr;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
	if ((*_cPtr)->type==IS_RESOURCE) {
	  *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
	  return (*ptr == NULL ? -1 : 0);
	}
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule() {
  zval *pointer;
  swig_module_info *ret = 0;
  TSRMLS_FETCH();

  MAKE_STD_ZVAL(pointer);

  if (zend_get_constant(const_name, sizeof(const_name) - 1, pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  FREE_ZVAL(pointer);
  return ret; 
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_int swig_types[0]
#define SWIGTYPE_p_AcyclicSubgraphModule swig_types[1]
#define SWIGTYPE_p_ClusterGraph swig_types[2]
#define SWIGTYPE_p_ClusterGraphAttributes swig_types[3]
#define SWIGTYPE_p_DPolyline swig_types[4]
#define SWIGTYPE_p_DRect swig_types[5]
#define SWIGTYPE_p_EdgeWeightedGraphT_double_t swig_types[6]
#define SWIGTYPE_p_EdgeWeightedGraphT_int_t swig_types[7]
#define SWIGTYPE_p_GraphConstraints swig_types[8]
#define SWIGTYPE_p_GridLayout swig_types[9]
#define SWIGTYPE_p_Orientation swig_types[10]
#define SWIGTYPE_p_SVGSettings swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_istream swig_types[13]
#define SWIGTYPE_p_long_long swig_types[14]
#define SWIGTYPE_p_ogdf__AcyclicSubgraphModule swig_types[15]
#define SWIGTYPE_p_ogdf__AdjElement swig_types[16]
#define SWIGTYPE_p_ogdf__BalloonLayout swig_types[17]
#define SWIGTYPE_p_ogdf__BarycenterPlacer swig_types[18]
#define SWIGTYPE_p_ogdf__CCLayoutPackModule swig_types[19]
#define SWIGTYPE_p_ogdf__CirclePlacer swig_types[20]
#define SWIGTYPE_p_ogdf__CircularLayout swig_types[21]
#define SWIGTYPE_p_ogdf__CoffmanGrahamRanking swig_types[22]
#define SWIGTYPE_p_ogdf__Color swig_types[23]
#define SWIGTYPE_p_ogdf__CrossingMinimizationModule swig_types[24]
#define SWIGTYPE_p_ogdf__DavidsonHarelLayout swig_types[25]
#define SWIGTYPE_p_ogdf__DfsAcyclicSubgraph swig_types[26]
#define SWIGTYPE_p_ogdf__DominanceLayout swig_types[27]
#define SWIGTYPE_p_ogdf__EdgeArrayT_double_t swig_types[28]
#define SWIGTYPE_p_ogdf__EdgeArrayT_float_t swig_types[29]
#define SWIGTYPE_p_ogdf__EdgeArrayT_int_t swig_types[30]
#define SWIGTYPE_p_ogdf__EdgeArrayT_long_t swig_types[31]
#define SWIGTYPE_p_ogdf__EdgeCoverMerger swig_types[32]
#define SWIGTYPE_p_ogdf__EdgeElement swig_types[33]
#define SWIGTYPE_p_ogdf__EdgeInsertionModule swig_types[34]
#define SWIGTYPE_p_ogdf__EmbedderMaxFace swig_types[35]
#define SWIGTYPE_p_ogdf__EmbedderMaxFaceLayers swig_types[36]
#define SWIGTYPE_p_ogdf__EmbedderMinDepth swig_types[37]
#define SWIGTYPE_p_ogdf__EmbedderMinDepthMaxFace swig_types[38]
#define SWIGTYPE_p_ogdf__EmbedderMinDepthMaxFaceLayers swig_types[39]
#define SWIGTYPE_p_ogdf__EmbedderMinDepthPiTa swig_types[40]
#define SWIGTYPE_p_ogdf__EmbedderModule swig_types[41]
#define SWIGTYPE_p_ogdf__EmbedderOptimalFlexDraw swig_types[42]
#define SWIGTYPE_p_ogdf__FMMMLayout swig_types[43]
#define SWIGTYPE_p_ogdf__FastHierarchyLayout swig_types[44]
#define SWIGTYPE_p_ogdf__FastPlanarSubgraph swig_types[45]
#define SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout swig_types[46]
#define SWIGTYPE_p_ogdf__Fill swig_types[47]
#define SWIGTYPE_p_ogdf__FixedEmbeddingInserter swig_types[48]
#define SWIGTYPE_p_ogdf__GEMLayout swig_types[49]
#define SWIGTYPE_p_ogdf__GlobalSifting swig_types[50]
#define SWIGTYPE_p_ogdf__Graph swig_types[51]
#define SWIGTYPE_p_ogdf__GraphAttributes swig_types[52]
#define SWIGTYPE_p_ogdf__GreedyCycleRemoval swig_types[53]
#define SWIGTYPE_p_ogdf__GridSifting swig_types[54]
#define SWIGTYPE_p_ogdf__HierarchyClusterLayoutModule swig_types[55]
#define SWIGTYPE_p_ogdf__HierarchyLayoutModule swig_types[56]
#define SWIGTYPE_p_ogdf__IndependentSetMerger swig_types[57]
#define SWIGTYPE_p_ogdf__InitialPlacer swig_types[58]
#define SWIGTYPE_p_ogdf__LayerBasedUPRLayout swig_types[59]
#define SWIGTYPE_p_ogdf__LayerByLayerSweep swig_types[60]
#define SWIGTYPE_p_ogdf__LayeredCrossMinModule swig_types[61]
#define SWIGTYPE_p_ogdf__LayoutModule swig_types[62]
#define SWIGTYPE_p_ogdf__LayoutPlanRepModule swig_types[63]
#define SWIGTYPE_p_ogdf__ListIteratorT_int_t swig_types[64]
#define SWIGTYPE_p_ogdf__ListT_edge_t swig_types[65]
#define SWIGTYPE_p_ogdf__ListT_int_t swig_types[66]
#define SWIGTYPE_p_ogdf__ListT_node_t swig_types[67]
#define SWIGTYPE_p_ogdf__ListT_ogdf__AdjElement_p_t swig_types[68]
#define SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t swig_types[69]
#define SWIGTYPE_p_ogdf__ListT_ogdf__ListT_edge_t_p_t swig_types[70]
#define SWIGTYPE_p_ogdf__ListT_ogdf__ListT_node_t_p_t swig_types[71]
#define SWIGTYPE_p_ogdf__ListT_ogdf__NodeElement_p_t swig_types[72]
#define SWIGTYPE_p_ogdf__LocalBiconnectedMerger swig_types[73]
#define SWIGTYPE_p_ogdf__LongestPathRanking swig_types[74]
#define SWIGTYPE_p_ogdf__MatchingMerger swig_types[75]
#define SWIGTYPE_p_ogdf__MaximalPlanarSubgraphSimple swig_types[76]
#define SWIGTYPE_p_ogdf__MedianPlacer swig_types[77]
#define SWIGTYPE_p_ogdf__MultiEdgeApproxInserter swig_types[78]
#define SWIGTYPE_p_ogdf__MultilevelBuilder swig_types[79]
#define SWIGTYPE_p_ogdf__NodeArrayT_bool_t swig_types[80]
#define SWIGTYPE_p_ogdf__NodeArrayT_double_t swig_types[81]
#define SWIGTYPE_p_ogdf__NodeArrayT_float_t swig_types[82]
#define SWIGTYPE_p_ogdf__NodeArrayT_int_t swig_types[83]
#define SWIGTYPE_p_ogdf__NodeArrayT_long_t swig_types[84]
#define SWIGTYPE_p_ogdf__NodeElement swig_types[85]
#define SWIGTYPE_p_ogdf__OptimalHierarchyLayout swig_types[86]
#define SWIGTYPE_p_ogdf__OptimalRanking swig_types[87]
#define SWIGTYPE_p_ogdf__OrthoLayout swig_types[88]
#define SWIGTYPE_p_ogdf__PlanarSubgraphModule swig_types[89]
#define SWIGTYPE_p_ogdf__PlanarizationLayout swig_types[90]
#define SWIGTYPE_p_ogdf__RadialTreeLayout swig_types[91]
#define SWIGTYPE_p_ogdf__RandomMerger swig_types[92]
#define SWIGTYPE_p_ogdf__RandomPlacer swig_types[93]
#define SWIGTYPE_p_ogdf__RankingModule swig_types[94]
#define SWIGTYPE_p_ogdf__SimpleEmbedder swig_types[95]
#define SWIGTYPE_p_ogdf__SolarMerger swig_types[96]
#define SWIGTYPE_p_ogdf__SolarPlacer swig_types[97]
#define SWIGTYPE_p_ogdf__Stroke swig_types[98]
#define SWIGTYPE_p_ogdf__SubgraphPlanarizer swig_types[99]
#define SWIGTYPE_p_ogdf__SugiyamaLayout swig_types[100]
#define SWIGTYPE_p_ogdf__TileToRowsCCPacker swig_types[101]
#define SWIGTYPE_p_ogdf__TreeLayout swig_types[102]
#define SWIGTYPE_p_ogdf__TutteLayout swig_types[103]
#define SWIGTYPE_p_ogdf__UPRLayoutModule swig_types[104]
#define SWIGTYPE_p_ogdf__UpwardPlanarizationLayout swig_types[105]
#define SWIGTYPE_p_ogdf__VariableEmbeddingInserter swig_types[106]
#define SWIGTYPE_p_ogdf__VariableEmbeddingInserterDyn swig_types[107]
#define SWIGTYPE_p_ogdf__VisibilityLayout swig_types[108]
#define SWIGTYPE_p_ogdf__ZeroPlacer swig_types[109]
#define SWIGTYPE_p_ostream swig_types[110]
#define SWIGTYPE_p_short swig_types[111]
#define SWIGTYPE_p_signed_char swig_types[112]
#define SWIGTYPE_p_string swig_types[113]
#define SWIGTYPE_p_unsigned_char swig_types[114]
#define SWIGTYPE_p_unsigned_int swig_types[115]
#define SWIGTYPE_p_unsigned_long_long swig_types[116]
#define SWIGTYPE_p_unsigned_short swig_types[117]
static swig_type_info *swig_types[119];
static swig_module_info swig_module = {swig_types, 118, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(ogdf)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(ogdf)
ZEND_DECLARE_MODULE_GLOBALS(ogdf)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(ogdf_globals_id, zend_ogdf_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(ogdf_globals_id, zend_ogdf_globals *, error_code )
#else
#define SWIG_ErrorMsg() (ogdf_globals.error_msg)
#define SWIG_ErrorCode() (ogdf_globals.error_code)
#endif

#ifdef __GNUC__
static void SWIG_FAIL(TSRMLS_D) __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL(TSRMLS_D) {
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void ogdf_init_globals(zend_ogdf_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void ogdf_destroy_globals(zend_ogdf_globals * globals) { (void)globals; }

static void SWIG_ResetError(TSRMLS_D) {
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_ogdf_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_ogdf_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "ogdf"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_ogdf.h"
#ifdef __cplusplus
}
#endif


#include <stdint.h>		// Use the C99 official header


#include "zend_exceptions.h"
#define SWIG_exception(code, msg) zend_throw_exception(NULL, (char*)msg, code TSRMLS_CC)


#include <stdexcept>


#include <string>


#include <ogdf/basic/List.h>

SWIGINTERN int ogdf_ListIterator_Sl_int_Sg__get_val(ogdf::ListIterator< int > *self){
	return **self;
      }
SWIGINTERN void ogdf_ListIterator_Sl_int_Sg__set_val(ogdf::ListIterator< int > *self,int val){
	(**self) = val;
      }
SWIGINTERN void ogdf_ListIterator_Sl_int_Sg__inc(ogdf::ListIterator< int > *self){
	(*self)++;
      }
SWIGINTERN void ogdf_ListIterator_Sl_int_Sg__dec(ogdf::ListIterator< int > *self){
	(*self)--;
      }
SWIGINTERN bool ogdf_ListIterator_Sl_int_Sg__eq(ogdf::ListIterator< int > *self,ogdf::ListIterator< int > const &it){
	return (*self) == it;
      }

#include <ogdf/basic/Graph.h>
#include <ogdf/basic/Graph_d.h>


#include <ogdf/basic/Graph.h>
#include <ogdf/basic/Graph_d.h>


#include <ogdf/basic/NodeArray.h>
#include <ogdf/basic/EdgeArray.h>
#include <ogdf/basic/AdjEntryArray.h>

SWIGINTERN int ogdf_NodeArray_Sl_int_Sg__get_val(ogdf::NodeArray< int > *self,ogdf::NodeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_NodeArray_Sl_int_Sg__set_val(ogdf::NodeArray< int > *self,ogdf::NodeElement *n,int const &d){
	(*self)[n] = d;
      }
SWIGINTERN long ogdf_NodeArray_Sl_long_Sg__get_val(ogdf::NodeArray< long > *self,ogdf::NodeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_NodeArray_Sl_long_Sg__set_val(ogdf::NodeArray< long > *self,ogdf::NodeElement *n,long const &d){
	(*self)[n] = d;
      }
SWIGINTERN float ogdf_NodeArray_Sl_float_Sg__get_val(ogdf::NodeArray< float > *self,ogdf::NodeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_NodeArray_Sl_float_Sg__set_val(ogdf::NodeArray< float > *self,ogdf::NodeElement *n,float const &d){
	(*self)[n] = d;
      }
SWIGINTERN double ogdf_NodeArray_Sl_double_Sg__get_val(ogdf::NodeArray< double > *self,ogdf::NodeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_NodeArray_Sl_double_Sg__set_val(ogdf::NodeArray< double > *self,ogdf::NodeElement *n,double const &d){
	(*self)[n] = d;
      }
SWIGINTERN int ogdf_EdgeArray_Sl_int_Sg__get_val(ogdf::EdgeArray< int > *self,ogdf::EdgeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_EdgeArray_Sl_int_Sg__set_val(ogdf::EdgeArray< int > *self,ogdf::EdgeElement *n,int const &d){
	(*self)[n] = d;
      }
SWIGINTERN long ogdf_EdgeArray_Sl_long_Sg__get_val(ogdf::EdgeArray< long > *self,ogdf::EdgeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_EdgeArray_Sl_long_Sg__set_val(ogdf::EdgeArray< long > *self,ogdf::EdgeElement *n,long const &d){
	(*self)[n] = d;
      }
SWIGINTERN float ogdf_EdgeArray_Sl_float_Sg__get_val(ogdf::EdgeArray< float > *self,ogdf::EdgeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_EdgeArray_Sl_float_Sg__set_val(ogdf::EdgeArray< float > *self,ogdf::EdgeElement *n,float const &d){
	(*self)[n] = d;
      }
SWIGINTERN double ogdf_EdgeArray_Sl_double_Sg__get_val(ogdf::EdgeArray< double > *self,ogdf::EdgeElement *n){
	return (*self)[n];
      }
SWIGINTERN void ogdf_EdgeArray_Sl_double_Sg__set_val(ogdf::EdgeArray< double > *self,ogdf::EdgeElement *n,double const &d){
	(*self)[n] = d;
      }

#include <ogdf/module/LayeredCrossMinModule.h>
#include <ogdf/planarity/SubgraphPlanarizer.h>
#include <ogdf/layered/GridSifting.h>
#include <ogdf/module/CrossingMinimizationModule.h>
#include <ogdf/layered/OptimalHierarchyLayout.h>
#include <ogdf/energybased/multilevelmixer/MultilevelBuilder.h>
#include <ogdf/energybased/multilevelmixer/EdgeCoverMerger.h>
#include <ogdf/energybased/multilevelmixer/IndependentSetMerger.h>
#include <ogdf/energybased/multilevelmixer/LocalBiconnectedMerger.h>
#include <ogdf/energybased/multilevelmixer/MatchingMerger.h>
#include <ogdf/energybased/multilevelmixer/SolarMerger.h>
#include <ogdf/energybased/multilevelmixer/RandomMerger.h>
#include <ogdf/energybased/multilevelmixer/BarycenterPlacer.h>
#include <ogdf/energybased/multilevelmixer/CirclePlacer.h>
#include <ogdf/energybased/multilevelmixer/InitialPlacer.h>
#include <ogdf/energybased/multilevelmixer/MedianPlacer.h>
#include <ogdf/energybased/multilevelmixer/RandomPlacer.h>
#include <ogdf/energybased/multilevelmixer/SolarPlacer.h>
#include <ogdf/energybased/multilevelmixer/ZeroPlacer.h>
#include <ogdf/layered/OptimalRanking.h>
#include <ogdf/layered/CoffmanGrahamRanking.h>
#include <ogdf/layered/LongestPathRanking.h>
#include <ogdf/planarity/FastPlanarSubgraph.h>
#include <ogdf/planarity/FixedEmbeddingInserter.h>
#include <ogdf/planarity/VariableEmbeddingInserter.h>
#include <ogdf/planarity/VariableEmbeddingInserterDyn.h>
#include <ogdf/planarity/MultiEdgeApproxInserter.h>
#include <ogdf/misclayout/BalloonLayout.h>
#include <ogdf/misclayout/CircularLayout.h>
#include <ogdf/upward/DominanceLayout.h>
#include <ogdf/planarity/EmbedderMaxFace.h>
#include <ogdf/planarity/EmbedderMaxFaceLayers.h>
#include <ogdf/planarity/EmbedderMinDepth.h>
#include <ogdf/planarity/EmbedderMinDepthMaxFace.h>
#include <ogdf/planarity/EmbedderMinDepthMaxFaceLayers.h>
#include <ogdf/planarity/EmbedderMinDepthPiTa.h>
#include <ogdf/module/EmbedderModule.h>
#include <ogdf/planarity/EmbedderOptimalFlexDraw.h>
#include <ogdf/module/LayoutPlanRepModule.h>
#include <ogdf/planarity/MaximalPlanarSubgraphSimple.h>
//#include <ogdf/planarity/MaximumPlanarSubgraph.h>
#include <ogdf/orthogonal/OrthoLayout.h>
#include <ogdf/cluster/ClusterOrthoLayout.h>
#include <ogdf/cluster/ClusterPlanarizationLayout.h>
#include <ogdf/upward/UpwardPlanarizationLayout.h>
#include <ogdf/planarity/PlanarizationLayout.h>
#include <ogdf/tree/RadialTreeLayout.h>
#include <ogdf/planarity/SimpleEmbedder.h>
#include <ogdf/packing/TileToRowsCCPacker.h>
#include <ogdf/tree/RadialTreeLayout.h>
#include <ogdf/tree/TreeLayout.h>
#include <ogdf/module/UPRLayoutModule.h>
#include <ogdf/upward/UpwardPlanarizationLayout.h>
#include <ogdf/upward/VisibilityLayout.h>


#include <ogdf/basic/graphics.h>
using namespace ogdf;


#include <ogdf/basic/GraphAttributes.h>
#include <ogdf/tree/TreeLayout.h>
#include <ogdf/tree/RadialTreeLayout.h>
#include <ogdf/misclayout/CircularLayout.h>
#include <ogdf/misclayout/BalloonLayout.h>
#include <ogdf/planarity/PlanarizationLayout.h>
#include <ogdf/energybased/TutteLayout.h>
#include <ogdf/energybased/GEMLayout.h>
#include <ogdf/energybased/FMMMLayout.h>
#include <ogdf/layered/SugiyamaLayout.h>
#include <ogdf/layered/FastHierarchyLayout.h>
#include <ogdf/layered/FastSimpleHierarchyLayout.h>
#include <ogdf/upward/UpwardPlanarizationLayout.h>
#include <ogdf/upward/DominanceLayout.h>
#include <ogdf/upward/VisibilityLayout.h>
#include <ogdf/energybased/DavidsonHarelLayout.h>
#include <ogdf/module/AcyclicSubgraphModule.h>
#include <ogdf/layered/DfsAcyclicSubgraph.h>
#include <ogdf/layered/GreedyCycleRemoval.h>
#include <string>

SWIGINTERN double ogdf_GraphAttributes_x(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->x(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setX(ogdf::GraphAttributes *self,ogdf::NodeElement *v,double val){
    self->x(v) = val;
  }
SWIGINTERN double ogdf_GraphAttributes_y(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->y(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setY(ogdf::GraphAttributes *self,ogdf::NodeElement *v,double val){
    self->y(v) = val;
  }
SWIGINTERN double ogdf_GraphAttributes_z(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->z(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setZ(ogdf::GraphAttributes *self,ogdf::NodeElement *v,double val){
    self->z(v) = val;
  }
SWIGINTERN double ogdf_GraphAttributes_height(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->height(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setHeight(ogdf::GraphAttributes *self,ogdf::NodeElement *v,double val){
    self->height(v) = val;
  }
SWIGINTERN double ogdf_GraphAttributes_width(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->width(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setWidth(ogdf::GraphAttributes *self,ogdf::NodeElement *v,double val){
    self->width(v) = val;
  }
SWIGINTERN ogdf::Shape ogdf_GraphAttributes_shape(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->shape(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setShape(ogdf::GraphAttributes *self,ogdf::NodeElement *v,ogdf::Shape val){
    self->shape(v) = val;
  }
SWIGINTERN ogdf::Color ogdf_GraphAttributes_strokeColor__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->strokeColor(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setStrokeColor__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v,ogdf::Color val){
    self->strokeColor(v) = val;
  }
SWIGINTERN float ogdf_GraphAttributes_strokeWidth__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->strokeWidth(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setStrokeWidth__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v,float val){
    self->strokeWidth(v) = val;
  }
SWIGINTERN ogdf::Color ogdf_GraphAttributes_fillColor(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->fillColor(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setFillColor(ogdf::GraphAttributes *self,ogdf::NodeElement *v,ogdf::Color val){
    self->fillColor(v) = val;
  }
SWIGINTERN ogdf::Color ogdf_GraphAttributes_fillBgColor(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->fillBgColor(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setFillBgColor(ogdf::GraphAttributes *self,ogdf::NodeElement *v,ogdf::Color val){
    self->fillBgColor(v) = val;
  }
SWIGINTERN std::string ogdf_GraphAttributes_label__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->label(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setLabel__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v,std::string val){
    self->label(v) = val;
  }
SWIGINTERN std::string ogdf_GraphAttributes_templateNode(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->templateNode(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setTemplateNode(ogdf::GraphAttributes *self,ogdf::NodeElement *v,std::string val){
    self->templateNode(v) = val;
  }
SWIGINTERN int ogdf_GraphAttributes_weight(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->weight(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setWeight(ogdf::GraphAttributes *self,ogdf::NodeElement *v,int val){
    self->weight(v) = val;
  }
SWIGINTERN ogdf::Graph::NodeType ogdf_GraphAttributes__type__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->type(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setType__SWIG_0(ogdf::GraphAttributes *self,ogdf::NodeElement *v,ogdf::Graph::NodeType val){
    self->type(v) = val;
  }
SWIGINTERN int ogdf_GraphAttributes_idNode(ogdf::GraphAttributes *self,ogdf::NodeElement *v){
    return self->idNode(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setIdNode(ogdf::GraphAttributes *self,ogdf::NodeElement *v,int val){
    self->idNode(v) = val;
  }
SWIGINTERN DPolyline ogdf_GraphAttributes_bends(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->bends(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setBends(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,DPolyline val){
    self->bends(v) = val;
  }
SWIGINTERN ogdf::EdgeArrow ogdf_GraphAttributes_arrowType(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->arrowType(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setArrowType(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,ogdf::EdgeArrow val){
    self->arrowType(v) = val;
  }
SWIGINTERN ogdf::Color ogdf_GraphAttributes_strokeColor__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->strokeColor(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setStrokeColor__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,ogdf::Color val){
    self->strokeColor(v) = val;
  }
SWIGINTERN float ogdf_GraphAttributes_strokeWidth__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->strokeWidth(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setStrokeWidth__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,float val){
    self->strokeWidth(v) = val;
  }
SWIGINTERN std::string ogdf_GraphAttributes_label__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->label(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setLabel__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,std::string val){
    self->label(v) = val;
  }
SWIGINTERN int ogdf_GraphAttributes_intWeight(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->intWeight(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setIntWeight(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,int val){
    self->intWeight(v) = val;
  }
SWIGINTERN double ogdf_GraphAttributes_doubleWeight(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->doubleWeight(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setDoubleWeight(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,double val){
    self->doubleWeight(v) = val;
  }
SWIGINTERN ogdf::Graph::EdgeType ogdf_GraphAttributes__type__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->type(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setType__SWIG_1(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,ogdf::Graph::EdgeType val){
    self->type(v) = val;
  }
SWIGINTERN uint32_t ogdf_GraphAttributes_subGraphBits(ogdf::GraphAttributes *self,ogdf::EdgeElement *v){
    return self->subGraphBits(v);
  }
SWIGINTERN void ogdf_GraphAttributes_setSubGraphBits(ogdf::GraphAttributes *self,ogdf::EdgeElement *v,uint32_t val){
    self->subGraphBits(v) = val;
  }

#include <ogdf/fileformats/GraphIO.h>


typedef ogdf::GraphIO::SVGSettings SVGSettings;


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ogdf__DavidsonHarelLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::DavidsonHarelLayout *) x));
}
static void *_p_ogdf__CircularLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::CircularLayout *) x));
}
static void *_p_ogdf__BalloonLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::BalloonLayout *) x));
}
static void *_p_ogdf__PlanarizationLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::PlanarizationLayout *) x));
}
static void *_p_ogdf__UpwardPlanarizationLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::UpwardPlanarizationLayout *) x));
}
static void *_p_ogdf__GEMLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::GEMLayout *) x));
}
static void *_p_ogdf__FMMMLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::FMMMLayout *) x));
}
static void *_p_ogdf__TutteLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::TutteLayout *) x));
}
static void *_p_ogdf__TreeLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::TreeLayout *) x));
}
static void *_p_ogdf__RadialTreeLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::RadialTreeLayout *) x));
}
static void *_p_ogdf__DominanceLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::DominanceLayout *) x));
}
static void *_p_ogdf__VisibilityLayoutTo_p_ogdf__LayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutModule *)  ((ogdf::VisibilityLayout *) x));
}
static void *_p_ogdf__LayerBasedUPRLayoutTo_p_ogdf__UPRLayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::UPRLayoutModule *)  ((ogdf::LayerBasedUPRLayout *) x));
}
static void *_p_ogdf__OrthoLayoutTo_p_ogdf__LayoutPlanRepModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayoutPlanRepModule *)  ((ogdf::OrthoLayout *) x));
}
static void *_p_ogdf__SimpleEmbedderTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::SimpleEmbedder *) x));
}
static void *_p_ogdf__EmbedderMinDepthTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::EmbedderMinDepth *) x));
}
static void *_p_ogdf__EmbedderMaxFaceTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::EmbedderMaxFace *) x));
}
static void *_p_ogdf__EmbedderMinDepthMaxFaceTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::EmbedderMinDepthMaxFace *) x));
}
static void *_p_ogdf__EmbedderMinDepthPiTaTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::EmbedderMinDepthPiTa *) x));
}
static void *_p_ogdf__EmbedderMaxFaceLayersTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::EmbedderMaxFaceLayers *) x));
}
static void *_p_ogdf__EmbedderMinDepthMaxFaceLayersTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::EmbedderMinDepthMaxFaceLayers *) x));
}
static void *_p_ogdf__EmbedderOptimalFlexDrawTo_p_ogdf__EmbedderModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EmbedderModule *)  ((ogdf::EmbedderOptimalFlexDraw *) x));
}
static void *_p_ogdf__VariableEmbeddingInserterDynTo_p_ogdf__EdgeInsertionModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EdgeInsertionModule *)  ((ogdf::VariableEmbeddingInserterDyn *) x));
}
static void *_p_ogdf__FixedEmbeddingInserterTo_p_ogdf__EdgeInsertionModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EdgeInsertionModule *)  ((ogdf::FixedEmbeddingInserter *) x));
}
static void *_p_ogdf__VariableEmbeddingInserterTo_p_ogdf__EdgeInsertionModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EdgeInsertionModule *)  ((ogdf::VariableEmbeddingInserter *) x));
}
static void *_p_ogdf__MultiEdgeApproxInserterTo_p_ogdf__EdgeInsertionModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::EdgeInsertionModule *)  ((ogdf::MultiEdgeApproxInserter *) x));
}
static void *_p_ogdf__MaximalPlanarSubgraphSimpleTo_p_ogdf__PlanarSubgraphModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::PlanarSubgraphModule *)  ((ogdf::MaximalPlanarSubgraphSimple *) x));
}
static void *_p_ogdf__FastPlanarSubgraphTo_p_ogdf__PlanarSubgraphModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::PlanarSubgraphModule *)  ((ogdf::FastPlanarSubgraph *) x));
}
static void *_p_ogdf__SubgraphPlanarizerTo_p_ogdf__CrossingMinimizationModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::CrossingMinimizationModule *)  ((ogdf::SubgraphPlanarizer *) x));
}
static void *_p_ogdf__GlobalSiftingTo_p_ogdf__LayeredCrossMinModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayeredCrossMinModule *)  ((ogdf::GlobalSifting *) x));
}
static void *_p_ogdf__GridSiftingTo_p_ogdf__LayeredCrossMinModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayeredCrossMinModule *)  ((ogdf::GridSifting *) x));
}
static void *_p_ogdf__LayerByLayerSweepTo_p_ogdf__LayeredCrossMinModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::LayeredCrossMinModule *)  ((ogdf::LayerByLayerSweep *) x));
}
static void *_p_ogdf__DfsAcyclicSubgraphTo_p_ogdf__AcyclicSubgraphModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::AcyclicSubgraphModule *)  ((ogdf::DfsAcyclicSubgraph *) x));
}
static void *_p_ogdf__GreedyCycleRemovalTo_p_ogdf__AcyclicSubgraphModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::AcyclicSubgraphModule *)  ((ogdf::GreedyCycleRemoval *) x));
}
static void *_p_ogdf__FastHierarchyLayoutTo_p_ogdf__HierarchyLayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::HierarchyLayoutModule *)  ((ogdf::FastHierarchyLayout *) x));
}
static void *_p_ogdf__FastSimpleHierarchyLayoutTo_p_ogdf__HierarchyLayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::HierarchyLayoutModule *)  ((ogdf::FastSimpleHierarchyLayout *) x));
}
static void *_p_ogdf__OptimalHierarchyLayoutTo_p_ogdf__HierarchyLayoutModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::HierarchyLayoutModule *)  ((ogdf::OptimalHierarchyLayout *) x));
}
static void *_p_ogdf__SolarPlacerTo_p_ogdf__InitialPlacer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::InitialPlacer *)  ((ogdf::SolarPlacer *) x));
}
static void *_p_ogdf__BarycenterPlacerTo_p_ogdf__InitialPlacer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::InitialPlacer *)  ((ogdf::BarycenterPlacer *) x));
}
static void *_p_ogdf__MedianPlacerTo_p_ogdf__InitialPlacer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::InitialPlacer *)  ((ogdf::MedianPlacer *) x));
}
static void *_p_ogdf__RandomPlacerTo_p_ogdf__InitialPlacer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::InitialPlacer *)  ((ogdf::RandomPlacer *) x));
}
static void *_p_ogdf__CirclePlacerTo_p_ogdf__InitialPlacer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::InitialPlacer *)  ((ogdf::CirclePlacer *) x));
}
static void *_p_ogdf__ZeroPlacerTo_p_ogdf__InitialPlacer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::InitialPlacer *)  ((ogdf::ZeroPlacer *) x));
}
static void *_p_ogdf__EdgeCoverMergerTo_p_ogdf__MultilevelBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::MultilevelBuilder *)  ((ogdf::EdgeCoverMerger *) x));
}
static void *_p_ogdf__IndependentSetMergerTo_p_ogdf__MultilevelBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::MultilevelBuilder *)  ((ogdf::IndependentSetMerger *) x));
}
static void *_p_ogdf__LocalBiconnectedMergerTo_p_ogdf__MultilevelBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::MultilevelBuilder *)  ((ogdf::LocalBiconnectedMerger *) x));
}
static void *_p_ogdf__SolarMergerTo_p_ogdf__MultilevelBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::MultilevelBuilder *)  ((ogdf::SolarMerger *) x));
}
static void *_p_ogdf__MatchingMergerTo_p_ogdf__MultilevelBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::MultilevelBuilder *)  ((ogdf::MatchingMerger *) x));
}
static void *_p_ogdf__RandomMergerTo_p_ogdf__MultilevelBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::MultilevelBuilder *)  ((ogdf::RandomMerger *) x));
}
static void *_p_ogdf__TileToRowsCCPackerTo_p_ogdf__CCLayoutPackModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::CCLayoutPackModule *)  ((ogdf::TileToRowsCCPacker *) x));
}
static void *_p_ogdf__OptimalRankingTo_p_ogdf__RankingModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::RankingModule *)  ((ogdf::OptimalRanking *) x));
}
static void *_p_ogdf__LongestPathRankingTo_p_ogdf__RankingModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::RankingModule *)  ((ogdf::LongestPathRanking *) x));
}
static void *_p_ogdf__CoffmanGrahamRankingTo_p_ogdf__RankingModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ogdf::RankingModule *)  ((ogdf::CoffmanGrahamRanking *) x));
}
static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AcyclicSubgraphModule = {"_p_AcyclicSubgraphModule", "AcyclicSubgraphModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ClusterGraph = {"_p_ClusterGraph", "ClusterGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ClusterGraphAttributes = {"_p_ClusterGraphAttributes", "ClusterGraphAttributes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DPolyline = {"_p_DPolyline", "DPolyline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DRect = {"_p_DRect", "DRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EdgeWeightedGraphT_double_t = {"_p_EdgeWeightedGraphT_double_t", "EdgeWeightedGraph< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EdgeWeightedGraphT_int_t = {"_p_EdgeWeightedGraphT_int_t", "EdgeWeightedGraph< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphConstraints = {"_p_GraphConstraints", "GraphConstraints *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GridLayout = {"_p_GridLayout", "GridLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Orientation = {"_p_Orientation", "Orientation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SVGSettings = {"_p_SVGSettings", "SVGSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_istream = {"_p_istream", "istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__AcyclicSubgraphModule = {"_p_ogdf__AcyclicSubgraphModule", "ogdf::AcyclicSubgraphModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__DfsAcyclicSubgraph = {"_p_ogdf__DfsAcyclicSubgraph", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__GreedyCycleRemoval = {"_p_ogdf__GreedyCycleRemoval", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__AdjElement = {"_p_ogdf__AdjElement", "ogdf::AdjElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__BalloonLayout = {"_p_ogdf__BalloonLayout", "ogdf::BalloonLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__BarycenterPlacer = {"_p_ogdf__BarycenterPlacer", "ogdf::BarycenterPlacer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__CCLayoutPackModule = {"_p_ogdf__CCLayoutPackModule", "ogdf::CCLayoutPackModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__TileToRowsCCPacker = {"_p_ogdf__TileToRowsCCPacker", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__CirclePlacer = {"_p_ogdf__CirclePlacer", "ogdf::CirclePlacer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__CircularLayout = {"_p_ogdf__CircularLayout", "ogdf::CircularLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__CoffmanGrahamRanking = {"_p_ogdf__CoffmanGrahamRanking", "ogdf::CoffmanGrahamRanking *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__Color = {"_p_ogdf__Color", "ogdf::Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__CrossingMinimizationModule = {"_p_ogdf__CrossingMinimizationModule", "ogdf::CrossingMinimizationModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__SubgraphPlanarizer = {"_p_ogdf__SubgraphPlanarizer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__DavidsonHarelLayout = {"_p_ogdf__DavidsonHarelLayout", "ogdf::DavidsonHarelLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__DominanceLayout = {"_p_ogdf__DominanceLayout", "ogdf::DominanceLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EdgeArrayT_double_t = {"_p_ogdf__EdgeArrayT_double_t", "ogdf::EdgeArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EdgeArrayT_float_t = {"_p_ogdf__EdgeArrayT_float_t", "ogdf::EdgeArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EdgeArrayT_int_t = {"_p_ogdf__EdgeArrayT_int_t", "ogdf::EdgeArray< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EdgeArrayT_long_t = {"_p_ogdf__EdgeArrayT_long_t", "ogdf::EdgeArray< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EdgeCoverMerger = {"_p_ogdf__EdgeCoverMerger", "ogdf::EdgeCoverMerger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EdgeElement = {"_p_ogdf__EdgeElement", "ogdf::EdgeElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EdgeInsertionModule = {"_p_ogdf__EdgeInsertionModule", "ogdf::EdgeInsertionModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderModule = {"_p_ogdf__EmbedderModule", "ogdf::EmbedderModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__SimpleEmbedder = {"_p_ogdf__SimpleEmbedder", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderMinDepth = {"_p_ogdf__EmbedderMinDepth", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderMaxFace = {"_p_ogdf__EmbedderMaxFace", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderMinDepthMaxFace = {"_p_ogdf__EmbedderMinDepthMaxFace", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderMinDepthPiTa = {"_p_ogdf__EmbedderMinDepthPiTa", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderMaxFaceLayers = {"_p_ogdf__EmbedderMaxFaceLayers", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderMinDepthMaxFaceLayers = {"_p_ogdf__EmbedderMinDepthMaxFaceLayers", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__EmbedderOptimalFlexDraw = {"_p_ogdf__EmbedderOptimalFlexDraw", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__FMMMLayout = {"_p_ogdf__FMMMLayout", "ogdf::FMMMLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__FastHierarchyLayout = {"_p_ogdf__FastHierarchyLayout", "ogdf::FastHierarchyLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__FastPlanarSubgraph = {"_p_ogdf__FastPlanarSubgraph", "ogdf::FastPlanarSubgraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__FastSimpleHierarchyLayout = {"_p_ogdf__FastSimpleHierarchyLayout", "ogdf::FastSimpleHierarchyLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__Fill = {"_p_ogdf__Fill", "ogdf::Fill *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__FixedEmbeddingInserter = {"_p_ogdf__FixedEmbeddingInserter", "ogdf::FixedEmbeddingInserter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__GEMLayout = {"_p_ogdf__GEMLayout", "ogdf::GEMLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__GlobalSifting = {"_p_ogdf__GlobalSifting", "ogdf::GlobalSifting *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__Graph = {"_p_ogdf__Graph", "ogdf::Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__GraphAttributes = {"_p_ogdf__GraphAttributes", "ogdf::GraphAttributes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__GridSifting = {"_p_ogdf__GridSifting", "ogdf::GridSifting *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__HierarchyClusterLayoutModule = {"_p_ogdf__HierarchyClusterLayoutModule", "ogdf::HierarchyClusterLayoutModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__HierarchyLayoutModule = {"_p_ogdf__HierarchyLayoutModule", "ogdf::HierarchyLayoutModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__IndependentSetMerger = {"_p_ogdf__IndependentSetMerger", "ogdf::IndependentSetMerger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__InitialPlacer = {"_p_ogdf__InitialPlacer", "ogdf::InitialPlacer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__SolarPlacer = {"_p_ogdf__SolarPlacer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__MedianPlacer = {"_p_ogdf__MedianPlacer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__LayeredCrossMinModule = {"_p_ogdf__LayeredCrossMinModule", "ogdf::LayeredCrossMinModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__LayerByLayerSweep = {"_p_ogdf__LayerByLayerSweep", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__LayoutModule = {"_p_ogdf__LayoutModule", "ogdf::LayoutModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__LayoutPlanRepModule = {"_p_ogdf__LayoutPlanRepModule", "ogdf::LayoutPlanRepModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListIteratorT_int_t = {"_p_ogdf__ListIteratorT_int_t", "ogdf::ListIterator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_edge_t = {"_p_ogdf__ListT_edge_t", "ogdf::List< edge > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_int_t = {"_p_ogdf__ListT_int_t", "ogdf::List< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_node_t = {"_p_ogdf__ListT_node_t", "ogdf::List< node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_ogdf__AdjElement_p_t = {"_p_ogdf__ListT_ogdf__AdjElement_p_t", "ogdf::List< ogdf::AdjElement * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_ogdf__EdgeElement_p_t = {"_p_ogdf__ListT_ogdf__EdgeElement_p_t", "ogdf::List< ogdf::EdgeElement * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_ogdf__ListT_edge_t_p_t = {"_p_ogdf__ListT_ogdf__ListT_edge_t_p_t", "ogdf::List< ogdf::List< edge > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_ogdf__ListT_node_t_p_t = {"_p_ogdf__ListT_ogdf__ListT_node_t_p_t", "ogdf::List< ogdf::List< node > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ListT_ogdf__NodeElement_p_t = {"_p_ogdf__ListT_ogdf__NodeElement_p_t", "ogdf::List< ogdf::NodeElement * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__LocalBiconnectedMerger = {"_p_ogdf__LocalBiconnectedMerger", "ogdf::LocalBiconnectedMerger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__LongestPathRanking = {"_p_ogdf__LongestPathRanking", "ogdf::LongestPathRanking *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__MatchingMerger = {"_p_ogdf__MatchingMerger", "ogdf::MatchingMerger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__MultiEdgeApproxInserter = {"_p_ogdf__MultiEdgeApproxInserter", "ogdf::MultiEdgeApproxInserter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__MultilevelBuilder = {"_p_ogdf__MultilevelBuilder", "ogdf::MultilevelBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__NodeArrayT_bool_t = {"_p_ogdf__NodeArrayT_bool_t", "ogdf::NodeArray< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__NodeArrayT_double_t = {"_p_ogdf__NodeArrayT_double_t", "ogdf::NodeArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__NodeArrayT_float_t = {"_p_ogdf__NodeArrayT_float_t", "ogdf::NodeArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__NodeArrayT_int_t = {"_p_ogdf__NodeArrayT_int_t", "ogdf::NodeArray< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__NodeArrayT_long_t = {"_p_ogdf__NodeArrayT_long_t", "ogdf::NodeArray< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__NodeElement = {"_p_ogdf__NodeElement", "ogdf::NodeElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__OptimalHierarchyLayout = {"_p_ogdf__OptimalHierarchyLayout", "ogdf::OptimalHierarchyLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__OptimalRanking = {"_p_ogdf__OptimalRanking", "ogdf::OptimalRanking *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__OrthoLayout = {"_p_ogdf__OrthoLayout", "ogdf::OrthoLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__PlanarSubgraphModule = {"_p_ogdf__PlanarSubgraphModule", "ogdf::PlanarSubgraphModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__MaximalPlanarSubgraphSimple = {"_p_ogdf__MaximalPlanarSubgraphSimple", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__PlanarizationLayout = {"_p_ogdf__PlanarizationLayout", "ogdf::PlanarizationLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__RadialTreeLayout = {"_p_ogdf__RadialTreeLayout", "ogdf::RadialTreeLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__RandomMerger = {"_p_ogdf__RandomMerger", "ogdf::RandomMerger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__RandomPlacer = {"_p_ogdf__RandomPlacer", "ogdf::RandomPlacer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__RankingModule = {"_p_ogdf__RankingModule", "ogdf::RankingModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__SolarMerger = {"_p_ogdf__SolarMerger", "ogdf::SolarMerger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__Stroke = {"_p_ogdf__Stroke", "ogdf::Stroke *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__SugiyamaLayout = {"_p_ogdf__SugiyamaLayout", "ogdf::SugiyamaLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__TreeLayout = {"_p_ogdf__TreeLayout", "ogdf::TreeLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__TutteLayout = {"_p_ogdf__TutteLayout", "ogdf::TutteLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__UPRLayoutModule = {"_p_ogdf__UPRLayoutModule", "ogdf::UPRLayoutModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__LayerBasedUPRLayout = {"_p_ogdf__LayerBasedUPRLayout", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ogdf__UpwardPlanarizationLayout = {"_p_ogdf__UpwardPlanarizationLayout", "ogdf::UpwardPlanarizationLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__VariableEmbeddingInserter = {"_p_ogdf__VariableEmbeddingInserter", "ogdf::VariableEmbeddingInserter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__VariableEmbeddingInserterDyn = {"_p_ogdf__VariableEmbeddingInserterDyn", "ogdf::VariableEmbeddingInserterDyn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__VisibilityLayout = {"_p_ogdf__VisibilityLayout", "ogdf::VisibilityLayout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ogdf__ZeroPlacer = {"_p_ogdf__ZeroPlacer", "ogdf::ZeroPlacer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ostream = {"_p_ostream", "ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__int,
  &_swigt__p_AcyclicSubgraphModule,
  &_swigt__p_ClusterGraph,
  &_swigt__p_ClusterGraphAttributes,
  &_swigt__p_DPolyline,
  &_swigt__p_DRect,
  &_swigt__p_EdgeWeightedGraphT_double_t,
  &_swigt__p_EdgeWeightedGraphT_int_t,
  &_swigt__p_GraphConstraints,
  &_swigt__p_GridLayout,
  &_swigt__p_Orientation,
  &_swigt__p_SVGSettings,
  &_swigt__p_int,
  &_swigt__p_istream,
  &_swigt__p_long_long,
  &_swigt__p_ogdf__AcyclicSubgraphModule,
  &_swigt__p_ogdf__AdjElement,
  &_swigt__p_ogdf__BalloonLayout,
  &_swigt__p_ogdf__BarycenterPlacer,
  &_swigt__p_ogdf__CCLayoutPackModule,
  &_swigt__p_ogdf__CirclePlacer,
  &_swigt__p_ogdf__CircularLayout,
  &_swigt__p_ogdf__CoffmanGrahamRanking,
  &_swigt__p_ogdf__Color,
  &_swigt__p_ogdf__CrossingMinimizationModule,
  &_swigt__p_ogdf__DavidsonHarelLayout,
  &_swigt__p_ogdf__DfsAcyclicSubgraph,
  &_swigt__p_ogdf__DominanceLayout,
  &_swigt__p_ogdf__EdgeArrayT_double_t,
  &_swigt__p_ogdf__EdgeArrayT_float_t,
  &_swigt__p_ogdf__EdgeArrayT_int_t,
  &_swigt__p_ogdf__EdgeArrayT_long_t,
  &_swigt__p_ogdf__EdgeCoverMerger,
  &_swigt__p_ogdf__EdgeElement,
  &_swigt__p_ogdf__EdgeInsertionModule,
  &_swigt__p_ogdf__EmbedderMaxFace,
  &_swigt__p_ogdf__EmbedderMaxFaceLayers,
  &_swigt__p_ogdf__EmbedderMinDepth,
  &_swigt__p_ogdf__EmbedderMinDepthMaxFace,
  &_swigt__p_ogdf__EmbedderMinDepthMaxFaceLayers,
  &_swigt__p_ogdf__EmbedderMinDepthPiTa,
  &_swigt__p_ogdf__EmbedderModule,
  &_swigt__p_ogdf__EmbedderOptimalFlexDraw,
  &_swigt__p_ogdf__FMMMLayout,
  &_swigt__p_ogdf__FastHierarchyLayout,
  &_swigt__p_ogdf__FastPlanarSubgraph,
  &_swigt__p_ogdf__FastSimpleHierarchyLayout,
  &_swigt__p_ogdf__Fill,
  &_swigt__p_ogdf__FixedEmbeddingInserter,
  &_swigt__p_ogdf__GEMLayout,
  &_swigt__p_ogdf__GlobalSifting,
  &_swigt__p_ogdf__Graph,
  &_swigt__p_ogdf__GraphAttributes,
  &_swigt__p_ogdf__GreedyCycleRemoval,
  &_swigt__p_ogdf__GridSifting,
  &_swigt__p_ogdf__HierarchyClusterLayoutModule,
  &_swigt__p_ogdf__HierarchyLayoutModule,
  &_swigt__p_ogdf__IndependentSetMerger,
  &_swigt__p_ogdf__InitialPlacer,
  &_swigt__p_ogdf__LayerBasedUPRLayout,
  &_swigt__p_ogdf__LayerByLayerSweep,
  &_swigt__p_ogdf__LayeredCrossMinModule,
  &_swigt__p_ogdf__LayoutModule,
  &_swigt__p_ogdf__LayoutPlanRepModule,
  &_swigt__p_ogdf__ListIteratorT_int_t,
  &_swigt__p_ogdf__ListT_edge_t,
  &_swigt__p_ogdf__ListT_int_t,
  &_swigt__p_ogdf__ListT_node_t,
  &_swigt__p_ogdf__ListT_ogdf__AdjElement_p_t,
  &_swigt__p_ogdf__ListT_ogdf__EdgeElement_p_t,
  &_swigt__p_ogdf__ListT_ogdf__ListT_edge_t_p_t,
  &_swigt__p_ogdf__ListT_ogdf__ListT_node_t_p_t,
  &_swigt__p_ogdf__ListT_ogdf__NodeElement_p_t,
  &_swigt__p_ogdf__LocalBiconnectedMerger,
  &_swigt__p_ogdf__LongestPathRanking,
  &_swigt__p_ogdf__MatchingMerger,
  &_swigt__p_ogdf__MaximalPlanarSubgraphSimple,
  &_swigt__p_ogdf__MedianPlacer,
  &_swigt__p_ogdf__MultiEdgeApproxInserter,
  &_swigt__p_ogdf__MultilevelBuilder,
  &_swigt__p_ogdf__NodeArrayT_bool_t,
  &_swigt__p_ogdf__NodeArrayT_double_t,
  &_swigt__p_ogdf__NodeArrayT_float_t,
  &_swigt__p_ogdf__NodeArrayT_int_t,
  &_swigt__p_ogdf__NodeArrayT_long_t,
  &_swigt__p_ogdf__NodeElement,
  &_swigt__p_ogdf__OptimalHierarchyLayout,
  &_swigt__p_ogdf__OptimalRanking,
  &_swigt__p_ogdf__OrthoLayout,
  &_swigt__p_ogdf__PlanarSubgraphModule,
  &_swigt__p_ogdf__PlanarizationLayout,
  &_swigt__p_ogdf__RadialTreeLayout,
  &_swigt__p_ogdf__RandomMerger,
  &_swigt__p_ogdf__RandomPlacer,
  &_swigt__p_ogdf__RankingModule,
  &_swigt__p_ogdf__SimpleEmbedder,
  &_swigt__p_ogdf__SolarMerger,
  &_swigt__p_ogdf__SolarPlacer,
  &_swigt__p_ogdf__Stroke,
  &_swigt__p_ogdf__SubgraphPlanarizer,
  &_swigt__p_ogdf__SugiyamaLayout,
  &_swigt__p_ogdf__TileToRowsCCPacker,
  &_swigt__p_ogdf__TreeLayout,
  &_swigt__p_ogdf__TutteLayout,
  &_swigt__p_ogdf__UPRLayoutModule,
  &_swigt__p_ogdf__UpwardPlanarizationLayout,
  &_swigt__p_ogdf__VariableEmbeddingInserter,
  &_swigt__p_ogdf__VariableEmbeddingInserterDyn,
  &_swigt__p_ogdf__VisibilityLayout,
  &_swigt__p_ogdf__ZeroPlacer,
  &_swigt__p_ostream,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_string,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AcyclicSubgraphModule[] = {  {&_swigt__p_AcyclicSubgraphModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClusterGraph[] = {  {&_swigt__p_ClusterGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClusterGraphAttributes[] = {  {&_swigt__p_ClusterGraphAttributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DPolyline[] = {  {&_swigt__p_DPolyline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DRect[] = {  {&_swigt__p_DRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EdgeWeightedGraphT_double_t[] = {  {&_swigt__p_EdgeWeightedGraphT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EdgeWeightedGraphT_int_t[] = {  {&_swigt__p_EdgeWeightedGraphT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphConstraints[] = {  {&_swigt__p_GraphConstraints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GridLayout[] = {  {&_swigt__p_GridLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Orientation[] = {  {&_swigt__p_Orientation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SVGSettings[] = {  {&_swigt__p_SVGSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_istream[] = {  {&_swigt__p_istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__DfsAcyclicSubgraph[] = {{&_swigt__p_ogdf__DfsAcyclicSubgraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__GreedyCycleRemoval[] = {{&_swigt__p_ogdf__GreedyCycleRemoval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__AcyclicSubgraphModule[] = {  {&_swigt__p_ogdf__AcyclicSubgraphModule, 0, 0, 0},  {&_swigt__p_ogdf__DfsAcyclicSubgraph, _p_ogdf__DfsAcyclicSubgraphTo_p_ogdf__AcyclicSubgraphModule, 0, 0},  {&_swigt__p_ogdf__GreedyCycleRemoval, _p_ogdf__GreedyCycleRemovalTo_p_ogdf__AcyclicSubgraphModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__AdjElement[] = {  {&_swigt__p_ogdf__AdjElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__BalloonLayout[] = {  {&_swigt__p_ogdf__BalloonLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__BarycenterPlacer[] = {  {&_swigt__p_ogdf__BarycenterPlacer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__TileToRowsCCPacker[] = {{&_swigt__p_ogdf__TileToRowsCCPacker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__CCLayoutPackModule[] = {  {&_swigt__p_ogdf__CCLayoutPackModule, 0, 0, 0},  {&_swigt__p_ogdf__TileToRowsCCPacker, _p_ogdf__TileToRowsCCPackerTo_p_ogdf__CCLayoutPackModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__CirclePlacer[] = {  {&_swigt__p_ogdf__CirclePlacer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__CircularLayout[] = {  {&_swigt__p_ogdf__CircularLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__CoffmanGrahamRanking[] = {  {&_swigt__p_ogdf__CoffmanGrahamRanking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__Color[] = {  {&_swigt__p_ogdf__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__SubgraphPlanarizer[] = {{&_swigt__p_ogdf__SubgraphPlanarizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__CrossingMinimizationModule[] = {  {&_swigt__p_ogdf__CrossingMinimizationModule, 0, 0, 0},  {&_swigt__p_ogdf__SubgraphPlanarizer, _p_ogdf__SubgraphPlanarizerTo_p_ogdf__CrossingMinimizationModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__DavidsonHarelLayout[] = {  {&_swigt__p_ogdf__DavidsonHarelLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__DominanceLayout[] = {  {&_swigt__p_ogdf__DominanceLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EdgeArrayT_double_t[] = {  {&_swigt__p_ogdf__EdgeArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EdgeArrayT_float_t[] = {  {&_swigt__p_ogdf__EdgeArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EdgeArrayT_int_t[] = {  {&_swigt__p_ogdf__EdgeArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EdgeArrayT_long_t[] = {  {&_swigt__p_ogdf__EdgeArrayT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EdgeCoverMerger[] = {  {&_swigt__p_ogdf__EdgeCoverMerger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EdgeElement[] = {  {&_swigt__p_ogdf__EdgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EdgeInsertionModule[] = {  {&_swigt__p_ogdf__EdgeInsertionModule, 0, 0, 0},  {&_swigt__p_ogdf__VariableEmbeddingInserterDyn, _p_ogdf__VariableEmbeddingInserterDynTo_p_ogdf__EdgeInsertionModule, 0, 0},  {&_swigt__p_ogdf__FixedEmbeddingInserter, _p_ogdf__FixedEmbeddingInserterTo_p_ogdf__EdgeInsertionModule, 0, 0},  {&_swigt__p_ogdf__VariableEmbeddingInserter, _p_ogdf__VariableEmbeddingInserterTo_p_ogdf__EdgeInsertionModule, 0, 0},  {&_swigt__p_ogdf__MultiEdgeApproxInserter, _p_ogdf__MultiEdgeApproxInserterTo_p_ogdf__EdgeInsertionModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__SimpleEmbedder[] = {{&_swigt__p_ogdf__SimpleEmbedder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderMinDepth[] = {{&_swigt__p_ogdf__EmbedderMinDepth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderMaxFace[] = {{&_swigt__p_ogdf__EmbedderMaxFace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderMinDepthMaxFace[] = {{&_swigt__p_ogdf__EmbedderMinDepthMaxFace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderMinDepthPiTa[] = {{&_swigt__p_ogdf__EmbedderMinDepthPiTa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderMaxFaceLayers[] = {{&_swigt__p_ogdf__EmbedderMaxFaceLayers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderMinDepthMaxFaceLayers[] = {{&_swigt__p_ogdf__EmbedderMinDepthMaxFaceLayers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderOptimalFlexDraw[] = {{&_swigt__p_ogdf__EmbedderOptimalFlexDraw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__EmbedderModule[] = {  {&_swigt__p_ogdf__EmbedderModule, 0, 0, 0},  {&_swigt__p_ogdf__SimpleEmbedder, _p_ogdf__SimpleEmbedderTo_p_ogdf__EmbedderModule, 0, 0},  {&_swigt__p_ogdf__EmbedderMinDepth, _p_ogdf__EmbedderMinDepthTo_p_ogdf__EmbedderModule, 0, 0},  {&_swigt__p_ogdf__EmbedderMaxFace, _p_ogdf__EmbedderMaxFaceTo_p_ogdf__EmbedderModule, 0, 0},  {&_swigt__p_ogdf__EmbedderMinDepthMaxFace, _p_ogdf__EmbedderMinDepthMaxFaceTo_p_ogdf__EmbedderModule, 0, 0},  {&_swigt__p_ogdf__EmbedderMinDepthPiTa, _p_ogdf__EmbedderMinDepthPiTaTo_p_ogdf__EmbedderModule, 0, 0},  {&_swigt__p_ogdf__EmbedderMaxFaceLayers, _p_ogdf__EmbedderMaxFaceLayersTo_p_ogdf__EmbedderModule, 0, 0},  {&_swigt__p_ogdf__EmbedderMinDepthMaxFaceLayers, _p_ogdf__EmbedderMinDepthMaxFaceLayersTo_p_ogdf__EmbedderModule, 0, 0},  {&_swigt__p_ogdf__EmbedderOptimalFlexDraw, _p_ogdf__EmbedderOptimalFlexDrawTo_p_ogdf__EmbedderModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__FMMMLayout[] = {  {&_swigt__p_ogdf__FMMMLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__FastHierarchyLayout[] = {  {&_swigt__p_ogdf__FastHierarchyLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__FastPlanarSubgraph[] = {  {&_swigt__p_ogdf__FastPlanarSubgraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__FastSimpleHierarchyLayout[] = {  {&_swigt__p_ogdf__FastSimpleHierarchyLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__Fill[] = {  {&_swigt__p_ogdf__Fill, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__FixedEmbeddingInserter[] = {  {&_swigt__p_ogdf__FixedEmbeddingInserter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__GEMLayout[] = {  {&_swigt__p_ogdf__GEMLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__GlobalSifting[] = {  {&_swigt__p_ogdf__GlobalSifting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__Graph[] = {  {&_swigt__p_ogdf__Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__GraphAttributes[] = {  {&_swigt__p_ogdf__GraphAttributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__GridSifting[] = {  {&_swigt__p_ogdf__GridSifting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__HierarchyClusterLayoutModule[] = {  {&_swigt__p_ogdf__HierarchyClusterLayoutModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__HierarchyLayoutModule[] = {  {&_swigt__p_ogdf__HierarchyLayoutModule, 0, 0, 0},  {&_swigt__p_ogdf__FastHierarchyLayout, _p_ogdf__FastHierarchyLayoutTo_p_ogdf__HierarchyLayoutModule, 0, 0},  {&_swigt__p_ogdf__FastSimpleHierarchyLayout, _p_ogdf__FastSimpleHierarchyLayoutTo_p_ogdf__HierarchyLayoutModule, 0, 0},  {&_swigt__p_ogdf__OptimalHierarchyLayout, _p_ogdf__OptimalHierarchyLayoutTo_p_ogdf__HierarchyLayoutModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__IndependentSetMerger[] = {  {&_swigt__p_ogdf__IndependentSetMerger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__SolarPlacer[] = {{&_swigt__p_ogdf__SolarPlacer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__MedianPlacer[] = {{&_swigt__p_ogdf__MedianPlacer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__InitialPlacer[] = {  {&_swigt__p_ogdf__InitialPlacer, 0, 0, 0},  {&_swigt__p_ogdf__SolarPlacer, _p_ogdf__SolarPlacerTo_p_ogdf__InitialPlacer, 0, 0},  {&_swigt__p_ogdf__BarycenterPlacer, _p_ogdf__BarycenterPlacerTo_p_ogdf__InitialPlacer, 0, 0},  {&_swigt__p_ogdf__MedianPlacer, _p_ogdf__MedianPlacerTo_p_ogdf__InitialPlacer, 0, 0},  {&_swigt__p_ogdf__RandomPlacer, _p_ogdf__RandomPlacerTo_p_ogdf__InitialPlacer, 0, 0},  {&_swigt__p_ogdf__CirclePlacer, _p_ogdf__CirclePlacerTo_p_ogdf__InitialPlacer, 0, 0},  {&_swigt__p_ogdf__ZeroPlacer, _p_ogdf__ZeroPlacerTo_p_ogdf__InitialPlacer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__LayerByLayerSweep[] = {{&_swigt__p_ogdf__LayerByLayerSweep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__LayeredCrossMinModule[] = {  {&_swigt__p_ogdf__LayeredCrossMinModule, 0, 0, 0},  {&_swigt__p_ogdf__GlobalSifting, _p_ogdf__GlobalSiftingTo_p_ogdf__LayeredCrossMinModule, 0, 0},  {&_swigt__p_ogdf__GridSifting, _p_ogdf__GridSiftingTo_p_ogdf__LayeredCrossMinModule, 0, 0},  {&_swigt__p_ogdf__LayerByLayerSweep, _p_ogdf__LayerByLayerSweepTo_p_ogdf__LayeredCrossMinModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__LayoutModule[] = {  {&_swigt__p_ogdf__LayoutModule, 0, 0, 0},  {&_swigt__p_ogdf__DavidsonHarelLayout, _p_ogdf__DavidsonHarelLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__CircularLayout, _p_ogdf__CircularLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__BalloonLayout, _p_ogdf__BalloonLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__PlanarizationLayout, _p_ogdf__PlanarizationLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__UpwardPlanarizationLayout, _p_ogdf__UpwardPlanarizationLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__GEMLayout, _p_ogdf__GEMLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__FMMMLayout, _p_ogdf__FMMMLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__TutteLayout, _p_ogdf__TutteLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__TreeLayout, _p_ogdf__TreeLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__RadialTreeLayout, _p_ogdf__RadialTreeLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__DominanceLayout, _p_ogdf__DominanceLayoutTo_p_ogdf__LayoutModule, 0, 0},  {&_swigt__p_ogdf__VisibilityLayout, _p_ogdf__VisibilityLayoutTo_p_ogdf__LayoutModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__LayoutPlanRepModule[] = {  {&_swigt__p_ogdf__LayoutPlanRepModule, 0, 0, 0},  {&_swigt__p_ogdf__OrthoLayout, _p_ogdf__OrthoLayoutTo_p_ogdf__LayoutPlanRepModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListIteratorT_int_t[] = {  {&_swigt__p_ogdf__ListIteratorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_edge_t[] = {  {&_swigt__p_ogdf__ListT_edge_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_int_t[] = {  {&_swigt__p_ogdf__ListT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_node_t[] = {  {&_swigt__p_ogdf__ListT_node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_ogdf__AdjElement_p_t[] = {  {&_swigt__p_ogdf__ListT_ogdf__AdjElement_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_ogdf__EdgeElement_p_t[] = {  {&_swigt__p_ogdf__ListT_ogdf__EdgeElement_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_ogdf__ListT_edge_t_p_t[] = {  {&_swigt__p_ogdf__ListT_ogdf__ListT_edge_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_ogdf__ListT_node_t_p_t[] = {  {&_swigt__p_ogdf__ListT_ogdf__ListT_node_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ListT_ogdf__NodeElement_p_t[] = {  {&_swigt__p_ogdf__ListT_ogdf__NodeElement_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__LocalBiconnectedMerger[] = {  {&_swigt__p_ogdf__LocalBiconnectedMerger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__LongestPathRanking[] = {  {&_swigt__p_ogdf__LongestPathRanking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__MatchingMerger[] = {  {&_swigt__p_ogdf__MatchingMerger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__MultiEdgeApproxInserter[] = {  {&_swigt__p_ogdf__MultiEdgeApproxInserter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__MultilevelBuilder[] = {  {&_swigt__p_ogdf__MultilevelBuilder, 0, 0, 0},  {&_swigt__p_ogdf__EdgeCoverMerger, _p_ogdf__EdgeCoverMergerTo_p_ogdf__MultilevelBuilder, 0, 0},  {&_swigt__p_ogdf__IndependentSetMerger, _p_ogdf__IndependentSetMergerTo_p_ogdf__MultilevelBuilder, 0, 0},  {&_swigt__p_ogdf__LocalBiconnectedMerger, _p_ogdf__LocalBiconnectedMergerTo_p_ogdf__MultilevelBuilder, 0, 0},  {&_swigt__p_ogdf__SolarMerger, _p_ogdf__SolarMergerTo_p_ogdf__MultilevelBuilder, 0, 0},  {&_swigt__p_ogdf__MatchingMerger, _p_ogdf__MatchingMergerTo_p_ogdf__MultilevelBuilder, 0, 0},  {&_swigt__p_ogdf__RandomMerger, _p_ogdf__RandomMergerTo_p_ogdf__MultilevelBuilder, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__NodeArrayT_bool_t[] = {  {&_swigt__p_ogdf__NodeArrayT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__NodeArrayT_double_t[] = {  {&_swigt__p_ogdf__NodeArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__NodeArrayT_float_t[] = {  {&_swigt__p_ogdf__NodeArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__NodeArrayT_int_t[] = {  {&_swigt__p_ogdf__NodeArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__NodeArrayT_long_t[] = {  {&_swigt__p_ogdf__NodeArrayT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__NodeElement[] = {  {&_swigt__p_ogdf__NodeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__OptimalHierarchyLayout[] = {  {&_swigt__p_ogdf__OptimalHierarchyLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__OptimalRanking[] = {  {&_swigt__p_ogdf__OptimalRanking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__OrthoLayout[] = {  {&_swigt__p_ogdf__OrthoLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__MaximalPlanarSubgraphSimple[] = {{&_swigt__p_ogdf__MaximalPlanarSubgraphSimple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__PlanarSubgraphModule[] = {  {&_swigt__p_ogdf__PlanarSubgraphModule, 0, 0, 0},  {&_swigt__p_ogdf__MaximalPlanarSubgraphSimple, _p_ogdf__MaximalPlanarSubgraphSimpleTo_p_ogdf__PlanarSubgraphModule, 0, 0},  {&_swigt__p_ogdf__FastPlanarSubgraph, _p_ogdf__FastPlanarSubgraphTo_p_ogdf__PlanarSubgraphModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__PlanarizationLayout[] = {  {&_swigt__p_ogdf__PlanarizationLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__RadialTreeLayout[] = {  {&_swigt__p_ogdf__RadialTreeLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__RandomMerger[] = {  {&_swigt__p_ogdf__RandomMerger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__RandomPlacer[] = {  {&_swigt__p_ogdf__RandomPlacer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__RankingModule[] = {  {&_swigt__p_ogdf__RankingModule, 0, 0, 0},  {&_swigt__p_ogdf__OptimalRanking, _p_ogdf__OptimalRankingTo_p_ogdf__RankingModule, 0, 0},  {&_swigt__p_ogdf__LongestPathRanking, _p_ogdf__LongestPathRankingTo_p_ogdf__RankingModule, 0, 0},  {&_swigt__p_ogdf__CoffmanGrahamRanking, _p_ogdf__CoffmanGrahamRankingTo_p_ogdf__RankingModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__SolarMerger[] = {  {&_swigt__p_ogdf__SolarMerger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__Stroke[] = {  {&_swigt__p_ogdf__Stroke, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__SugiyamaLayout[] = {  {&_swigt__p_ogdf__SugiyamaLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__TreeLayout[] = {  {&_swigt__p_ogdf__TreeLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__TutteLayout[] = {  {&_swigt__p_ogdf__TutteLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__LayerBasedUPRLayout[] = {{&_swigt__p_ogdf__LayerBasedUPRLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__UPRLayoutModule[] = {  {&_swigt__p_ogdf__UPRLayoutModule, 0, 0, 0},  {&_swigt__p_ogdf__LayerBasedUPRLayout, _p_ogdf__LayerBasedUPRLayoutTo_p_ogdf__UPRLayoutModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__UpwardPlanarizationLayout[] = {  {&_swigt__p_ogdf__UpwardPlanarizationLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__VariableEmbeddingInserter[] = {  {&_swigt__p_ogdf__VariableEmbeddingInserter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__VariableEmbeddingInserterDyn[] = {  {&_swigt__p_ogdf__VariableEmbeddingInserterDyn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__VisibilityLayout[] = {  {&_swigt__p_ogdf__VisibilityLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ogdf__ZeroPlacer[] = {  {&_swigt__p_ogdf__ZeroPlacer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ostream[] = {  {&_swigt__p_ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__int,
  _swigc__p_AcyclicSubgraphModule,
  _swigc__p_ClusterGraph,
  _swigc__p_ClusterGraphAttributes,
  _swigc__p_DPolyline,
  _swigc__p_DRect,
  _swigc__p_EdgeWeightedGraphT_double_t,
  _swigc__p_EdgeWeightedGraphT_int_t,
  _swigc__p_GraphConstraints,
  _swigc__p_GridLayout,
  _swigc__p_Orientation,
  _swigc__p_SVGSettings,
  _swigc__p_int,
  _swigc__p_istream,
  _swigc__p_long_long,
  _swigc__p_ogdf__AcyclicSubgraphModule,
  _swigc__p_ogdf__AdjElement,
  _swigc__p_ogdf__BalloonLayout,
  _swigc__p_ogdf__BarycenterPlacer,
  _swigc__p_ogdf__CCLayoutPackModule,
  _swigc__p_ogdf__CirclePlacer,
  _swigc__p_ogdf__CircularLayout,
  _swigc__p_ogdf__CoffmanGrahamRanking,
  _swigc__p_ogdf__Color,
  _swigc__p_ogdf__CrossingMinimizationModule,
  _swigc__p_ogdf__DavidsonHarelLayout,
  _swigc__p_ogdf__DfsAcyclicSubgraph,
  _swigc__p_ogdf__DominanceLayout,
  _swigc__p_ogdf__EdgeArrayT_double_t,
  _swigc__p_ogdf__EdgeArrayT_float_t,
  _swigc__p_ogdf__EdgeArrayT_int_t,
  _swigc__p_ogdf__EdgeArrayT_long_t,
  _swigc__p_ogdf__EdgeCoverMerger,
  _swigc__p_ogdf__EdgeElement,
  _swigc__p_ogdf__EdgeInsertionModule,
  _swigc__p_ogdf__EmbedderMaxFace,
  _swigc__p_ogdf__EmbedderMaxFaceLayers,
  _swigc__p_ogdf__EmbedderMinDepth,
  _swigc__p_ogdf__EmbedderMinDepthMaxFace,
  _swigc__p_ogdf__EmbedderMinDepthMaxFaceLayers,
  _swigc__p_ogdf__EmbedderMinDepthPiTa,
  _swigc__p_ogdf__EmbedderModule,
  _swigc__p_ogdf__EmbedderOptimalFlexDraw,
  _swigc__p_ogdf__FMMMLayout,
  _swigc__p_ogdf__FastHierarchyLayout,
  _swigc__p_ogdf__FastPlanarSubgraph,
  _swigc__p_ogdf__FastSimpleHierarchyLayout,
  _swigc__p_ogdf__Fill,
  _swigc__p_ogdf__FixedEmbeddingInserter,
  _swigc__p_ogdf__GEMLayout,
  _swigc__p_ogdf__GlobalSifting,
  _swigc__p_ogdf__Graph,
  _swigc__p_ogdf__GraphAttributes,
  _swigc__p_ogdf__GreedyCycleRemoval,
  _swigc__p_ogdf__GridSifting,
  _swigc__p_ogdf__HierarchyClusterLayoutModule,
  _swigc__p_ogdf__HierarchyLayoutModule,
  _swigc__p_ogdf__IndependentSetMerger,
  _swigc__p_ogdf__InitialPlacer,
  _swigc__p_ogdf__LayerBasedUPRLayout,
  _swigc__p_ogdf__LayerByLayerSweep,
  _swigc__p_ogdf__LayeredCrossMinModule,
  _swigc__p_ogdf__LayoutModule,
  _swigc__p_ogdf__LayoutPlanRepModule,
  _swigc__p_ogdf__ListIteratorT_int_t,
  _swigc__p_ogdf__ListT_edge_t,
  _swigc__p_ogdf__ListT_int_t,
  _swigc__p_ogdf__ListT_node_t,
  _swigc__p_ogdf__ListT_ogdf__AdjElement_p_t,
  _swigc__p_ogdf__ListT_ogdf__EdgeElement_p_t,
  _swigc__p_ogdf__ListT_ogdf__ListT_edge_t_p_t,
  _swigc__p_ogdf__ListT_ogdf__ListT_node_t_p_t,
  _swigc__p_ogdf__ListT_ogdf__NodeElement_p_t,
  _swigc__p_ogdf__LocalBiconnectedMerger,
  _swigc__p_ogdf__LongestPathRanking,
  _swigc__p_ogdf__MatchingMerger,
  _swigc__p_ogdf__MaximalPlanarSubgraphSimple,
  _swigc__p_ogdf__MedianPlacer,
  _swigc__p_ogdf__MultiEdgeApproxInserter,
  _swigc__p_ogdf__MultilevelBuilder,
  _swigc__p_ogdf__NodeArrayT_bool_t,
  _swigc__p_ogdf__NodeArrayT_double_t,
  _swigc__p_ogdf__NodeArrayT_float_t,
  _swigc__p_ogdf__NodeArrayT_int_t,
  _swigc__p_ogdf__NodeArrayT_long_t,
  _swigc__p_ogdf__NodeElement,
  _swigc__p_ogdf__OptimalHierarchyLayout,
  _swigc__p_ogdf__OptimalRanking,
  _swigc__p_ogdf__OrthoLayout,
  _swigc__p_ogdf__PlanarSubgraphModule,
  _swigc__p_ogdf__PlanarizationLayout,
  _swigc__p_ogdf__RadialTreeLayout,
  _swigc__p_ogdf__RandomMerger,
  _swigc__p_ogdf__RandomPlacer,
  _swigc__p_ogdf__RankingModule,
  _swigc__p_ogdf__SimpleEmbedder,
  _swigc__p_ogdf__SolarMerger,
  _swigc__p_ogdf__SolarPlacer,
  _swigc__p_ogdf__Stroke,
  _swigc__p_ogdf__SubgraphPlanarizer,
  _swigc__p_ogdf__SugiyamaLayout,
  _swigc__p_ogdf__TileToRowsCCPacker,
  _swigc__p_ogdf__TreeLayout,
  _swigc__p_ogdf__TutteLayout,
  _swigc__p_ogdf__UPRLayoutModule,
  _swigc__p_ogdf__UpwardPlanarizationLayout,
  _swigc__p_ogdf__VariableEmbeddingInserter,
  _swigc__p_ogdf__VariableEmbeddingInserterDyn,
  _swigc__p_ogdf__VisibilityLayout,
  _swigc__p_ogdf__ZeroPlacer,
  _swigc__p_ostream,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_string,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_GraphConstraints=0; /* handle for _p_GraphConstraints */
static int le_swig__p_ogdf__ZeroPlacer=0; /* handle for ZeroPlacer */
static int le_swig__p_ogdf__CirclePlacer=0; /* handle for CirclePlacer */
static int le_swig__p_ogdf__RandomPlacer=0; /* handle for RandomPlacer */
static int le_swig__p_ogdf__Stroke=0; /* handle for Stroke */
static int le_swig__p_Orientation=0; /* handle for _p_Orientation */
static int le_swig__p_ogdf__GEMLayout=0; /* handle for GEMLayout */
static int le_swig__p_ogdf__OrthoLayout=0; /* handle for OrthoLayout */
static int le_swig__p_ogdf__OptimalHierarchyLayout=0; /* handle for OptimalHierarchyLayout */
static int le_swig__p_ogdf__FastSimpleHierarchyLayout=0; /* handle for FastSimpleHierarchyLayout */
static int le_swig__p_ogdf__FastHierarchyLayout=0; /* handle for FastHierarchyLayout */
static int le_swig__p_ogdf__FMMMLayout=0; /* handle for FMMMLayout */
static int le_swig__p_ogdf__TutteLayout=0; /* handle for TutteLayout */
static int le_swig__p_ogdf__TreeLayout=0; /* handle for TreeLayout */
static int le_swig__p_ogdf__RadialTreeLayout=0; /* handle for RadialTreeLayout */
static int le_swig__p_ogdf__SugiyamaLayout=0; /* handle for SugiyamaLayout */
static int le_swig__p_ogdf__DominanceLayout=0; /* handle for DominanceLayout */
static int le_swig__p_ogdf__VisibilityLayout=0; /* handle for VisibilityLayout */
static int le_swig__p_AcyclicSubgraphModule=0; /* handle for _p_AcyclicSubgraphModule */
static int le_swig__p_ogdf__LayoutModule=0; /* handle for LayoutModule */
static int le_swig__p_ogdf__UPRLayoutModule=0; /* handle for UPRLayoutModule */
static int le_swig__p_ogdf__LayoutPlanRepModule=0; /* handle for LayoutPlanRepModule */
static int le_swig__p_ogdf__EmbedderModule=0; /* handle for EmbedderModule */
static int le_swig__p_ogdf__EdgeInsertionModule=0; /* handle for EdgeInsertionModule */
static int le_swig__p_ogdf__PlanarSubgraphModule=0; /* handle for PlanarSubgraphModule */
static int le_swig__p_ogdf__CrossingMinimizationModule=0; /* handle for CrossingMinimizationModule */
static int le_swig__p_ogdf__LayeredCrossMinModule=0; /* handle for LayeredCrossMinModule */
static int le_swig__p_ogdf__AcyclicSubgraphModule=0; /* handle for AcyclicSubgraphModule */
static int le_swig__p_ogdf__HierarchyLayoutModule=0; /* handle for HierarchyLayoutModule */
static int le_swig__p_ogdf__HierarchyClusterLayoutModule=0; /* handle for HierarchyClusterLayoutModule */
static int le_swig__p_DPolyline=0; /* handle for _p_DPolyline */
static int le_swig__p_short=0; /* handle for _p_short */
static int le_swig__p_unsigned_short=0; /* handle for _p_unsigned_short */
static int le_swig__p_ClusterGraph=0; /* handle for _p_ClusterGraph */
static int le_swig__p_ogdf__ListT_node_t=0; /* handle for _p_ogdf__ListT_node_t */
static int le_swig__p_ogdf__GridSifting=0; /* handle for GridSifting */
static int le_swig__p_ogdf__GlobalSifting=0; /* handle for GlobalSifting */
static int le_swig__p_ogdf__BarycenterPlacer=0; /* handle for BarycenterPlacer */
static int le_swig__p_ogdf__InitialPlacer=0; /* handle for InitialPlacer */
static int le_swig__p_int=0; /* handle for _p_int */
static int le_swig__p_ogdf__VariableEmbeddingInserterDyn=0; /* handle for VariableEmbeddingInserterDyn */
static int le_swig__p_long_long=0; /* handle for _p_long_long */
static int le_swig__p_unsigned_long_long=0; /* handle for _p_unsigned_long_long */
static int le_swig__p_ogdf__Color=0; /* handle for Color */
static int le_swig__p_ogdf__DavidsonHarelLayout=0; /* handle for DavidsonHarelLayout */
static int le_swig__p_ogdf__CircularLayout=0; /* handle for CircularLayout */
static int le_swig__p_ogdf__BalloonLayout=0; /* handle for BalloonLayout */
static int le_swig__p_ogdf__PlanarizationLayout=0; /* handle for PlanarizationLayout */
static int le_swig__p_ogdf__UpwardPlanarizationLayout=0; /* handle for UpwardPlanarizationLayout */
static int le_swig__p_GridLayout=0; /* handle for _p_GridLayout */
static int le_swig__p_ogdf__GraphAttributes=0; /* handle for GraphAttributes */
static int le_swig__p_ClusterGraphAttributes=0; /* handle for _p_ClusterGraphAttributes */
static int le_swig__p_ogdf__RandomMerger=0; /* handle for RandomMerger */
static int le_swig__p_ogdf__MatchingMerger=0; /* handle for MatchingMerger */
static int le_swig__p_ogdf__MultilevelBuilder=0; /* handle for MultilevelBuilder */
static int le_swig__p_ogdf__FastPlanarSubgraph=0; /* handle for FastPlanarSubgraph */
static int le_swig__p_ogdf__ListT_ogdf__NodeElement_p_t=0; /* handle for _p_ogdf__ListT_ogdf__NodeElement_p_t */
static int le_swig__p_ogdf__ListT_ogdf__EdgeElement_p_t=0; /* handle for _p_ogdf__ListT_ogdf__EdgeElement_p_t */
static int le_swig__p_ogdf__ListT_ogdf__AdjElement_p_t=0; /* handle for _p_ogdf__ListT_ogdf__AdjElement_p_t */
static int le_swig__p_SVGSettings=0; /* handle for SVGSettings */
static int le_swig__p_ogdf__ListT_edge_t=0; /* handle for _p_ogdf__ListT_edge_t */
static int le_swig__p_ogdf__EdgeArrayT_double_t=0; /* handle for DoubleEdgeArray */
static int le_swig__p_ogdf__NodeArrayT_double_t=0; /* handle for DoubleNodeArray */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_EdgeWeightedGraphT_double_t=0; /* handle for _p_EdgeWeightedGraphT_double_t */
static int le_swig__p_ogdf__CoffmanGrahamRanking=0; /* handle for CoffmanGrahamRanking */
static int le_swig__p_ogdf__LongestPathRanking=0; /* handle for LongestPathRanking */
static int le_swig__p_ogdf__OptimalRanking=0; /* handle for OptimalRanking */
static int le_swig__p_ogdf__EdgeArrayT_float_t=0; /* handle for FloatEdgeArray */
static int le_swig__p_ogdf__NodeArrayT_float_t=0; /* handle for FloatNodeArray */
static int le_swig__p_ogdf__EdgeArrayT_long_t=0; /* handle for LongEdgeArray */
static int le_swig__p_ogdf__NodeArrayT_long_t=0; /* handle for LongNodeArray */
static int le_swig__p_ogdf__CCLayoutPackModule=0; /* handle for CCLayoutPackModule */
static int le_swig__p_ogdf__RankingModule=0; /* handle for RankingModule */
static int le_swig__p_istream=0; /* handle for _p_istream */
static int le_swig__p_ostream=0; /* handle for _p_ostream */
static int le_swig__p_ogdf__SolarMerger=0; /* handle for SolarMerger */
static int le_swig__p_ogdf__LocalBiconnectedMerger=0; /* handle for LocalBiconnectedMerger */
static int le_swig__p_ogdf__IndependentSetMerger=0; /* handle for IndependentSetMerger */
static int le_swig__p_ogdf__EdgeCoverMerger=0; /* handle for EdgeCoverMerger */
static int le_swig__p_ogdf__ListT_ogdf__ListT_edge_t_p_t=0; /* handle for _p_ogdf__ListT_ogdf__ListT_edge_t_p_t */
static int le_swig__p_ogdf__ListT_ogdf__ListT_node_t_p_t=0; /* handle for _p_ogdf__ListT_ogdf__ListT_node_t_p_t */
static int le_swig__p_string=0; /* handle for _p_string */
static int le_swig__p_ogdf__EdgeArrayT_int_t=0; /* handle for IntEdgeArray */
static int le_swig__p_ogdf__ListIteratorT_int_t=0; /* handle for IntListIterator */
static int le_swig__p_ogdf__ListT_int_t=0; /* handle for IntList */
static int le_swig__p_ogdf__NodeArrayT_int_t=0; /* handle for IntNodeArray */
static int le_swig__p_DRect=0; /* handle for _p_DRect */
static int le_swig__p_ogdf__MultiEdgeApproxInserter=0; /* handle for MultiEdgeApproxInserter */
static int le_swig__p_ogdf__VariableEmbeddingInserter=0; /* handle for VariableEmbeddingInserter */
static int le_swig__p_ogdf__FixedEmbeddingInserter=0; /* handle for FixedEmbeddingInserter */
static int le_swig__p_EdgeWeightedGraphT_int_t=0; /* handle for _p_EdgeWeightedGraphT_int_t */
static int le_swig__p_unsigned_int=0; /* handle for _p_unsigned_int */
static int le_swig__p_signed_char=0; /* handle for _p_signed_char */
static int le_swig__p_unsigned_char=0; /* handle for _p_unsigned_char */
static int le_swig__p_ogdf__Fill=0; /* handle for Fill */
static int le_swig__p_ogdf__NodeArrayT_bool_t=0; /* handle for _p_ogdf__NodeArrayT_bool_t */
static int le_swig__p_ogdf__Graph=0; /* handle for Graph */
static int le_swig__p_ogdf__AdjElement=0; /* handle for AdjElement */
static int le_swig__p_ogdf__EdgeElement=0; /* handle for EdgeElement */
static int le_swig__p_ogdf__NodeElement=0; /* handle for NodeElement */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_IntListIterator_valid) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_valid. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_ListIteratorEqualsEquals) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  ogdf::ListIterator< int > *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_ListIteratorEqualsEquals. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntListIterator_ListIteratorEqualsEquals. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  result = (bool)(arg1)->operator ==((ogdf::ListIterator< int > const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_ListIteratorNotEquals) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  ogdf::ListIterator< int > *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_ListIteratorNotEquals. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntListIterator_ListIteratorNotEquals. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  result = (bool)(arg1)->operator !=((ogdf::ListIterator< int > const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_succ) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  zval **args[1];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_succ. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->succ();
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_pred) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  zval **args[1];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_pred. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->pred();
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_get_val) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_get_val. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)ogdf_ListIterator_Sl_int_Sg__get_val(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_set_val) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_set_val. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  ogdf_ListIterator_Sl_int_Sg__set_val(arg1,arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_inc) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_inc. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  ogdf_ListIterator_Sl_int_Sg__inc(arg1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_dec) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_dec. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  ogdf_ListIterator_Sl_int_Sg__dec(arg1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntListIterator_eq) {
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  ogdf::ListIterator< int > *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntListIterator_eq. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntListIterator_eq. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
  }
  result = (bool)ogdf_ListIterator_Sl_int_Sg__eq(arg1,(ogdf::ListIterator< int > const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntListIterator) {
  ogdf::ListIterator< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::ListIterator< int > *)new ogdf::ListIterator< int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IntListIterator(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::ListIterator< int > *arg1 = (ogdf::ListIterator< int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::ListIterator< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__ListIteratorT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::ListIterator<(int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_c_List__SWIG_0) {
  ogdf::List< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::List< int > *)new ogdf::List< int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__ListT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_c_List__SWIG_1) {
  ogdf::List< int > *arg1 = 0 ;
  zval **args[1];
  ogdf::List< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_c_List. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  result = (ogdf::List< int > *)new ogdf::List< int >((ogdf::List< int > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__ListT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_c_List) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_c_List__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      _wrap_new_c_List__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_c_List'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_c_empty) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_c_empty. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->empty();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_size) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_size. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_front) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_front. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->front();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_back) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_back. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->back();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_get) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int arg2 ;
  zval **args[2];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_get. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (arg1)->get(arg2);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_pos) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_pos. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_pos. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  result = (int)(arg1)->pos(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_begin) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_begin. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->begin();
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_end) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_end. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->end();
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_rbegin) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_rbegin. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->rbegin();
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_rend) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_rend. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->rend();
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_cyclicPred) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[2];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_cyclicPred. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_cyclicPred. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  result = (arg1)->cyclicPred(arg2);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_cyclicSucc) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[2];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_cyclicSucc. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_cyclicSucc. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  result = (arg1)->cyclicSucc(arg2);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_ListEqualsEquals) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::List< int > *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_ListEqualsEquals. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_ListEqualsEquals. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  result = (bool)(arg1)->operator ==((ogdf::List< int > const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_ListNotEquals) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::List< int > *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_ListNotEquals. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_ListNotEquals. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  result = (bool)(arg1)->operator !=((ogdf::List< int > const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_pushFront) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_pushFront. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (arg1)->pushFront((int const &)*arg2);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_pushBack) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_pushBack. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (arg1)->pushBack((int const &)*arg2);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_insert__SWIG_0) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  ogdf::ListIterator< int > arg3 ;
  ogdf::Direction arg4 ;
  int temp2 ;
  ogdf::ListIterator< int > *tmp3 ;
  zval **args[4];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_insert. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_insert. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg3 = *tmp3;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (ogdf::Direction) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (arg1)->insert((int const &)*arg2,arg3,arg4);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_insert__SWIG_1) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  ogdf::ListIterator< int > arg3 ;
  int temp2 ;
  ogdf::ListIterator< int > *tmp3 ;
  zval **args[3];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_insert. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_insert. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg3 = *tmp3;
  }
  result = (arg1)->insert((int const &)*arg2,arg3);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_insert) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
        }
        if (_v) {
          _wrap_IntList_insert__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_IntList_insert__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'IntList_insert'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_insertBefore) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  ogdf::ListIterator< int > arg3 ;
  int temp2 ;
  ogdf::ListIterator< int > *tmp3 ;
  zval **args[3];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_insertBefore. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_insertBefore. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg3 = *tmp3;
  }
  result = (arg1)->insertBefore((int const &)*arg2,arg3);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_insertAfter) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  ogdf::ListIterator< int > arg3 ;
  int temp2 ;
  ogdf::ListIterator< int > *tmp3 ;
  zval **args[3];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_insertAfter. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_insertAfter. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg3 = *tmp3;
  }
  result = (arg1)->insertAfter((int const &)*arg2,arg3);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_popFront) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_popFront. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->popFront();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_popFrontRet) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_popFrontRet. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->popFrontRet();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_popBack) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_popBack. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->popBack();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_popBackRet) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_popBackRet. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->popBackRet();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList__del) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList__del. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList__del. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  (arg1)->del(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_removeFirst) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_removeFirst. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (bool)(arg1)->removeFirst((int const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_clear) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_clear. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_exchange) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > arg3 ;
  ogdf::ListIterator< int > *tmp2 ;
  ogdf::ListIterator< int > *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_exchange. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_exchange. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_exchange. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg3 = *tmp3;
  }
  (arg1)->exchange(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToFront__SWIG_0) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToFront. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToFront. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  (arg1)->moveToFront(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToBack__SWIG_0) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToBack. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToBack. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  (arg1)->moveToBack(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToSucc__SWIG_0) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > arg3 ;
  ogdf::ListIterator< int > *tmp2 ;
  ogdf::ListIterator< int > *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToSucc. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToSucc. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_moveToSucc. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg3 = *tmp3;
  }
  (arg1)->moveToSucc(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToPrec__SWIG_0) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::ListIterator< int > arg3 ;
  ogdf::ListIterator< int > *tmp2 ;
  ogdf::ListIterator< int > *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToPrec. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToPrec. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_moveToPrec. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg3 = *tmp3;
  }
  (arg1)->moveToPrec(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToFront__SWIG_1) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::List< int > *arg3 = 0 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToFront. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToFront. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_moveToFront. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  (arg1)->moveToFront(arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToFront) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        _wrap_IntList_moveToFront__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
        }
        if (_v) {
          _wrap_IntList_moveToFront__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'IntList_moveToFront'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToBack__SWIG_1) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::List< int > *arg3 = 0 ;
  ogdf::ListIterator< int > *tmp2 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToBack. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToBack. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_moveToBack. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  (arg1)->moveToBack(arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToBack) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        _wrap_IntList_moveToBack__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
        }
        if (_v) {
          _wrap_IntList_moveToBack__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'IntList_moveToBack'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToSucc__SWIG_1) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::List< int > *arg3 = 0 ;
  ogdf::ListIterator< int > arg4 ;
  ogdf::ListIterator< int > *tmp2 ;
  ogdf::ListIterator< int > *tmp4 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToSucc. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToSucc. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_moveToSucc. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of IntList_moveToSucc. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg4 = *tmp4;
  }
  (arg1)->moveToSucc(arg2,*arg3,arg4);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToSucc) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
        }
        if (_v) {
          _wrap_IntList_moveToSucc__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
          }
          if (_v) {
            _wrap_IntList_moveToSucc__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'IntList_moveToSucc'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToPrec__SWIG_1) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::ListIterator< int > arg2 ;
  ogdf::List< int > *arg3 = 0 ;
  ogdf::ListIterator< int > arg4 ;
  ogdf::ListIterator< int > *tmp2 ;
  ogdf::ListIterator< int > *tmp4 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_moveToPrec. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_moveToPrec. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntList_moveToPrec. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of IntList_moveToPrec. Expected SWIGTYPE_p_ogdf__ListIteratorT_int_t");
    }
    arg4 = *tmp4;
  }
  (arg1)->moveToPrec(arg2,*arg3,arg4);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_moveToPrec) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
        }
        if (_v) {
          _wrap_IntList_moveToPrec__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_int_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void **)&tmp, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 0) >= 0);
          }
          if (_v) {
            _wrap_IntList_moveToPrec__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'IntList_moveToPrec'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_conc) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::List< int > *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_conc. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_conc. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  (arg1)->conc(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_concFront) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  ogdf::List< int > *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_concFront. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntList_concFront. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  (arg1)->concFront(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_reverse) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_reverse. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->reverse();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_quicksort) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_quicksort. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->quicksort();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_permute) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_permute. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->permute();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_search) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_search. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (arg1)->search((int const &)*arg2);
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_chooseIterator) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  ogdf::ListIterator< int > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_chooseIterator. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->chooseIterator();
  {
    ogdf::ListIterator< int > * resultobj = new ogdf::ListIterator< int >((const ogdf::ListIterator< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__ListIteratorT_int_t, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntList_chooseElement) {
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ListT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntList_chooseElement. Expected SWIGTYPE_p_ogdf__ListT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->chooseElement();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IntList(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::List< int > *arg1 = (ogdf::List< int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::List< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__ListT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::List<(int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_theEdge) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_theEdge. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::EdgeElement *)(arg1)->theEdge();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_theNode) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_theNode. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->theNode();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_twin) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_twin. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->twin();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_twinNode) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_twinNode. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->twinNode();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_index) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_index. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->index();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_clockwiseFaceSucc) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_clockwiseFaceSucc. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->clockwiseFaceSucc();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_clockwiseFacePred) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_clockwiseFacePred. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->clockwiseFacePred();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_counterClockwiseFaceSucc) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_counterClockwiseFaceSucc. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->counterClockwiseFaceSucc();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_counterClockwiseFacePred) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_counterClockwiseFacePred. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->counterClockwiseFacePred();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_faceCycleSucc) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_faceCycleSucc. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->faceCycleSucc();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_faceCyclePred) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_faceCyclePred. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->faceCyclePred();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_succ) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_succ. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->succ();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_pred) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_pred. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->pred();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_cyclicSucc) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_cyclicSucc. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->cyclicSucc();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_cyclicPred) {
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_cyclicPred. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->cyclicPred();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_AdjElement_compare) {
  ogdf::AdjElement *arg1 = 0 ;
  ogdf::AdjElement *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__AdjElement, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AdjElement_compare. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of AdjElement_compare. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  result = (int)ogdf::AdjElement::compare((ogdf::AdjElement const &)*arg1,(ogdf::AdjElement const &)*arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_AdjElement(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::AdjElement *arg1 = (ogdf::AdjElement *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::AdjElement *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__AdjElement TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::AdjElement resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_index) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_index. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->index();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_indeg) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_indeg. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->indeg();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_outdeg) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_outdeg. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->outdeg();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_degree) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_degree. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->degree();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_firstAdj) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_firstAdj. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->firstAdj();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_lastAdj) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_lastAdj. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->lastAdj();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_succ) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_succ. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->succ();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_pred) {
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_pred. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->pred();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_NodeElement_compare) {
  ogdf::NodeElement *arg1 = 0 ;
  ogdf::NodeElement *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeElement, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NodeElement_compare. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of NodeElement_compare. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (int)ogdf::NodeElement::compare((ogdf::NodeElement const &)*arg1,(ogdf::NodeElement const &)*arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_NodeElement(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::NodeElement *arg1 = (ogdf::NodeElement *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::NodeElement *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__NodeElement TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::NodeElement resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_index) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_index. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->index();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_source) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_source. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->source();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_target) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_target. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->target();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_adjSource) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_adjSource. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->adjSource();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_adjTarget) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  ogdf::AdjElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_adjTarget. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::AdjElement *)(arg1)->adjTarget();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__AdjElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_opposite) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_opposite. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of EdgeElement_opposite. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::NodeElement *)(arg1)->opposite(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_isSelfLoop) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_isSelfLoop. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->isSelfLoop();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_succ) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_succ. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::EdgeElement *)(arg1)->succ();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_pred) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  zval **args[1];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_pred. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::EdgeElement *)(arg1)->pred();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_isIncident) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_isIncident. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of EdgeElement_isIncident. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (bool)(arg1)->isIncident(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_commonNode) {
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_commonNode. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of EdgeElement_commonNode. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (ogdf::NodeElement *)(arg1)->commonNode(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeElement_compare) {
  ogdf::EdgeElement *arg1 = 0 ;
  ogdf::EdgeElement *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeElement_compare. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of EdgeElement_compare. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (int)ogdf::EdgeElement::compare((ogdf::EdgeElement const &)*arg1,(ogdf::EdgeElement const &)*arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_EdgeElement(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::EdgeElement *arg1 = (ogdf::EdgeElement *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::EdgeElement *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__EdgeElement TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::EdgeElement resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Graph__SWIG_0) {
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::Graph *)new ogdf::Graph();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Graph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_Graph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::Graph *)new ogdf::Graph((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Graph) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_Graph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_Graph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Graph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_c_empty) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_c_empty. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->empty();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_numberOfNodes) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_numberOfNodes. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->numberOfNodes();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_numberOfEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_numberOfEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->numberOfEdges();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_maxNodeIndex) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_maxNodeIndex. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->maxNodeIndex();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_maxEdgeIndex) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_maxEdgeIndex. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->maxEdgeIndex();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_maxAdjEntryIndex) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_maxAdjEntryIndex. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->maxAdjEntryIndex();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_nodeArrayTableSize) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_nodeArrayTableSize. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->nodeArrayTableSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_edgeArrayTableSize) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_edgeArrayTableSize. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->edgeArrayTableSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_adjEntryArrayTableSize) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_adjEntryArrayTableSize. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->adjEntryArrayTableSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_firstNode) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_firstNode. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->firstNode();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_lastNode) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_lastNode. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->lastNode();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_firstEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_firstEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::EdgeElement *)(arg1)->firstEdge();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_lastEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_lastEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::EdgeElement *)(arg1)->lastEdge();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_chooseNode) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_chooseNode. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->chooseNode();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_chooseEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_chooseEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::EdgeElement *)(arg1)->chooseEdge();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_allNodes) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::List< ogdf::NodeElement * > *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_allNodes. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_ogdf__NodeElement_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_allNodes. Expected SWIGTYPE_p_ogdf__ListT_ogdf__NodeElement_p_t");
    }
  }
  (arg1)->allNodes(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_allEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::List< ogdf::EdgeElement * > *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_allEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_allEdges. Expected SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t");
    }
  }
  (arg1)->allEdges(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_adjEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::List< ogdf::EdgeElement * > *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_adjEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_adjEdges. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_adjEdges. Expected SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t");
    }
  }
  (arg1)->adjEdges(arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_adjEntries) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::List< ogdf::AdjElement * > *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_adjEntries. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_adjEntries. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_ogdf__AdjElement_p_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_adjEntries. Expected SWIGTYPE_p_ogdf__ListT_ogdf__AdjElement_p_t");
    }
  }
  (arg1)->adjEntries(arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_inEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::List< ogdf::EdgeElement * > *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_inEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_inEdges. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_inEdges. Expected SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t");
    }
  }
  (arg1)->inEdges(arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_outEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::List< ogdf::EdgeElement * > *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_outEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_outEdges. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_outEdges. Expected SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t");
    }
  }
  (arg1)->outEdges(arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newNode__SWIG_0) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newNode. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::NodeElement *)(arg1)->newNode();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newNode__SWIG_1) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  int arg2 ;
  zval **args[2];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newNode. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (ogdf::NodeElement *)(arg1)->newNode(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newNode) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_Graph_newNode__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Graph_newNode__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Graph_newNode'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newEdge__SWIG_0) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::NodeElement *arg3 = (ogdf::NodeElement *) 0 ;
  zval **args[3];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::EdgeElement *)(arg1)->newEdge(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newEdge__SWIG_1) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::NodeElement *arg3 = (ogdf::NodeElement *) 0 ;
  int arg4 ;
  zval **args[4];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (ogdf::EdgeElement *)(arg1)->newEdge(arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newEdge__SWIG_2) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  ogdf::Direction arg4 ;
  zval **args[4];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (ogdf::Direction) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (ogdf::EdgeElement *)(arg1)->newEdge(arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newEdge__SWIG_3) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  zval **args[3];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  result = (ogdf::EdgeElement *)(arg1)->newEdge(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newEdge__SWIG_4) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  zval **args[3];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  result = (ogdf::EdgeElement *)(arg1)->newEdge(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newEdge__SWIG_5) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::NodeElement *arg3 = (ogdf::NodeElement *) 0 ;
  zval **args[3];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_newEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::EdgeElement *)(arg1)->newEdge(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_newEdge) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
        }
        if (_v) {
          _wrap_Graph_newEdge__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
        }
        if (_v) {
          _wrap_Graph_newEdge__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
        }
        if (_v) {
          _wrap_Graph_newEdge__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
        }
        if (_v) {
          _wrap_Graph_newEdge__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_Graph_newEdge__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_Graph_newEdge__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Graph_newEdge'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_delNode) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_delNode. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_delNode. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  (arg1)->delNode(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_delEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_delEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_delEdge. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  (arg1)->delEdge(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_clear) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_clear. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_hideEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_hideEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_hideEdge. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  (arg1)->hideEdge(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_restoreEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_restoreEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_restoreEdge. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  (arg1)->restoreEdge(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_restoreAllEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_restoreAllEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->restoreAllEdges();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_split) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_split. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_split. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (ogdf::EdgeElement *)(arg1)->split(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_unsplit__SWIG_0) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_unsplit. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_unsplit. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  (arg1)->unsplit(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_unsplit__SWIG_1) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::EdgeElement *arg3 = (ogdf::EdgeElement *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_unsplit. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_unsplit. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_unsplit. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  (arg1)->unsplit(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_unsplit) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_Graph_unsplit__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
        }
        if (_v) {
          _wrap_Graph_unsplit__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Graph_unsplit'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_splitNode) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  zval **args[3];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_splitNode. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_splitNode. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_splitNode. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  result = (ogdf::NodeElement *)(arg1)->splitNode(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_contract) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  ogdf::NodeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_contract. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_contract. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (ogdf::NodeElement *)(arg1)->contract(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_move) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  ogdf::Direction arg4 ;
  ogdf::AdjElement *arg5 = (ogdf::AdjElement *) 0 ;
  ogdf::Direction arg6 ;
  zval **args[6];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_move. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_move. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_move. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (ogdf::Direction) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of Graph_move. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (ogdf::Direction) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  (arg1)->move(arg2,arg3,arg4,arg5,arg6);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveTarget__SWIG_0) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::NodeElement *arg3 = (ogdf::NodeElement *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_moveTarget. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_moveTarget. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_moveTarget. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  (arg1)->moveTarget(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveTarget__SWIG_1) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  ogdf::Direction arg4 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_moveTarget. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_moveTarget. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_moveTarget. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (ogdf::Direction) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  (arg1)->moveTarget(arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveTarget) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
        }
        if (_v) {
          _wrap_Graph_moveTarget__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_Graph_moveTarget__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Graph_moveTarget'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveSource__SWIG_0) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::NodeElement *arg3 = (ogdf::NodeElement *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_moveSource. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_moveSource. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_moveSource. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  (arg1)->moveSource(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveSource__SWIG_1) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  ogdf::Direction arg4 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_moveSource. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_moveSource. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_moveSource. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (ogdf::Direction) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  (arg1)->moveSource(arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveSource) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
        }
        if (_v) {
          _wrap_Graph_moveSource__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__AdjElement, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_Graph_moveSource__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Graph_moveSource'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_searchEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::NodeElement *arg3 = (ogdf::NodeElement *) 0 ;
  zval **args[3];
  ogdf::EdgeElement *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_searchEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_searchEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_searchEdge. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::EdgeElement *)(arg1)->searchEdge(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeElement, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_reverseEdge) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_reverseEdge. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_reverseEdge. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  (arg1)->reverseEdge(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_reverseAllEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_reverseAllEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->reverseAllEdges();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_collaps) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::List< ogdf::NodeElement * > *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_collaps. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_ogdf__NodeElement_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_collaps. Expected SWIGTYPE_p_ogdf__ListT_ogdf__NodeElement_p_t");
    }
  }
  (arg1)->collaps(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_sort) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::List< ogdf::AdjElement * > *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_sort. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_sort. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_ogdf__AdjElement_p_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_sort. Expected SWIGTYPE_p_ogdf__ListT_ogdf__AdjElement_p_t");
    }
  }
  (arg1)->sort(arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_reverseAdjEdges__SWIG_0) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_reverseAdjEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_reverseAdjEdges. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  (arg1)->reverseAdjEdges(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveAdj) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::Direction arg3 ;
  ogdf::AdjElement *arg4 = (ogdf::AdjElement *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_moveAdj. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_moveAdj. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::Direction) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of Graph_moveAdj. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  (arg1)->moveAdj(arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveAdjAfter) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_moveAdjAfter. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_moveAdjAfter. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_moveAdjAfter. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  (arg1)->moveAdjAfter(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_moveAdjBefore) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_moveAdjBefore. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_moveAdjBefore. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_moveAdjBefore. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  (arg1)->moveAdjBefore(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_reverseAdjEdges__SWIG_1) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_reverseAdjEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->reverseAdjEdges();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_reverseAdjEdges) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_Graph_reverseAdjEdges__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_Graph_reverseAdjEdges__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Graph_reverseAdjEdges'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_swapAdjEdges) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  ogdf::AdjElement *arg2 = (ogdf::AdjElement *) 0 ;
  ogdf::AdjElement *arg3 = (ogdf::AdjElement *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_swapAdjEdges. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Graph_swapAdjEdges. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__AdjElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Graph_swapAdjEdges. Expected SWIGTYPE_p_ogdf__AdjElement");
    }
  }
  (arg1)->swapAdjEdges(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_genus) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_genus. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->genus();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_representsCombEmbedding) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_representsCombEmbedding. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->representsCombEmbedding();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_consistencyCheck) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_consistencyCheck. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->consistencyCheck();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_resetEdgeIdCount) {
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Graph_resetEdgeIdCount. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->resetEdgeIdCount(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Graph_nextPower2) {
  int arg1 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)ogdf::Graph::nextPower2(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Graph(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::Graph *arg1 = (ogdf::Graph *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::Graph *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__Graph TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::Graph resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntNodeArray__SWIG_0) {
  ogdf::NodeArray< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::NodeArray< int > *)new ogdf::NodeArray< int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntNodeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_IntNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::NodeArray< int > *)new ogdf::NodeArray< int >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntNodeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  ogdf::NodeArray< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_IntNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::NodeArray< int > *)new ogdf::NodeArray< int >((ogdf::Graph const &)*arg1,(int const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntNodeArray__SWIG_3) {
  ogdf::NodeArray< int > *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_IntNodeArray. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  result = (ogdf::NodeArray< int > *)new ogdf::NodeArray< int >((ogdf::NodeArray< int > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntNodeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_IntNodeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_IntNodeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) >= 0);
    }
    if (_v) {
      _wrap_new_IntNodeArray__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_new_IntNodeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_IntNodeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_valid) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_valid. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_graphOf) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_graphOf. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_init__SWIG_0) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_init__SWIG_1) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_init__SWIG_2) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(int const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) >= 0);
    }
    if (_v) {
      _wrap_IntNodeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_IntNodeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_IntNodeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'IntNodeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_fill) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_fill. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((int const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_get_val) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (int)ogdf_NodeArray_Sl_int_Sg__get_val(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntNodeArray_set_val) {
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_NodeArray_Sl_int_Sg__set_val(arg1,arg2,(int const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IntNodeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::NodeArray< int > *arg1 = (ogdf::NodeArray< int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::NodeArray< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__NodeArrayT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::NodeArray<(int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongNodeArray__SWIG_0) {
  ogdf::NodeArray< long > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::NodeArray< long > *)new ogdf::NodeArray< long >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongNodeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< long > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_LongNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::NodeArray< long > *)new ogdf::NodeArray< long >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongNodeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  zval **args[2];
  ogdf::NodeArray< long > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_LongNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::NodeArray< long > *)new ogdf::NodeArray< long >((ogdf::Graph const &)*arg1,(long const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongNodeArray__SWIG_3) {
  ogdf::NodeArray< long > *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< long > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_LongNodeArray. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  result = (ogdf::NodeArray< long > *)new ogdf::NodeArray< long >((ogdf::NodeArray< long > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongNodeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_LongNodeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_LongNodeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) >= 0);
    }
    if (_v) {
      _wrap_new_LongNodeArray__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_new_LongNodeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_LongNodeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_valid) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_valid. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_graphOf) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_graphOf. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_init__SWIG_0) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_init__SWIG_1) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_init__SWIG_2) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(long const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) >= 0);
    }
    if (_v) {
      _wrap_LongNodeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_LongNodeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_LongNodeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'LongNodeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_fill) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_fill. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((long const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_get_val) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  long result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (long)ogdf_NodeArray_Sl_long_Sg__get_val(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongNodeArray_set_val) {
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_NodeArray_Sl_long_Sg__set_val(arg1,arg2,(long const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_LongNodeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::NodeArray< long > *arg1 = (ogdf::NodeArray< long > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::NodeArray< long > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__NodeArrayT_long_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::NodeArray<(long)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatNodeArray__SWIG_0) {
  ogdf::NodeArray< float > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::NodeArray< float > *)new ogdf::NodeArray< float >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatNodeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< float > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_FloatNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::NodeArray< float > *)new ogdf::NodeArray< float >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatNodeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  zval **args[2];
  ogdf::NodeArray< float > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_FloatNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (float) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::NodeArray< float > *)new ogdf::NodeArray< float >((ogdf::Graph const &)*arg1,(float const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatNodeArray__SWIG_3) {
  ogdf::NodeArray< float > *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< float > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_FloatNodeArray. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  result = (ogdf::NodeArray< float > *)new ogdf::NodeArray< float >((ogdf::NodeArray< float > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatNodeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_FloatNodeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_FloatNodeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) >= 0);
    }
    if (_v) {
      _wrap_new_FloatNodeArray__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_new_FloatNodeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_FloatNodeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_valid) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_valid. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_graphOf) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_graphOf. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_init__SWIG_0) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_init__SWIG_1) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_init__SWIG_2) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (float) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(float const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) >= 0);
    }
    if (_v) {
      _wrap_FloatNodeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_FloatNodeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE); 
        if (_v) {
          _wrap_FloatNodeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FloatNodeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_fill) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_fill. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (float) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((float const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_get_val) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (float)ogdf_NodeArray_Sl_float_Sg__get_val(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatNodeArray_set_val) {
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (float) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_NodeArray_Sl_float_Sg__set_val(arg1,arg2,(float const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_FloatNodeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::NodeArray< float > *arg1 = (ogdf::NodeArray< float > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::NodeArray< float > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__NodeArrayT_float_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::NodeArray<(float)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleNodeArray__SWIG_0) {
  ogdf::NodeArray< double > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::NodeArray< double > *)new ogdf::NodeArray< double >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleNodeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< double > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_DoubleNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::NodeArray< double > *)new ogdf::NodeArray< double >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleNodeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  zval **args[2];
  ogdf::NodeArray< double > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_DoubleNodeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::NodeArray< double > *)new ogdf::NodeArray< double >((ogdf::Graph const &)*arg1,(double const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleNodeArray__SWIG_3) {
  ogdf::NodeArray< double > *arg1 = 0 ;
  zval **args[1];
  ogdf::NodeArray< double > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_DoubleNodeArray. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  result = (ogdf::NodeArray< double > *)new ogdf::NodeArray< double >((ogdf::NodeArray< double > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleNodeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_DoubleNodeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_DoubleNodeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) >= 0);
    }
    if (_v) {
      _wrap_new_DoubleNodeArray__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_new_DoubleNodeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_DoubleNodeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_valid) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_valid. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_graphOf) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_graphOf. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_init__SWIG_0) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_init__SWIG_1) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_init__SWIG_2) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_init. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleNodeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(double const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) >= 0);
    }
    if (_v) {
      _wrap_DoubleNodeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_DoubleNodeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE); 
        if (_v) {
          _wrap_DoubleNodeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'DoubleNodeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_fill) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_fill. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((double const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_get_val) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleNodeArray_get_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (double)ogdf_NodeArray_Sl_double_Sg__get_val(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleNodeArray_set_val) {
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__NodeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleNodeArray_set_val. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_NodeArray_Sl_double_Sg__set_val(arg1,arg2,(double const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_DoubleNodeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::NodeArray< double > *arg1 = (ogdf::NodeArray< double > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::NodeArray< double > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__NodeArrayT_double_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::NodeArray<(double)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntEdgeArray__SWIG_0) {
  ogdf::EdgeArray< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::EdgeArray< int > *)new ogdf::EdgeArray< int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntEdgeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::EdgeArray< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_IntEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::EdgeArray< int > *)new ogdf::EdgeArray< int >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntEdgeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  ogdf::EdgeArray< int > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_IntEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::EdgeArray< int > *)new ogdf::EdgeArray< int >((ogdf::Graph const &)*arg1,(int const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IntEdgeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_IntEdgeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_IntEdgeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_new_IntEdgeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_IntEdgeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_valid) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_valid. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_graphOf) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_graphOf. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_init__SWIG_0) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_init__SWIG_1) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_init__SWIG_2) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(int const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) >= 0);
    }
    if (_v) {
      _wrap_IntEdgeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_IntEdgeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_IntEdgeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'IntEdgeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_fill) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_fill. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((int const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_get_val) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (int)ogdf_EdgeArray_Sl_int_Sg__get_val(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IntEdgeArray_set_val) {
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_EdgeArray_Sl_int_Sg__set_val(arg1,arg2,(int const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IntEdgeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::EdgeArray< int > *arg1 = (ogdf::EdgeArray< int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::EdgeArray< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__EdgeArrayT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::EdgeArray<(int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongEdgeArray__SWIG_0) {
  ogdf::EdgeArray< long > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::EdgeArray< long > *)new ogdf::EdgeArray< long >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongEdgeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::EdgeArray< long > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_LongEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::EdgeArray< long > *)new ogdf::EdgeArray< long >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongEdgeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  zval **args[2];
  ogdf::EdgeArray< long > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_LongEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::EdgeArray< long > *)new ogdf::EdgeArray< long >((ogdf::Graph const &)*arg1,(long const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_LongEdgeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_LongEdgeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_LongEdgeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_new_LongEdgeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_LongEdgeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_valid) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_valid. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_graphOf) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_graphOf. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_init__SWIG_0) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_init__SWIG_1) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_init__SWIG_2) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(long const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) >= 0);
    }
    if (_v) {
      _wrap_LongEdgeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_LongEdgeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_LongEdgeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'LongEdgeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_fill) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_fill. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((long const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_get_val) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  long result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (long)ogdf_EdgeArray_Sl_long_Sg__get_val(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongEdgeArray_set_val) {
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_EdgeArray_Sl_long_Sg__set_val(arg1,arg2,(long const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_LongEdgeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::EdgeArray< long > *arg1 = (ogdf::EdgeArray< long > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::EdgeArray< long > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__EdgeArrayT_long_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::EdgeArray<(long)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatEdgeArray__SWIG_0) {
  ogdf::EdgeArray< float > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::EdgeArray< float > *)new ogdf::EdgeArray< float >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatEdgeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::EdgeArray< float > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_FloatEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::EdgeArray< float > *)new ogdf::EdgeArray< float >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatEdgeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  zval **args[2];
  ogdf::EdgeArray< float > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_FloatEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (float) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::EdgeArray< float > *)new ogdf::EdgeArray< float >((ogdf::Graph const &)*arg1,(float const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FloatEdgeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_FloatEdgeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_FloatEdgeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_new_FloatEdgeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_FloatEdgeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_valid) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_valid. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_graphOf) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_graphOf. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_init__SWIG_0) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_init__SWIG_1) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_init__SWIG_2) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (float) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(float const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) >= 0);
    }
    if (_v) {
      _wrap_FloatEdgeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_FloatEdgeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE); 
        if (_v) {
          _wrap_FloatEdgeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FloatEdgeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_fill) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_fill. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (float) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((float const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_get_val) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (float)ogdf_EdgeArray_Sl_float_Sg__get_val(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FloatEdgeArray_set_val) {
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FloatEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FloatEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (float) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_EdgeArray_Sl_float_Sg__set_val(arg1,arg2,(float const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_FloatEdgeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::EdgeArray< float > *arg1 = (ogdf::EdgeArray< float > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::EdgeArray< float > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__EdgeArrayT_float_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::EdgeArray<(float)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleEdgeArray__SWIG_0) {
  ogdf::EdgeArray< double > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::EdgeArray< double > *)new ogdf::EdgeArray< double >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleEdgeArray__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::EdgeArray< double > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_DoubleEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::EdgeArray< double > *)new ogdf::EdgeArray< double >((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleEdgeArray__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  zval **args[2];
  ogdf::EdgeArray< double > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_DoubleEdgeArray. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (ogdf::EdgeArray< double > *)new ogdf::EdgeArray< double >((ogdf::Graph const &)*arg1,(double const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleEdgeArray) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_DoubleEdgeArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_DoubleEdgeArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_new_DoubleEdgeArray__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_DoubleEdgeArray'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_valid) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_valid. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->valid();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_graphOf) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_graphOf. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *)(arg1)->graphOf();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_init__SWIG_0) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->init();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_init__SWIG_1) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  (arg1)->init((ogdf::Graph const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_init__SWIG_2) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_init. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleEdgeArray_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  (arg1)->init((ogdf::Graph const &)*arg2,(double const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_init) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) >= 0);
    }
    if (_v) {
      _wrap_DoubleEdgeArray_init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _wrap_DoubleEdgeArray_init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE); 
        if (_v) {
          _wrap_DoubleEdgeArray_init__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'DoubleEdgeArray_init'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_fill) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_fill. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->fill((double const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_get_val) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleEdgeArray_get_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (double)ogdf_EdgeArray_Sl_double_Sg__get_val(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DoubleEdgeArray_set_val) {
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DoubleEdgeArray_set_val. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  ogdf_EdgeArray_Sl_double_Sg__set_val(arg1,arg2,(double const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_DoubleEdgeArray(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::EdgeArray< double > *arg1 = (ogdf::EdgeArray< double > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::EdgeArray< double > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__EdgeArrayT_double_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::EdgeArray<(double)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MultilevelBuilder_setEdgeLengthAdjustment) {
  ogdf::MultilevelBuilder *arg1 = (ogdf::MultilevelBuilder *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MultilevelBuilder, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MultilevelBuilder_setEdgeLengthAdjustment. Expected SWIGTYPE_p_ogdf__MultilevelBuilder");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setEdgeLengthAdjustment(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MultilevelBuilder_getNumLevels) {
  ogdf::MultilevelBuilder *arg1 = (ogdf::MultilevelBuilder *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MultilevelBuilder, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MultilevelBuilder_getNumLevels. Expected SWIGTYPE_p_ogdf__MultilevelBuilder");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->getNumLevels();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_EdgeCoverMerger) {
  ogdf::EdgeCoverMerger *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::EdgeCoverMerger *)new ogdf::EdgeCoverMerger();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__EdgeCoverMerger, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_EdgeCoverMerger_setFactor) {
  ogdf::EdgeCoverMerger *arg1 = (ogdf::EdgeCoverMerger *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__EdgeCoverMerger, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EdgeCoverMerger_setFactor. Expected SWIGTYPE_p_ogdf__EdgeCoverMerger");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setFactor(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_IndependentSetMerger_setSearchDepthBase) {
  ogdf::IndependentSetMerger *arg1 = (ogdf::IndependentSetMerger *) 0 ;
  float arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__IndependentSetMerger, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IndependentSetMerger_setSearchDepthBase. Expected SWIGTYPE_p_ogdf__IndependentSetMerger");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (float) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setSearchDepthBase(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_IndependentSetMerger) {
  ogdf::IndependentSetMerger *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::IndependentSetMerger *)new ogdf::IndependentSetMerger();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__IndependentSetMerger, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LocalBiconnectedMerger_setFactor) {
  ogdf::LocalBiconnectedMerger *arg1 = (ogdf::LocalBiconnectedMerger *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LocalBiconnectedMerger, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LocalBiconnectedMerger_setFactor. Expected SWIGTYPE_p_ogdf__LocalBiconnectedMerger");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setFactor(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MatchingMerger_selectByNodeMass) {
  ogdf::MatchingMerger *arg1 = (ogdf::MatchingMerger *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MatchingMerger, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MatchingMerger_selectByNodeMass. Expected SWIGTYPE_p_ogdf__MatchingMerger");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->selectByNodeMass(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_RandomMerger_setFactor) {
  ogdf::RandomMerger *arg1 = (ogdf::RandomMerger *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__RandomMerger, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RandomMerger_setFactor. Expected SWIGTYPE_p_ogdf__RandomMerger");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setFactor(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_SolarMerger__SWIG_0) {
  bool arg1 ;
  bool arg2 ;
  zval **args[2];
  ogdf::SolarMerger *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[0]);
  arg1 = (bool) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (ogdf::SolarMerger *)new ogdf::SolarMerger(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__SolarMerger, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_SolarMerger__SWIG_1) {
  bool arg1 ;
  zval **args[1];
  ogdf::SolarMerger *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[0]);
  arg1 = (bool) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (ogdf::SolarMerger *)new ogdf::SolarMerger(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__SolarMerger, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_SolarMerger__SWIG_2) {
  ogdf::SolarMerger *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::SolarMerger *)new ogdf::SolarMerger();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__SolarMerger, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_SolarMerger) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_SolarMerger__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_BOOL); 
    if (_v) {
      _wrap_new_SolarMerger__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_BOOL); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_new_SolarMerger__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_SolarMerger'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_InitialPlacer_setRandomOffset) {
  ogdf::InitialPlacer *arg1 = (ogdf::InitialPlacer *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__InitialPlacer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InitialPlacer_setRandomOffset. Expected SWIGTYPE_p_ogdf__InitialPlacer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setRandomOffset(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_RandomPlacer_setCircleSize) {
  ogdf::RandomPlacer *arg1 = (ogdf::RandomPlacer *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__RandomPlacer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RandomPlacer_setCircleSize. Expected SWIGTYPE_p_ogdf__RandomPlacer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setCircleSize(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CirclePlacer_setRadiusFixed) {
  ogdf::CirclePlacer *arg1 = (ogdf::CirclePlacer *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CirclePlacer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CirclePlacer_setRadiusFixed. Expected SWIGTYPE_p_ogdf__CirclePlacer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setRadiusFixed(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CirclePlacer_setCircleSize) {
  ogdf::CirclePlacer *arg1 = (ogdf::CirclePlacer *) 0 ;
  float arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CirclePlacer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CirclePlacer_setCircleSize. Expected SWIGTYPE_p_ogdf__CirclePlacer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (float) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setCircleSize(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CirclePlacer_setNodeSelection) {
  ogdf::CirclePlacer *arg1 = (ogdf::CirclePlacer *) 0 ;
  ogdf::CirclePlacer::NodeSelection arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CirclePlacer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CirclePlacer_setNodeSelection. Expected SWIGTYPE_p_ogdf__CirclePlacer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::CirclePlacer::NodeSelection) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setNodeSelection(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_ZeroPlacer_setRandomRange) {
  ogdf::ZeroPlacer *arg1 = (ogdf::ZeroPlacer *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__ZeroPlacer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ZeroPlacer_setRandomRange. Expected SWIGTYPE_p_ogdf__ZeroPlacer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setRandomRange(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_BarycenterPlacer_weightedPositionPriority) {
  ogdf::BarycenterPlacer *arg1 = (ogdf::BarycenterPlacer *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__BarycenterPlacer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BarycenterPlacer_weightedPositionPriority. Expected SWIGTYPE_p_ogdf__BarycenterPlacer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->weightedPositionPriority(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_nodeDistance__SWIG_0) {
  ogdf::FastHierarchyLayout *arg1 = (ogdf::FastHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastHierarchyLayout_nodeDistance. Expected SWIGTYPE_p_ogdf__FastHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->nodeDistance();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_nodeDistance__SWIG_1) {
  ogdf::FastHierarchyLayout *arg1 = (ogdf::FastHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastHierarchyLayout_nodeDistance. Expected SWIGTYPE_p_ogdf__FastHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nodeDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_nodeDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastHierarchyLayout_nodeDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FastHierarchyLayout_nodeDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastHierarchyLayout_nodeDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_layerDistance__SWIG_0) {
  ogdf::FastHierarchyLayout *arg1 = (ogdf::FastHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastHierarchyLayout_layerDistance. Expected SWIGTYPE_p_ogdf__FastHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->layerDistance();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_layerDistance__SWIG_1) {
  ogdf::FastHierarchyLayout *arg1 = (ogdf::FastHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastHierarchyLayout_layerDistance. Expected SWIGTYPE_p_ogdf__FastHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->layerDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_layerDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastHierarchyLayout_layerDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FastHierarchyLayout_layerDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastHierarchyLayout_layerDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_fixedLayerDistance__SWIG_0) {
  ogdf::FastHierarchyLayout *arg1 = (ogdf::FastHierarchyLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastHierarchyLayout_fixedLayerDistance. Expected SWIGTYPE_p_ogdf__FastHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->fixedLayerDistance();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_fixedLayerDistance__SWIG_1) {
  ogdf::FastHierarchyLayout *arg1 = (ogdf::FastHierarchyLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastHierarchyLayout_fixedLayerDistance. Expected SWIGTYPE_p_ogdf__FastHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fixedLayerDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastHierarchyLayout_fixedLayerDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastHierarchyLayout_fixedLayerDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FastHierarchyLayout_fixedLayerDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastHierarchyLayout_fixedLayerDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_nodeDistance__SWIG_0) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_nodeDistance. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->nodeDistance();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_nodeDistance__SWIG_1) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_nodeDistance. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nodeDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_nodeDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastSimpleHierarchyLayout_nodeDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FastSimpleHierarchyLayout_nodeDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastSimpleHierarchyLayout_nodeDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_layerDistance__SWIG_0) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_layerDistance. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->layerDistance();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_layerDistance__SWIG_1) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_layerDistance. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->layerDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_layerDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastSimpleHierarchyLayout_layerDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FastSimpleHierarchyLayout_layerDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastSimpleHierarchyLayout_layerDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_downward__SWIG_0) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_downward. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->downward();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_downward__SWIG_1) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_downward. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->downward(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_downward) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastSimpleHierarchyLayout_downward__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FastSimpleHierarchyLayout_downward__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastSimpleHierarchyLayout_downward'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_leftToRight__SWIG_0) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_leftToRight. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->leftToRight();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_leftToRight__SWIG_1) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_leftToRight. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->leftToRight(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_leftToRight) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastSimpleHierarchyLayout_leftToRight__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FastSimpleHierarchyLayout_leftToRight__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastSimpleHierarchyLayout_leftToRight'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_balanced__SWIG_0) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_balanced. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->balanced();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_balanced__SWIG_1) {
  ogdf::FastSimpleHierarchyLayout *arg1 = (ogdf::FastSimpleHierarchyLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSimpleHierarchyLayout_balanced. Expected SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->balanced(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastSimpleHierarchyLayout_balanced) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FastSimpleHierarchyLayout_balanced__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FastSimpleHierarchyLayout_balanced__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastSimpleHierarchyLayout_balanced'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_nodeDistance__SWIG_0) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_nodeDistance. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->nodeDistance();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_nodeDistance__SWIG_1) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_nodeDistance. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nodeDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_nodeDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_OptimalHierarchyLayout_nodeDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_OptimalHierarchyLayout_nodeDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OptimalHierarchyLayout_nodeDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_layerDistance__SWIG_0) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_layerDistance. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->layerDistance();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_layerDistance__SWIG_1) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_layerDistance. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->layerDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_layerDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_OptimalHierarchyLayout_layerDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_OptimalHierarchyLayout_layerDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OptimalHierarchyLayout_layerDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_fixedLayerDistance__SWIG_0) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_fixedLayerDistance. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->fixedLayerDistance();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_fixedLayerDistance__SWIG_1) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_fixedLayerDistance. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fixedLayerDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_fixedLayerDistance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_OptimalHierarchyLayout_fixedLayerDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_OptimalHierarchyLayout_fixedLayerDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OptimalHierarchyLayout_fixedLayerDistance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_weightSegments__SWIG_0) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_weightSegments. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->weightSegments();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_weightSegments__SWIG_1) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_weightSegments. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->weightSegments(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_weightSegments) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_OptimalHierarchyLayout_weightSegments__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_OptimalHierarchyLayout_weightSegments__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OptimalHierarchyLayout_weightSegments'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_weightBalancing__SWIG_0) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_weightBalancing. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->weightBalancing();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_weightBalancing__SWIG_1) {
  ogdf::OptimalHierarchyLayout *arg1 = (ogdf::OptimalHierarchyLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalHierarchyLayout_weightBalancing. Expected SWIGTYPE_p_ogdf__OptimalHierarchyLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->weightBalancing(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalHierarchyLayout_weightBalancing) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_OptimalHierarchyLayout_weightBalancing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalHierarchyLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_OptimalHierarchyLayout_weightBalancing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OptimalHierarchyLayout_weightBalancing'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalRanking_separateMultiEdges__SWIG_0) {
  ogdf::OptimalRanking *arg1 = (ogdf::OptimalRanking *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalRanking_separateMultiEdges. Expected SWIGTYPE_p_ogdf__OptimalRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->separateMultiEdges();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalRanking_separateMultiEdges__SWIG_1) {
  ogdf::OptimalRanking *arg1 = (ogdf::OptimalRanking *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalRanking_separateMultiEdges. Expected SWIGTYPE_p_ogdf__OptimalRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->separateMultiEdges(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalRanking_separateMultiEdges) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalRanking, 0) >= 0);
    }
    if (_v) {
      _wrap_OptimalRanking_separateMultiEdges__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__OptimalRanking, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_OptimalRanking_separateMultiEdges__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OptimalRanking_separateMultiEdges'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OptimalRanking_setSubgraph) {
  ogdf::OptimalRanking *arg1 = (ogdf::OptimalRanking *) 0 ;
  AcyclicSubgraphModule *arg2 = (AcyclicSubgraphModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OptimalRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OptimalRanking_setSubgraph. Expected SWIGTYPE_p_ogdf__OptimalRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_AcyclicSubgraphModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OptimalRanking_setSubgraph. Expected SWIGTYPE_p_AcyclicSubgraphModule");
    }
  }
  (arg1)->setSubgraph(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_separateDeg0Layer__SWIG_0) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_separateDeg0Layer. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->separateDeg0Layer();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_separateDeg0Layer__SWIG_1) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_separateDeg0Layer. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->separateDeg0Layer(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_separateDeg0Layer) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _wrap_LongestPathRanking_separateDeg0Layer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_LongestPathRanking_separateDeg0Layer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'LongestPathRanking_separateDeg0Layer'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_separateMultiEdges__SWIG_0) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_separateMultiEdges. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->separateMultiEdges();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_separateMultiEdges__SWIG_1) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_separateMultiEdges. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->separateMultiEdges(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_separateMultiEdges) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _wrap_LongestPathRanking_separateMultiEdges__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_LongestPathRanking_separateMultiEdges__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'LongestPathRanking_separateMultiEdges'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_optimizeEdgeLength__SWIG_0) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_optimizeEdgeLength. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->optimizeEdgeLength();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_optimizeEdgeLength__SWIG_1) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_optimizeEdgeLength. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->optimizeEdgeLength(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_optimizeEdgeLength) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _wrap_LongestPathRanking_optimizeEdgeLength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_LongestPathRanking_optimizeEdgeLength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'LongestPathRanking_optimizeEdgeLength'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_alignBaseClasses__SWIG_0) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_alignBaseClasses. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->alignBaseClasses();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_alignBaseClasses__SWIG_1) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_alignBaseClasses. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->alignBaseClasses(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_alignBaseClasses) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _wrap_LongestPathRanking_alignBaseClasses__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_LongestPathRanking_alignBaseClasses__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'LongestPathRanking_alignBaseClasses'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_alignSiblings__SWIG_0) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_alignSiblings. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->alignSiblings();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_alignSiblings__SWIG_1) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_alignSiblings. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->alignSiblings(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_alignSiblings) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _wrap_LongestPathRanking_alignSiblings__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__LongestPathRanking, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_LongestPathRanking_alignSiblings__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'LongestPathRanking_alignSiblings'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_LongestPathRanking_setSubgraph) {
  ogdf::LongestPathRanking *arg1 = (ogdf::LongestPathRanking *) 0 ;
  AcyclicSubgraphModule *arg2 = (AcyclicSubgraphModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__LongestPathRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongestPathRanking_setSubgraph. Expected SWIGTYPE_p_ogdf__LongestPathRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_AcyclicSubgraphModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of LongestPathRanking_setSubgraph. Expected SWIGTYPE_p_AcyclicSubgraphModule");
    }
  }
  (arg1)->setSubgraph(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CoffmanGrahamRanking_setSubgraph) {
  ogdf::CoffmanGrahamRanking *arg1 = (ogdf::CoffmanGrahamRanking *) 0 ;
  AcyclicSubgraphModule *arg2 = (AcyclicSubgraphModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CoffmanGrahamRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CoffmanGrahamRanking_setSubgraph. Expected SWIGTYPE_p_ogdf__CoffmanGrahamRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_AcyclicSubgraphModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CoffmanGrahamRanking_setSubgraph. Expected SWIGTYPE_p_AcyclicSubgraphModule");
    }
  }
  (arg1)->setSubgraph(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CoffmanGrahamRanking_width__SWIG_0) {
  ogdf::CoffmanGrahamRanking *arg1 = (ogdf::CoffmanGrahamRanking *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CoffmanGrahamRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CoffmanGrahamRanking_width. Expected SWIGTYPE_p_ogdf__CoffmanGrahamRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->width();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CoffmanGrahamRanking_width__SWIG_1) {
  ogdf::CoffmanGrahamRanking *arg1 = (ogdf::CoffmanGrahamRanking *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CoffmanGrahamRanking, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CoffmanGrahamRanking_width. Expected SWIGTYPE_p_ogdf__CoffmanGrahamRanking");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->width(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CoffmanGrahamRanking_width) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__CoffmanGrahamRanking, 0) >= 0);
    }
    if (_v) {
      _wrap_CoffmanGrahamRanking_width__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__CoffmanGrahamRanking, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_CoffmanGrahamRanking_width__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CoffmanGrahamRanking_width'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GlobalSifting_nRepeats__SWIG_0) {
  ogdf::GlobalSifting *arg1 = (ogdf::GlobalSifting *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GlobalSifting, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GlobalSifting_nRepeats. Expected SWIGTYPE_p_ogdf__GlobalSifting");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->nRepeats();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GlobalSifting_nRepeats__SWIG_1) {
  ogdf::GlobalSifting *arg1 = (ogdf::GlobalSifting *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GlobalSifting, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GlobalSifting_nRepeats. Expected SWIGTYPE_p_ogdf__GlobalSifting");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nRepeats(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GlobalSifting_nRepeats) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GlobalSifting, 0) >= 0);
    }
    if (_v) {
      _wrap_GlobalSifting_nRepeats__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GlobalSifting, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_GlobalSifting_nRepeats__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GlobalSifting_nRepeats'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GridSifting_verticalStepsBound__SWIG_0) {
  ogdf::GridSifting *arg1 = (ogdf::GridSifting *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GridSifting, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GridSifting_verticalStepsBound. Expected SWIGTYPE_p_ogdf__GridSifting");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->verticalStepsBound();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GridSifting_verticalStepsBound__SWIG_1) {
  ogdf::GridSifting *arg1 = (ogdf::GridSifting *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GridSifting, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GridSifting_verticalStepsBound. Expected SWIGTYPE_p_ogdf__GridSifting");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->verticalStepsBound(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GridSifting_verticalStepsBound) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GridSifting, 0) >= 0);
    }
    if (_v) {
      _wrap_GridSifting_verticalStepsBound__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GridSifting, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_GridSifting_verticalStepsBound__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GridSifting_verticalStepsBound'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FastPlanarSubgraph_runs) {
  ogdf::FastPlanarSubgraph *arg1 = (ogdf::FastPlanarSubgraph *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FastPlanarSubgraph, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastPlanarSubgraph_runs. Expected SWIGTYPE_p_ogdf__FastPlanarSubgraph");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->runs(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FixedEmbeddingInserter_removeReinsert) {
  ogdf::FixedEmbeddingInserter *arg1 = (ogdf::FixedEmbeddingInserter *) 0 ;
  ogdf::RemoveReinsertType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FixedEmbeddingInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FixedEmbeddingInserter_removeReinsert. Expected SWIGTYPE_p_ogdf__FixedEmbeddingInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::RemoveReinsertType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->removeReinsert(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FixedEmbeddingInserter_percentMostCrossed) {
  ogdf::FixedEmbeddingInserter *arg1 = (ogdf::FixedEmbeddingInserter *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FixedEmbeddingInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FixedEmbeddingInserter_percentMostCrossed. Expected SWIGTYPE_p_ogdf__FixedEmbeddingInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->percentMostCrossed(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FixedEmbeddingInserter_keepEmbedding) {
  ogdf::FixedEmbeddingInserter *arg1 = (ogdf::FixedEmbeddingInserter *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FixedEmbeddingInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FixedEmbeddingInserter_keepEmbedding. Expected SWIGTYPE_p_ogdf__FixedEmbeddingInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->keepEmbedding(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_VariableEmbeddingInserter_removeReinsert) {
  ogdf::VariableEmbeddingInserter *arg1 = (ogdf::VariableEmbeddingInserter *) 0 ;
  ogdf::RemoveReinsertType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__VariableEmbeddingInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of VariableEmbeddingInserter_removeReinsert. Expected SWIGTYPE_p_ogdf__VariableEmbeddingInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::RemoveReinsertType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->removeReinsert(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_VariableEmbeddingInserter_percentMostCrossed) {
  ogdf::VariableEmbeddingInserter *arg1 = (ogdf::VariableEmbeddingInserter *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__VariableEmbeddingInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of VariableEmbeddingInserter_percentMostCrossed. Expected SWIGTYPE_p_ogdf__VariableEmbeddingInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->percentMostCrossed(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MultiEdgeApproxInserter_removeReinsertFix) {
  ogdf::MultiEdgeApproxInserter *arg1 = (ogdf::MultiEdgeApproxInserter *) 0 ;
  ogdf::RemoveReinsertType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MultiEdgeApproxInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MultiEdgeApproxInserter_removeReinsertFix. Expected SWIGTYPE_p_ogdf__MultiEdgeApproxInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::RemoveReinsertType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->removeReinsertFix(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MultiEdgeApproxInserter_removeReinsertVar) {
  ogdf::MultiEdgeApproxInserter *arg1 = (ogdf::MultiEdgeApproxInserter *) 0 ;
  ogdf::RemoveReinsertType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MultiEdgeApproxInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MultiEdgeApproxInserter_removeReinsertVar. Expected SWIGTYPE_p_ogdf__MultiEdgeApproxInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::RemoveReinsertType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->removeReinsertVar(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MultiEdgeApproxInserter_percentMostCrossedFix) {
  ogdf::MultiEdgeApproxInserter *arg1 = (ogdf::MultiEdgeApproxInserter *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MultiEdgeApproxInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MultiEdgeApproxInserter_percentMostCrossedFix. Expected SWIGTYPE_p_ogdf__MultiEdgeApproxInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->percentMostCrossedFix(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MultiEdgeApproxInserter_percentMostCrossedVar) {
  ogdf::MultiEdgeApproxInserter *arg1 = (ogdf::MultiEdgeApproxInserter *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MultiEdgeApproxInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MultiEdgeApproxInserter_percentMostCrossedVar. Expected SWIGTYPE_p_ogdf__MultiEdgeApproxInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->percentMostCrossedVar(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MultiEdgeApproxInserter_statistics) {
  ogdf::MultiEdgeApproxInserter *arg1 = (ogdf::MultiEdgeApproxInserter *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__MultiEdgeApproxInserter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MultiEdgeApproxInserter_statistics. Expected SWIGTYPE_p_ogdf__MultiEdgeApproxInserter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->statistics(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_VariableEmbeddingInserterDyn_removeReinsert) {
  ogdf::VariableEmbeddingInserterDyn *arg1 = (ogdf::VariableEmbeddingInserterDyn *) 0 ;
  ogdf::RemoveReinsertType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__VariableEmbeddingInserterDyn, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of VariableEmbeddingInserterDyn_removeReinsert. Expected SWIGTYPE_p_ogdf__VariableEmbeddingInserterDyn");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::RemoveReinsertType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->removeReinsert(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_VariableEmbeddingInserterDyn_percentMostCrossed) {
  ogdf::VariableEmbeddingInserterDyn *arg1 = (ogdf::VariableEmbeddingInserterDyn *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__VariableEmbeddingInserterDyn, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of VariableEmbeddingInserterDyn_percentMostCrossed. Expected SWIGTYPE_p_ogdf__VariableEmbeddingInserterDyn");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->percentMostCrossed(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OrthoLayout_separation) {
  ogdf::OrthoLayout *arg1 = (ogdf::OrthoLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OrthoLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OrthoLayout_separation. Expected SWIGTYPE_p_ogdf__OrthoLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->separation(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OrthoLayout_cOverhang) {
  ogdf::OrthoLayout *arg1 = (ogdf::OrthoLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OrthoLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OrthoLayout_cOverhang. Expected SWIGTYPE_p_ogdf__OrthoLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->cOverhang(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OrthoLayout_margin) {
  ogdf::OrthoLayout *arg1 = (ogdf::OrthoLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OrthoLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OrthoLayout_margin. Expected SWIGTYPE_p_ogdf__OrthoLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->margin(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OrthoLayout_progressive) {
  ogdf::OrthoLayout *arg1 = (ogdf::OrthoLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OrthoLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OrthoLayout_progressive. Expected SWIGTYPE_p_ogdf__OrthoLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->progressive(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OrthoLayout_scaling) {
  ogdf::OrthoLayout *arg1 = (ogdf::OrthoLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OrthoLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OrthoLayout_scaling. Expected SWIGTYPE_p_ogdf__OrthoLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->scaling(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_OrthoLayout_bendBound) {
  ogdf::OrthoLayout *arg1 = (ogdf::OrthoLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__OrthoLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OrthoLayout_bendBound. Expected SWIGTYPE_p_ogdf__OrthoLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->bendBound(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_intToStrokeType) {
  int arg1 ;
  zval **args[1];
  ogdf::StrokeType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (ogdf::StrokeType)ogdf::intToStrokeType(arg1);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_intToFillPattern) {
  int arg1 ;
  zval **args[1];
  ogdf::FillPattern result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (ogdf::FillPattern)ogdf::intToFillPattern(arg1);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Color__SWIG_0) {
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::Color *)new ogdf::Color();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Color__SWIG_1) {
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  zval **args[4];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (uint8_t) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uint8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uint8_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (uint8_t) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (ogdf::Color *)new ogdf::Color(arg1,arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Color__SWIG_2) {
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  zval **args[3];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (uint8_t) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uint8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uint8_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (ogdf::Color *)new ogdf::Color(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Color__SWIG_3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  zval **args[4];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (ogdf::Color *)new ogdf::Color(arg1,arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Color__SWIG_4) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (ogdf::Color *)new ogdf::Color(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Color__SWIG_5) {
  std::string *arg1 = 0 ;
  std::string temp1 ;
  zval **args[1];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  arg1 = &temp1;
  
  result = (ogdf::Color *)new ogdf::Color((std::string const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 1);
  
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Color) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_Color__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _wrap_new_Color__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_new_Color__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_new_Color__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_new_Color__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_new_Color__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Color'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Color(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::Color *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__Color TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::Color resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_red__SWIG_0) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  zval **args[1];
  uint8_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_red. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->red();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_green__SWIG_0) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  zval **args[1];
  uint8_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_green. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->green();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_blue__SWIG_0) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  zval **args[1];
  uint8_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_blue. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->blue();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_alpha__SWIG_0) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  zval **args[1];
  uint8_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_alpha. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->alpha();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_red__SWIG_1) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  uint8_t arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_red. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uint8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->red(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_red) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _wrap_Color_red__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Color_red__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Color_red'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_green__SWIG_1) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  uint8_t arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_green. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uint8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->green(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_green) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _wrap_Color_green__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Color_green__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Color_green'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_blue__SWIG_1) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  uint8_t arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_blue. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uint8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->blue(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_blue) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _wrap_Color_blue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Color_blue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Color_blue'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_alpha__SWIG_1) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  uint8_t arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_alpha. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uint8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->alpha(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_alpha) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _wrap_Color_alpha__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Color_alpha__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Color_alpha'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_toString) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  zval **args[1];
  std::string result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_toString. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->toString();
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color_fromString) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color_fromString. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  result = (bool)(arg1)->fromString((std::string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Color___notequals__) {
  ogdf::Color *arg1 = (ogdf::Color *) 0 ;
  ogdf::Color *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Color___notequals__. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Color, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Color___notequals__. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  result = (bool)(arg1)->operator ==((ogdf::Color const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_color_set) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  ogdf::Color *arg2 = (ogdf::Color *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_color_set. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Stroke_m_color_set. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if (arg1) (arg1)->m_color = *arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_color_get) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  zval **args[1];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_color_get. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Color *)& ((arg1)->m_color);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_width_set) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  float arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_width_set. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (float) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->m_width = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_width_get) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  zval **args[1];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_width_get. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (float) ((arg1)->m_width);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_type_set) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  ogdf::StrokeType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_type_set. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::StrokeType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->m_type = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_type_get) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  zval **args[1];
  ogdf::StrokeType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_type_get. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::StrokeType) ((arg1)->m_type);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_cap_set) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  ogdf::StrokeLineCap arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_cap_set. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::StrokeLineCap) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->m_cap = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_cap_get) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  zval **args[1];
  ogdf::StrokeLineCap result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_cap_get. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::StrokeLineCap) ((arg1)->m_cap);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_join_set) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  ogdf::StrokeLineJoin arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_join_set. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::StrokeLineJoin) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->m_join = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Stroke_m_join_get) {
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  zval **args[1];
  ogdf::StrokeLineJoin result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Stroke, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Stroke_m_join_get. Expected SWIGTYPE_p_ogdf__Stroke");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::StrokeLineJoin) ((arg1)->m_join);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Stroke__SWIG_0) {
  ogdf::Stroke *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::Stroke *)new ogdf::Stroke();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Stroke, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Stroke__SWIG_1) {
  ogdf::Color arg1 ;
  ogdf::Color *tmp1 ;
  zval **args[1];
  ogdf::Stroke *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_Stroke. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg1 = *tmp1;
  }
  result = (ogdf::Stroke *)new ogdf::Stroke(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Stroke, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Stroke) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_Stroke__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _wrap_new_Stroke__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Stroke'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Stroke(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::Stroke *arg1 = (ogdf::Stroke *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::Stroke *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__Stroke TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::Stroke resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Fill_m_color_set) {
  ogdf::Fill *arg1 = (ogdf::Fill *) 0 ;
  ogdf::Color *arg2 = (ogdf::Color *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Fill, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Fill_m_color_set. Expected SWIGTYPE_p_ogdf__Fill");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Fill_m_color_set. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if (arg1) (arg1)->m_color = *arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Fill_m_color_get) {
  ogdf::Fill *arg1 = (ogdf::Fill *) 0 ;
  zval **args[1];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Fill, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Fill_m_color_get. Expected SWIGTYPE_p_ogdf__Fill");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Color *)& ((arg1)->m_color);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Fill_m_bgColor_set) {
  ogdf::Fill *arg1 = (ogdf::Fill *) 0 ;
  ogdf::Color *arg2 = (ogdf::Color *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Fill, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Fill_m_bgColor_set. Expected SWIGTYPE_p_ogdf__Fill");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Color, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Fill_m_bgColor_set. Expected SWIGTYPE_p_ogdf__Color");
    }
  }
  if (arg1) (arg1)->m_bgColor = *arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Fill_m_bgColor_get) {
  ogdf::Fill *arg1 = (ogdf::Fill *) 0 ;
  zval **args[1];
  ogdf::Color *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Fill, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Fill_m_bgColor_get. Expected SWIGTYPE_p_ogdf__Fill");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Color *)& ((arg1)->m_bgColor);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Color, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Fill_m_pattern_set) {
  ogdf::Fill *arg1 = (ogdf::Fill *) 0 ;
  ogdf::FillPattern arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Fill, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Fill_m_pattern_set. Expected SWIGTYPE_p_ogdf__Fill");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FillPattern) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->m_pattern = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Fill_m_pattern_get) {
  ogdf::Fill *arg1 = (ogdf::Fill *) 0 ;
  zval **args[1];
  ogdf::FillPattern result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Fill, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Fill_m_pattern_get. Expected SWIGTYPE_p_ogdf__Fill");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FillPattern) ((arg1)->m_pattern);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Fill__SWIG_0) {
  ogdf::Fill *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::Fill *)new ogdf::Fill();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Fill, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Fill__SWIG_1) {
  ogdf::Color arg1 ;
  ogdf::Color *tmp1 ;
  zval **args[1];
  ogdf::Fill *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_Fill. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg1 = *tmp1;
  }
  result = (ogdf::Fill *)new ogdf::Fill(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Fill, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Fill__SWIG_2) {
  ogdf::Color arg1 ;
  ogdf::FillPattern arg2 ;
  ogdf::Color *tmp1 ;
  zval **args[2];
  ogdf::Fill *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_Fill. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg1 = *tmp1;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FillPattern) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (ogdf::Fill *)new ogdf::Fill(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Fill, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Fill__SWIG_3) {
  ogdf::Color arg1 ;
  ogdf::Color arg2 ;
  ogdf::FillPattern arg3 ;
  ogdf::Color *tmp1 ;
  ogdf::Color *tmp2 ;
  zval **args[3];
  ogdf::Fill *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_Fill. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg1 = *tmp1;
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_Fill. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg2 = *tmp2;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::FillPattern) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (ogdf::Fill *)new ogdf::Fill(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Fill, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Fill) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_Fill__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _wrap_new_Fill__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_new_Fill__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_new_Fill__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Fill'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_GraphAttributes__SWIG_0) {
  ogdf::GraphAttributes *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::GraphAttributes *)new ogdf::GraphAttributes();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__GraphAttributes, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_GraphAttributes(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::GraphAttributes *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__GraphAttributes TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::GraphAttributes resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_GraphAttributes__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  long arg2 ;
  zval **args[2];
  ogdf::GraphAttributes *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_GraphAttributes. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (ogdf::GraphAttributes *)new ogdf::GraphAttributes((ogdf::Graph const &)*arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__GraphAttributes, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_GraphAttributes__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  zval **args[1];
  ogdf::GraphAttributes *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_GraphAttributes. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  result = (ogdf::GraphAttributes *)new ogdf::GraphAttributes((ogdf::Graph const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__GraphAttributes, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_GraphAttributes) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_GraphAttributes__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _wrap_new_GraphAttributes__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_new_GraphAttributes__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_GraphAttributes'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_attributes) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  zval **args[1];
  long result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_attributes. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (long)(arg1)->attributes();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_init) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::Graph *arg2 = 0 ;
  long arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_init. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_init. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->init((ogdf::Graph const &)*arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_initAttributes) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  long arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_initAttributes. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->initAttributes(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_destroyAttributes) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  long arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_destroyAttributes. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->destroyAttributes(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_constGraph) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  zval **args[1];
  ogdf::Graph *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_constGraph. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::Graph *) &(arg1)->constGraph();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__Graph, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_directed) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_directed. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->directed();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setDirected) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setDirected. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setDirected(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_x) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_x. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_x. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (double)ogdf_GraphAttributes_x(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setX) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  double arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setX. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setX. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setX(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_y) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_y. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_y. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (double)ogdf_GraphAttributes_y(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setY) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  double arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setY. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setY. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setY(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_z) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_z. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_z. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (double)ogdf_GraphAttributes_z(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setZ) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  double arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setZ. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setZ. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setZ(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_height) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_height. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_height. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (double)ogdf_GraphAttributes_height(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setHeight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  double arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setHeight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setHeight. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setHeight(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_width) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_width. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_width. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (double)ogdf_GraphAttributes_width(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setWidth) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  double arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setWidth. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setWidth. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setWidth(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_shape) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::Shape result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_shape. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_shape. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::Shape)ogdf_GraphAttributes_shape(arg1,arg2);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setShape) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::Shape arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setShape. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setShape. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::Shape) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setShape(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeType__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::StrokeType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_strokeType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_strokeType. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::StrokeType)(arg1)->strokeType(arg2);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeType__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::StrokeType arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setStrokeType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setStrokeType. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::StrokeType) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->setStrokeType(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeColor__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::Color result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_strokeColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_strokeColor. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = ogdf_GraphAttributes_strokeColor__SWIG_0(arg1,arg2);
  {
    ogdf::Color * resultobj = new ogdf::Color((const ogdf::Color &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__Color, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeColor__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::Color arg3 ;
  ogdf::Color *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setStrokeColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setStrokeColor. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphAttributes_setStrokeColor. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg3 = *tmp3;
  }
  ogdf_GraphAttributes_setStrokeColor__SWIG_0(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeWidth__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_strokeWidth. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_strokeWidth. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (float)ogdf_GraphAttributes_strokeWidth__SWIG_0(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeWidth__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  float arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setStrokeWidth. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setStrokeWidth. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (float) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setStrokeWidth__SWIG_0(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_fillPattern) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::FillPattern result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_fillPattern. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_fillPattern. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::FillPattern)(arg1)->fillPattern(arg2);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setFillPattern) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::FillPattern arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setFillPattern. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setFillPattern. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::FillPattern) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->setFillPattern(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_fillColor) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::Color result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_fillColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_fillColor. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = ogdf_GraphAttributes_fillColor(arg1,arg2);
  {
    ogdf::Color * resultobj = new ogdf::Color((const ogdf::Color &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__Color, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setFillColor) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::Color arg3 ;
  ogdf::Color *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setFillColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setFillColor. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphAttributes_setFillColor. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg3 = *tmp3;
  }
  ogdf_GraphAttributes_setFillColor(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_fillBgColor) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::Color result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_fillBgColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_fillBgColor. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = ogdf_GraphAttributes_fillBgColor(arg1,arg2);
  {
    ogdf::Color * resultobj = new ogdf::Color((const ogdf::Color &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__Color, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setFillBgColor) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::Color arg3 ;
  ogdf::Color *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setFillBgColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setFillBgColor. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphAttributes_setFillBgColor. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg3 = *tmp3;
  }
  ogdf_GraphAttributes_setFillBgColor(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_label__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_label. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_label. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = ogdf_GraphAttributes_label__SWIG_0(arg1,arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setLabel__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  std::string arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setLabel. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setLabel. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  ogdf_GraphAttributes_setLabel__SWIG_0(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_templateNode) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_templateNode. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_templateNode. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = ogdf_GraphAttributes_templateNode(arg1,arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setTemplateNode) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  std::string arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setTemplateNode. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setTemplateNode. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  ogdf_GraphAttributes_setTemplateNode(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_weight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_weight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_weight. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (int)ogdf_GraphAttributes_weight(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setWeight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setWeight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setWeight. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setWeight(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes__type__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  ogdf::Graph::NodeType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes__type. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes__type. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (ogdf::Graph::NodeType)ogdf_GraphAttributes__type__SWIG_0(arg1,arg2);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setType__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  ogdf::Graph::NodeType arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setType. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::Graph::NodeType) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setType__SWIG_0(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_idNode) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_idNode. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_idNode. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (int)ogdf_GraphAttributes_idNode(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setIdNode) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setIdNode. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setIdNode. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setIdNode(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_bends) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  DPolyline result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_bends. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_bends. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = ogdf_GraphAttributes_bends(arg1,arg2);
  {
    DPolyline * resultobj = new DPolyline((const DPolyline &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_DPolyline, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setBends) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  DPolyline arg3 ;
  DPolyline *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setBends. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setBends. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_DPolyline, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphAttributes_setBends. Expected SWIGTYPE_p_DPolyline");
    }
    arg3 = *tmp3;
  }
  ogdf_GraphAttributes_setBends(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_arrowType) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  ogdf::EdgeArrow result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_arrowType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_arrowType. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (ogdf::EdgeArrow)ogdf_GraphAttributes_arrowType(arg1,arg2);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setArrowType) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::EdgeArrow arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setArrowType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setArrowType. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::EdgeArrow) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setArrowType(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeType__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  ogdf::StrokeType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_strokeType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_strokeType. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (ogdf::StrokeType)(arg1)->strokeType(arg2);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeType) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_strokeType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_strokeType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_strokeType'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeType__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::StrokeType arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setStrokeType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setStrokeType. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::StrokeType) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->setStrokeType(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeType) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_GraphAttributes_setStrokeType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_GraphAttributes_setStrokeType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_setStrokeType'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeColor__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  ogdf::Color result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_strokeColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_strokeColor. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = ogdf_GraphAttributes_strokeColor__SWIG_1(arg1,arg2);
  {
    ogdf::Color * resultobj = new ogdf::Color((const ogdf::Color &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_ogdf__Color, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeColor) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_strokeColor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_strokeColor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_strokeColor'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeColor__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::Color arg3 ;
  ogdf::Color *tmp3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setStrokeColor. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setStrokeColor. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_ogdf__Color, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphAttributes_setStrokeColor. Expected SWIGTYPE_p_ogdf__Color");
    }
    arg3 = *tmp3;
  }
  ogdf_GraphAttributes_setStrokeColor__SWIG_1(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeColor) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphAttributes_setStrokeColor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_ogdf__Color, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphAttributes_setStrokeColor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_setStrokeColor'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeWidth__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_strokeWidth. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_strokeWidth. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (float)ogdf_GraphAttributes_strokeWidth__SWIG_1(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_strokeWidth) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_strokeWidth__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_strokeWidth__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_strokeWidth'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeWidth__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  float arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setStrokeWidth. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setStrokeWidth. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (float) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setStrokeWidth__SWIG_1(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setStrokeWidth) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE); 
        if (_v) {
          _wrap_GraphAttributes_setStrokeWidth__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE); 
        if (_v) {
          _wrap_GraphAttributes_setStrokeWidth__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_setStrokeWidth'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_label__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_label. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_label. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = ogdf_GraphAttributes_label__SWIG_1(arg1,arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_label) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_label__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_label__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_label'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setLabel__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  std::string arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setLabel. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setLabel. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  ogdf_GraphAttributes_setLabel__SWIG_1(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setLabel) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_GraphAttributes_setLabel__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_GraphAttributes_setLabel__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_setLabel'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_intWeight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_intWeight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_intWeight. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (int)ogdf_GraphAttributes_intWeight(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setIntWeight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setIntWeight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setIntWeight. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setIntWeight(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_doubleWeight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_doubleWeight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_doubleWeight. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (double)ogdf_GraphAttributes_doubleWeight(arg1,arg2);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setDoubleWeight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  double arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setDoubleWeight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setDoubleWeight. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setDoubleWeight(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes__type__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  ogdf::Graph::EdgeType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes__type. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes__type. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (ogdf::Graph::EdgeType)ogdf_GraphAttributes__type__SWIG_1(arg1,arg2);
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes__type) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes__type__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes__type__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes__type'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setType__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  ogdf::Graph::EdgeType arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setType. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setType. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ogdf::Graph::EdgeType) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setType__SWIG_1(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setType) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__NodeElement, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_GraphAttributes_setType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeElement, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_GraphAttributes_setType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_setType'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_subGraphBits) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  zval **args[2];
  uint32_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_subGraphBits. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_subGraphBits. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  result = (uint32_t)ogdf_GraphAttributes_subGraphBits(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setSubGraphBits) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  uint32_t arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setSubGraphBits. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_setSubGraphBits. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uint32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  ogdf_GraphAttributes_setSubGraphBits(arg1,arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_inSubGraph) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  int arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_inSubGraph. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_inSubGraph. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->inSubGraph(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_addSubGraph) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_addSubGraph. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_addSubGraph. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->addSubGraph(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_removeSubGraph) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::EdgeElement *arg2 = (ogdf::EdgeElement *) 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_removeSubGraph. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EdgeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_removeSubGraph. Expected SWIGTYPE_p_ogdf__EdgeElement");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->removeSubGraph(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_boundingBox) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  zval **args[1];
  DRect result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_boundingBox. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->boundingBox();
  {
    DRect * resultobj = new DRect((const DRect &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_DRect, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setAllWidth) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setAllWidth. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setAllWidth(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_setAllHeight) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_setAllHeight. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setAllHeight(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_clearAllBends) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_clearAllBends. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clearAllBends();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_removeUnnecessaryBendsHV) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_removeUnnecessaryBendsHV. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->removeUnnecessaryBendsHV();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_addNodeCenter2Bends__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_addNodeCenter2Bends. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->addNodeCenter2Bends(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_addNodeCenter2Bends__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_addNodeCenter2Bends. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->addNodeCenter2Bends();
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_addNodeCenter2Bends) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _wrap_GraphAttributes_addNodeCenter2Bends__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_GraphAttributes_addNodeCenter2Bends__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_addNodeCenter2Bends'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_isAssociationClass) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::NodeElement *arg2 = (ogdf::NodeElement *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_isAssociationClass. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__NodeElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_isAssociationClass. Expected SWIGTYPE_p_ogdf__NodeElement");
    }
  }
  result = (bool)(arg1)->isAssociationClass(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_hierarchyList__SWIG_0) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::List< ogdf::List< node > * > *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_hierarchyList. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_ogdf__ListT_node_t_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_hierarchyList. Expected SWIGTYPE_p_ogdf__ListT_ogdf__ListT_node_t_p_t");
    }
  }
  result = (int)(arg1)->hierarchyList(*arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_hierarchyList__SWIG_1) {
  ogdf::GraphAttributes *arg1 = (ogdf::GraphAttributes *) 0 ;
  ogdf::List< ogdf::List< edge > * > *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphAttributes_hierarchyList. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_ogdf__ListT_edge_t_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphAttributes_hierarchyList. Expected SWIGTYPE_p_ogdf__ListT_ogdf__ListT_edge_t_p_t");
    }
  }
  result = (int)(arg1)->hierarchyList(*arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphAttributes_hierarchyList) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_ogdf__ListT_node_t_p_t, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_hierarchyList__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_ogdf__ListT_edge_t_p_t, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphAttributes_hierarchyList__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphAttributes_hierarchyList'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_GEMLayout__SWIG_0) {
  ogdf::GEMLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::GEMLayout *)new ogdf::GEMLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__GEMLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_GEMLayout__SWIG_1) {
  ogdf::GEMLayout *arg1 = 0 ;
  zval **args[1];
  ogdf::GEMLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_GEMLayout. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  result = (ogdf::GEMLayout *)new ogdf::GEMLayout((ogdf::GEMLayout const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__GEMLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_GEMLayout) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_GEMLayout__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_new_GEMLayout__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_GEMLayout'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_call) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_call. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GEMLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_numberOfRounds__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_numberOfRounds. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->numberOfRounds();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_numberOfRounds__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_numberOfRounds. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->numberOfRounds(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_numberOfRounds) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_numberOfRounds__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_GEMLayout_numberOfRounds__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_numberOfRounds'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_minimalTemperature__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_minimalTemperature. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->minimalTemperature();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_minimalTemperature__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_minimalTemperature. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minimalTemperature(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_minimalTemperature) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_minimalTemperature__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_minimalTemperature__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_minimalTemperature'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_initialTemperature__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_initialTemperature. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->initialTemperature();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_initialTemperature__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_initialTemperature. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->initialTemperature(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_initialTemperature) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_initialTemperature__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_initialTemperature__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_initialTemperature'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_gravitationalConstant__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_gravitationalConstant. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->gravitationalConstant();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_gravitationalConstant__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_gravitationalConstant. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->gravitationalConstant(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_gravitationalConstant) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_gravitationalConstant__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_gravitationalConstant__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_gravitationalConstant'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_desiredLength__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_desiredLength. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->desiredLength();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_desiredLength__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_desiredLength. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->desiredLength(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_desiredLength) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_desiredLength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_desiredLength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_desiredLength'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_maximalDisturbance__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_maximalDisturbance. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->maximalDisturbance();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_maximalDisturbance__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_maximalDisturbance. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->maximalDisturbance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_maximalDisturbance) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_maximalDisturbance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_maximalDisturbance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_maximalDisturbance'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_rotationAngle__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_rotationAngle. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->rotationAngle();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_rotationAngle__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_rotationAngle. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->rotationAngle(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_rotationAngle) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_rotationAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_rotationAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_rotationAngle'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_oscillationAngle__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_oscillationAngle. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->oscillationAngle();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_oscillationAngle__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_oscillationAngle. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->oscillationAngle(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_oscillationAngle) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_oscillationAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_oscillationAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_oscillationAngle'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_rotationSensitivity__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_rotationSensitivity. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->rotationSensitivity();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_rotationSensitivity__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_rotationSensitivity. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->rotationSensitivity(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_rotationSensitivity) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_rotationSensitivity__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_rotationSensitivity__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_rotationSensitivity'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_oscillationSensitivity__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_oscillationSensitivity. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->oscillationSensitivity();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_oscillationSensitivity__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_oscillationSensitivity. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->oscillationSensitivity(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_oscillationSensitivity) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_oscillationSensitivity__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_oscillationSensitivity__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_oscillationSensitivity'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_attractionFormula__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_attractionFormula. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->attractionFormula();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_attractionFormula__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_attractionFormula. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->attractionFormula(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_attractionFormula) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_attractionFormula__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_GEMLayout_attractionFormula__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_attractionFormula'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_minDistCC__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_minDistCC. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->minDistCC();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_minDistCC__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_minDistCC. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minDistCC(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_minDistCC) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_minDistCC__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_minDistCC__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_minDistCC'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_pageRatio__SWIG_0) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_pageRatio. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->pageRatio();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_pageRatio__SWIG_1) {
  ogdf::GEMLayout *arg1 = (ogdf::GEMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GEMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GEMLayout_pageRatio. Expected SWIGTYPE_p_ogdf__GEMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->pageRatio(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GEMLayout_pageRatio) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_GEMLayout_pageRatio__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GEMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_GEMLayout_pageRatio__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GEMLayout_pageRatio'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FMMMLayout) {
  ogdf::FMMMLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::FMMMLayout *)new ogdf::FMMMLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__FMMMLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_call__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_call__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ClusterGraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FMMMLayout_call. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_call__SWIG_2) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  GraphConstraints *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_GraphConstraints, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FMMMLayout_call. Expected SWIGTYPE_p_GraphConstraints");
    }
  }
  (arg1)->call(*arg2,*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_call__SWIG_3) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  ogdf::EdgeArray< double > *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  (arg1)->call(*arg2,(ogdf::EdgeArray< double > const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_call__SWIG_4) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  (arg1)->call(*arg2,arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_call__SWIG_5) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  ogdf::EdgeArray< double > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FMMMLayout_call. Expected SWIGTYPE_p_ogdf__EdgeArrayT_double_t");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  (arg1)->call(*arg2,(ogdf::EdgeArray< double > const &)*arg3,arg4);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_call) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
      }
      if (_v) {
        _wrap_FMMMLayout_call__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
      }
      if (_v) {
        _wrap_FMMMLayout_call__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_GraphConstraints, 0) >= 0);
        }
        if (_v) {
          _wrap_FMMMLayout_call__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) >= 0);
        }
        if (_v) {
          _wrap_FMMMLayout_call__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_FMMMLayout_call__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__EdgeArrayT_double_t, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_FMMMLayout_call__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_call'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_getCpuTime) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_getCpuTime. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->getCpuTime();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_useHighLevelOptions__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_useHighLevelOptions. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->useHighLevelOptions();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_useHighLevelOptions__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_useHighLevelOptions. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->useHighLevelOptions(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_useHighLevelOptions) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_useHighLevelOptions__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FMMMLayout_useHighLevelOptions__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_useHighLevelOptions'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_setSingleLevel) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_setSingleLevel. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setSingleLevel(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_pageFormat__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::PageFormatType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_pageFormat. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::PageFormatType)(arg1)->pageFormat();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_pageFormat__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::PageFormatType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_pageFormat. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::PageFormatType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->pageFormat(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_pageFormat) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_pageFormat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_pageFormat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_pageFormat'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_unitEdgeLength__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_unitEdgeLength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->unitEdgeLength();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_unitEdgeLength__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_unitEdgeLength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->unitEdgeLength(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_unitEdgeLength) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_unitEdgeLength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_unitEdgeLength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_unitEdgeLength'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_newInitialPlacement__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_newInitialPlacement. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->newInitialPlacement();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_newInitialPlacement__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_newInitialPlacement. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->newInitialPlacement(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_newInitialPlacement) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_newInitialPlacement__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FMMMLayout_newInitialPlacement__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_newInitialPlacement'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_qualityVersusSpeed__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::QualityVsSpeed result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_qualityVersusSpeed. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::QualityVsSpeed)(arg1)->qualityVersusSpeed();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_qualityVersusSpeed__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::QualityVsSpeed arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_qualityVersusSpeed. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::QualityVsSpeed) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->qualityVersusSpeed(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_qualityVersusSpeed) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_qualityVersusSpeed__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_qualityVersusSpeed__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_qualityVersusSpeed'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_randSeed__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_randSeed. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->randSeed(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_randSeed__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_randSeed. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->randSeed();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_randSeed) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_randSeed__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_randSeed__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_randSeed'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_edgeLengthMeasurement__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::EdgeLengthMeasurement result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_edgeLengthMeasurement. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::EdgeLengthMeasurement)(arg1)->edgeLengthMeasurement();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_edgeLengthMeasurement__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::EdgeLengthMeasurement arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_edgeLengthMeasurement. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::EdgeLengthMeasurement) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->edgeLengthMeasurement(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_edgeLengthMeasurement) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_edgeLengthMeasurement__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_edgeLengthMeasurement__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_edgeLengthMeasurement'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_allowedPositions__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::AllowedPositions result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_allowedPositions. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::AllowedPositions)(arg1)->allowedPositions();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_allowedPositions__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::AllowedPositions arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_allowedPositions. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::AllowedPositions) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->allowedPositions(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_allowedPositions) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_allowedPositions__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_allowedPositions__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_allowedPositions'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIntPosExponent__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_maxIntPosExponent. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->maxIntPosExponent();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIntPosExponent__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_maxIntPosExponent. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->maxIntPosExponent(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIntPosExponent) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_maxIntPosExponent__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_maxIntPosExponent__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_maxIntPosExponent'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_pageRatio__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_pageRatio. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->pageRatio();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_pageRatio__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_pageRatio. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->pageRatio(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_pageRatio) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_pageRatio__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_pageRatio__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_pageRatio'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_stepsForRotatingComponents__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_stepsForRotatingComponents. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->stepsForRotatingComponents();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_stepsForRotatingComponents__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_stepsForRotatingComponents. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->stepsForRotatingComponents(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_stepsForRotatingComponents) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_stepsForRotatingComponents__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_stepsForRotatingComponents__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_stepsForRotatingComponents'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_tipOverCCs__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::TipOver result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_tipOverCCs. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::TipOver)(arg1)->tipOverCCs();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_tipOverCCs__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::TipOver arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_tipOverCCs. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::TipOver) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->tipOverCCs(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_tipOverCCs) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_tipOverCCs__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_tipOverCCs__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_tipOverCCs'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_minDistCC__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_minDistCC. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->minDistCC();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_minDistCC__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_minDistCC. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minDistCC(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_minDistCC) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_minDistCC__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_minDistCC__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_minDistCC'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_presortCCs__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::PreSort result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_presortCCs. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::PreSort)(arg1)->presortCCs();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_presortCCs__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::PreSort arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_presortCCs. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::PreSort) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->presortCCs(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_presortCCs) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_presortCCs__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_presortCCs__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_presortCCs'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_minGraphSize__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_minGraphSize. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->minGraphSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_minGraphSize__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_minGraphSize. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minGraphSize(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_minGraphSize) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_minGraphSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_minGraphSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_minGraphSize'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_galaxyChoice__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::GalaxyChoice result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_galaxyChoice. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::GalaxyChoice)(arg1)->galaxyChoice();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_galaxyChoice__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::GalaxyChoice arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_galaxyChoice. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::GalaxyChoice) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->galaxyChoice(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_galaxyChoice) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_galaxyChoice__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_galaxyChoice__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_galaxyChoice'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_randomTries__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_randomTries. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->randomTries();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_randomTries__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_randomTries. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->randomTries(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_randomTries) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_randomTries__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_randomTries__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_randomTries'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIterChange__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::MaxIterChange result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_maxIterChange. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::MaxIterChange)(arg1)->maxIterChange();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIterChange__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::MaxIterChange arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_maxIterChange. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::MaxIterChange) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->maxIterChange(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIterChange) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_maxIterChange__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_maxIterChange__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_maxIterChange'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIterFactor__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_maxIterFactor. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->maxIterFactor();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIterFactor__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_maxIterFactor. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->maxIterFactor(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_maxIterFactor) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_maxIterFactor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_maxIterFactor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_maxIterFactor'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_initialPlacementMult__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::InitialPlacementMult result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_initialPlacementMult. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::InitialPlacementMult)(arg1)->initialPlacementMult();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_initialPlacementMult__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::InitialPlacementMult arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_initialPlacementMult. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::InitialPlacementMult) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->initialPlacementMult(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_initialPlacementMult) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_initialPlacementMult__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_initialPlacementMult__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_initialPlacementMult'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_forceModel__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::ForceModel result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_forceModel. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::ForceModel)(arg1)->forceModel();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_forceModel__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::ForceModel arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_forceModel. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::ForceModel) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->forceModel(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_forceModel) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_forceModel__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_forceModel__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_forceModel'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_springStrength__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_springStrength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->springStrength();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_springStrength__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_springStrength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->springStrength(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_springStrength) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_springStrength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_springStrength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_springStrength'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_repForcesStrength__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_repForcesStrength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->repForcesStrength();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_repForcesStrength__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_repForcesStrength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->repForcesStrength(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_repForcesStrength) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_repForcesStrength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_repForcesStrength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_repForcesStrength'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_repulsiveForcesCalculation__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::RepulsiveForcesMethod result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_repulsiveForcesCalculation. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::RepulsiveForcesMethod)(arg1)->repulsiveForcesCalculation();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_repulsiveForcesCalculation__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::RepulsiveForcesMethod arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_repulsiveForcesCalculation. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::RepulsiveForcesMethod) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->repulsiveForcesCalculation(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_repulsiveForcesCalculation) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_repulsiveForcesCalculation__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_repulsiveForcesCalculation__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_repulsiveForcesCalculation'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_stopCriterion__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::StopCriterion result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_stopCriterion. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::StopCriterion)(arg1)->stopCriterion();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_stopCriterion__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::StopCriterion arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_stopCriterion. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::StopCriterion) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->stopCriterion(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_stopCriterion) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_stopCriterion__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_stopCriterion__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_stopCriterion'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_threshold__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_threshold. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->threshold();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_threshold__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_threshold. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->threshold(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_threshold) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_threshold__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_threshold__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_threshold'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fixedIterations__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_fixedIterations. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->fixedIterations();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fixedIterations__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_fixedIterations. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fixedIterations(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fixedIterations) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_fixedIterations__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_fixedIterations__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_fixedIterations'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_forceScalingFactor__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_forceScalingFactor. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->forceScalingFactor();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_forceScalingFactor__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_forceScalingFactor. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->forceScalingFactor(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_forceScalingFactor) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_forceScalingFactor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_forceScalingFactor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_forceScalingFactor'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_coolTemperature__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_coolTemperature. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->coolTemperature();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_coolTemperature__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_coolTemperature. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->coolTemperature(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_coolTemperature) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_coolTemperature__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FMMMLayout_coolTemperature__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_coolTemperature'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_coolValue__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_coolValue. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->coolValue();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_coolValue__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_coolValue. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->coolValue(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_coolValue) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_coolValue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_coolValue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_coolValue'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_initialPlacementForces__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::InitialPlacementForces result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_initialPlacementForces. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::InitialPlacementForces)(arg1)->initialPlacementForces();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_initialPlacementForces__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::InitialPlacementForces arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_initialPlacementForces. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::InitialPlacementForces) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->initialPlacementForces(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_initialPlacementForces) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_initialPlacementForces__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_initialPlacementForces__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_initialPlacementForces'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_resizeDrawing__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_resizeDrawing. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->resizeDrawing();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_resizeDrawing__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_resizeDrawing. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->resizeDrawing(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_resizeDrawing) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_resizeDrawing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FMMMLayout_resizeDrawing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_resizeDrawing'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_resizingScalar__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_resizingScalar. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->resizingScalar();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_resizingScalar__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_resizingScalar. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->resizingScalar(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_resizingScalar) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_resizingScalar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_resizingScalar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_resizingScalar'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fineTuningIterations__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_fineTuningIterations. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->fineTuningIterations();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fineTuningIterations__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_fineTuningIterations. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fineTuningIterations(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fineTuningIterations) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_fineTuningIterations__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_fineTuningIterations__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_fineTuningIterations'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fineTuneScalar__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_fineTuneScalar. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->fineTuneScalar();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fineTuneScalar__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_fineTuneScalar. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fineTuneScalar(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_fineTuneScalar) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_fineTuneScalar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_fineTuneScalar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_fineTuneScalar'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_adjustPostRepStrengthDynamically__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_adjustPostRepStrengthDynamically. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->adjustPostRepStrengthDynamically();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_adjustPostRepStrengthDynamically__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_adjustPostRepStrengthDynamically. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->adjustPostRepStrengthDynamically(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_adjustPostRepStrengthDynamically) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_adjustPostRepStrengthDynamically__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_FMMMLayout_adjustPostRepStrengthDynamically__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_adjustPostRepStrengthDynamically'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_postSpringStrength__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_postSpringStrength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->postSpringStrength();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_postSpringStrength__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_postSpringStrength. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->postSpringStrength(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_postSpringStrength) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_postSpringStrength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_postSpringStrength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_postSpringStrength'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_postStrengthOfRepForces__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_postStrengthOfRepForces. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->postStrengthOfRepForces();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_postStrengthOfRepForces__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_postStrengthOfRepForces. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->postStrengthOfRepForces(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_postStrengthOfRepForces) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_postStrengthOfRepForces__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_FMMMLayout_postStrengthOfRepForces__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_postStrengthOfRepForces'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_frGridQuotient__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_frGridQuotient. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->frGridQuotient();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_frGridQuotient__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_frGridQuotient. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->frGridQuotient(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_frGridQuotient) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_frGridQuotient__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_frGridQuotient__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_frGridQuotient'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmTreeConstruction__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::ReducedTreeConstruction result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmTreeConstruction. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::ReducedTreeConstruction)(arg1)->nmTreeConstruction();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmTreeConstruction__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::ReducedTreeConstruction arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmTreeConstruction. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::ReducedTreeConstruction) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nmTreeConstruction(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmTreeConstruction) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_nmTreeConstruction__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_nmTreeConstruction__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_nmTreeConstruction'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmSmallCell__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  ogdf::FMMMLayout::SmallestCellFinding result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmSmallCell. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ogdf::FMMMLayout::SmallestCellFinding)(arg1)->nmSmallCell();
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmSmallCell__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  ogdf::FMMMLayout::SmallestCellFinding arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmSmallCell. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::FMMMLayout::SmallestCellFinding) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nmSmallCell(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmSmallCell) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_nmSmallCell__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_nmSmallCell__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_nmSmallCell'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmParticlesInLeaves__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmParticlesInLeaves. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->nmParticlesInLeaves();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmParticlesInLeaves__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmParticlesInLeaves. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nmParticlesInLeaves(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmParticlesInLeaves) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_nmParticlesInLeaves__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_nmParticlesInLeaves__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_nmParticlesInLeaves'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmPrecision__SWIG_0) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmPrecision. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->nmPrecision();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmPrecision__SWIG_1) {
  ogdf::FMMMLayout *arg1 = (ogdf::FMMMLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__FMMMLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FMMMLayout_nmPrecision. Expected SWIGTYPE_p_ogdf__FMMMLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->nmPrecision(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FMMMLayout_nmPrecision) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_FMMMLayout_nmPrecision__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__FMMMLayout, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_FMMMLayout_nmPrecision__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FMMMLayout_nmPrecision'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_DavidsonHarelLayout) {
  ogdf::DavidsonHarelLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::DavidsonHarelLayout *)new ogdf::DavidsonHarelLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_call) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_call. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DavidsonHarelLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_fixSettings) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  ogdf::DavidsonHarelLayout::SettingsParameter arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_fixSettings. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::DavidsonHarelLayout::SettingsParameter) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fixSettings(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setSpeed) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  ogdf::DavidsonHarelLayout::SpeedParameter arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setSpeed. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::DavidsonHarelLayout::SpeedParameter) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setSpeed(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setPreferredEdgeLengthMultiplier) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setPreferredEdgeLengthMultiplier. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setPreferredEdgeLengthMultiplier(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setPreferredEdgeLength) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setPreferredEdgeLength. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setPreferredEdgeLength(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setRepulsionWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setRepulsionWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setRepulsionWeight(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_getRepulsionWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_getRepulsionWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->getRepulsionWeight();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setAttractionWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setAttractionWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setAttractionWeight(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_getAttractionWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_getAttractionWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->getAttractionWeight();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setNodeOverlapWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setNodeOverlapWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setNodeOverlapWeight(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_getNodeOverlapWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_getNodeOverlapWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->getNodeOverlapWeight();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setPlanarityWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setPlanarityWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setPlanarityWeight(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_getPlanarityWeight) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_getPlanarityWeight. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->getPlanarityWeight();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setStartTemperature) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setStartTemperature. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setStartTemperature(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_getStartTemperature) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_getStartTemperature. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->getStartTemperature();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setNumberOfIterations) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setNumberOfIterations. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setNumberOfIterations(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_getNumberOfIterations) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_getNumberOfIterations. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->getNumberOfIterations();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DavidsonHarelLayout_setIterationNumberAsFactor) {
  ogdf::DavidsonHarelLayout *arg1 = (ogdf::DavidsonHarelLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DavidsonHarelLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DavidsonHarelLayout_setIterationNumberAsFactor. Expected SWIGTYPE_p_ogdf__DavidsonHarelLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setIterationNumberAsFactor(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_TutteLayout) {
  ogdf::TutteLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::TutteLayout *)new ogdf::TutteLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__TutteLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TutteLayout_bbox__SWIG_0) {
  ogdf::TutteLayout *arg1 = (ogdf::TutteLayout *) 0 ;
  zval **args[1];
  DRect result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TutteLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TutteLayout_bbox. Expected SWIGTYPE_p_ogdf__TutteLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((ogdf::TutteLayout const *)arg1)->bbox();
  {
    DRect * resultobj = new DRect((const DRect &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_DRect, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TutteLayout_bbox__SWIG_1) {
  ogdf::TutteLayout *arg1 = (ogdf::TutteLayout *) 0 ;
  DRect *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TutteLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TutteLayout_bbox. Expected SWIGTYPE_p_ogdf__TutteLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_DRect, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TutteLayout_bbox. Expected SWIGTYPE_p_DRect");
    }
  }
  (arg1)->bbox((DRect const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TutteLayout_bbox) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__TutteLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_TutteLayout_bbox__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__TutteLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_DRect, 0) >= 0);
      }
      if (_v) {
        _wrap_TutteLayout_bbox__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'TutteLayout_bbox'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TutteLayout_call__SWIG_0) {
  ogdf::TutteLayout *arg1 = (ogdf::TutteLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TutteLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TutteLayout_call. Expected SWIGTYPE_p_ogdf__TutteLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TutteLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TutteLayout_call__SWIG_1) {
  ogdf::TutteLayout *arg1 = (ogdf::TutteLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  ogdf::List< node > *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TutteLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TutteLayout_call. Expected SWIGTYPE_p_ogdf__TutteLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TutteLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of TutteLayout_call. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  (arg1)->call(*arg2,(ogdf::List< node > const &)*arg3);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TutteLayout_call) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__TutteLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
      }
      if (_v) {
        _wrap_TutteLayout_call__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__TutteLayout, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
        }
        if (_v) {
          _wrap_TutteLayout_call__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'TutteLayout_call'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_TreeLayout) {
  ogdf::TreeLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::TreeLayout *)new ogdf::TreeLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__TreeLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TreeLayout(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::TreeLayout *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__TreeLayout TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::TreeLayout resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_call) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_call. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TreeLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_siblingDistance) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_siblingDistance. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->siblingDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_subtreeDistance) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_subtreeDistance. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->subtreeDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_levelDistance) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_levelDistance. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->levelDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_treeDistance) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_treeDistance. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->treeDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_orthogonalLayout) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_orthogonalLayout. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->orthogonalLayout(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_orientation) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  Orientation arg2 ;
  Orientation *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_orientation. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_Orientation, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TreeLayout_orientation. Expected SWIGTYPE_p_Orientation");
    }
    arg2 = *tmp2;
  }
  (arg1)->orientation(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TreeLayout_rootSelection) {
  ogdf::TreeLayout *arg1 = (ogdf::TreeLayout *) 0 ;
  ogdf::TreeLayout::RootSelectionType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__TreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreeLayout_rootSelection. Expected SWIGTYPE_p_ogdf__TreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::TreeLayout::RootSelectionType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->rootSelection(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_RadialTreeLayout__SWIG_0) {
  ogdf::RadialTreeLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::RadialTreeLayout *)new ogdf::RadialTreeLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__RadialTreeLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_RadialTreeLayout__SWIG_1) {
  ogdf::RadialTreeLayout *arg1 = 0 ;
  zval **args[1];
  ogdf::RadialTreeLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__RadialTreeLayout, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_RadialTreeLayout. Expected SWIGTYPE_p_ogdf__RadialTreeLayout");
    }
  }
  result = (ogdf::RadialTreeLayout *)new ogdf::RadialTreeLayout((ogdf::RadialTreeLayout const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__RadialTreeLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_RadialTreeLayout) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_RadialTreeLayout__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__RadialTreeLayout, 0) >= 0);
    }
    if (_v) {
      _wrap_new_RadialTreeLayout__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_RadialTreeLayout'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_RadialTreeLayout(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::RadialTreeLayout *arg1 = (ogdf::RadialTreeLayout *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::RadialTreeLayout *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__RadialTreeLayout TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::RadialTreeLayout resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_RadialTreeLayout_call) {
  ogdf::RadialTreeLayout *arg1 = (ogdf::RadialTreeLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__RadialTreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RadialTreeLayout_call. Expected SWIGTYPE_p_ogdf__RadialTreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of RadialTreeLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_RadialTreeLayout_levelDistance) {
  ogdf::RadialTreeLayout *arg1 = (ogdf::RadialTreeLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__RadialTreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RadialTreeLayout_levelDistance. Expected SWIGTYPE_p_ogdf__RadialTreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->levelDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_RadialTreeLayout_connectedComponentDistance) {
  ogdf::RadialTreeLayout *arg1 = (ogdf::RadialTreeLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__RadialTreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RadialTreeLayout_connectedComponentDistance. Expected SWIGTYPE_p_ogdf__RadialTreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->connectedComponentDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_RadialTreeLayout_rootSelection) {
  ogdf::RadialTreeLayout *arg1 = (ogdf::RadialTreeLayout *) 0 ;
  ogdf::RadialTreeLayout::RootSelectionType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__RadialTreeLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RadialTreeLayout_rootSelection. Expected SWIGTYPE_p_ogdf__RadialTreeLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ogdf::RadialTreeLayout::RootSelectionType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->rootSelection(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_CircularLayout) {
  ogdf::CircularLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::CircularLayout *)new ogdf::CircularLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__CircularLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_CircularLayout(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::CircularLayout *arg1 = (ogdf::CircularLayout *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::CircularLayout *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__CircularLayout TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::CircularLayout resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CircularLayout_call) {
  ogdf::CircularLayout *arg1 = (ogdf::CircularLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CircularLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CircularLayout_call. Expected SWIGTYPE_p_ogdf__CircularLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CircularLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CircularLayout_minDistCircle) {
  ogdf::CircularLayout *arg1 = (ogdf::CircularLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CircularLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CircularLayout_minDistCircle. Expected SWIGTYPE_p_ogdf__CircularLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minDistCircle(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CircularLayout_minDistLevel) {
  ogdf::CircularLayout *arg1 = (ogdf::CircularLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CircularLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CircularLayout_minDistLevel. Expected SWIGTYPE_p_ogdf__CircularLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minDistLevel(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CircularLayout_minDistSibling) {
  ogdf::CircularLayout *arg1 = (ogdf::CircularLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CircularLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CircularLayout_minDistSibling. Expected SWIGTYPE_p_ogdf__CircularLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minDistSibling(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CircularLayout_minDistCC) {
  ogdf::CircularLayout *arg1 = (ogdf::CircularLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CircularLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CircularLayout_minDistCC. Expected SWIGTYPE_p_ogdf__CircularLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minDistCC(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_CircularLayout_pageRatio) {
  ogdf::CircularLayout *arg1 = (ogdf::CircularLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__CircularLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CircularLayout_pageRatio. Expected SWIGTYPE_p_ogdf__CircularLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->pageRatio(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_BalloonLayout) {
  ogdf::BalloonLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::BalloonLayout *)new ogdf::BalloonLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__BalloonLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_BalloonLayout_call) {
  ogdf::BalloonLayout *arg1 = (ogdf::BalloonLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__BalloonLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BalloonLayout_call. Expected SWIGTYPE_p_ogdf__BalloonLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of BalloonLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_BalloonLayout_setEvenAngles) {
  ogdf::BalloonLayout *arg1 = (ogdf::BalloonLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__BalloonLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BalloonLayout_setEvenAngles. Expected SWIGTYPE_p_ogdf__BalloonLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setEvenAngles(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_PlanarizationLayout) {
  ogdf::PlanarizationLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::PlanarizationLayout *)new ogdf::PlanarizationLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__PlanarizationLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_PlanarizationLayout(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::PlanarizationLayout *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__PlanarizationLayout TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::PlanarizationLayout resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PlanarizationLayout_call) {
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__PlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PlanarizationLayout_call. Expected SWIGTYPE_p_ogdf__PlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of PlanarizationLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PlanarizationLayout_pageRatio) {
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__PlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PlanarizationLayout_pageRatio. Expected SWIGTYPE_p_ogdf__PlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->pageRatio(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PlanarizationLayout_minCliqueSize) {
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__PlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PlanarizationLayout_minCliqueSize. Expected SWIGTYPE_p_ogdf__PlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minCliqueSize(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PlanarizationLayout_setCrossMin) {
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  ogdf::CrossingMinimizationModule *arg2 = (ogdf::CrossingMinimizationModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__PlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PlanarizationLayout_setCrossMin. Expected SWIGTYPE_p_ogdf__PlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__CrossingMinimizationModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of PlanarizationLayout_setCrossMin. Expected SWIGTYPE_p_ogdf__CrossingMinimizationModule");
    }
  }
  (arg1)->setCrossMin(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PlanarizationLayout_setEmbedder) {
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  ogdf::EmbedderModule *arg2 = (ogdf::EmbedderModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__PlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PlanarizationLayout_setEmbedder. Expected SWIGTYPE_p_ogdf__PlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__EmbedderModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of PlanarizationLayout_setEmbedder. Expected SWIGTYPE_p_ogdf__EmbedderModule");
    }
  }
  (arg1)->setEmbedder(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PlanarizationLayout_setPlanarLayouter) {
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  ogdf::LayoutPlanRepModule *arg2 = (ogdf::LayoutPlanRepModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__PlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PlanarizationLayout_setPlanarLayouter. Expected SWIGTYPE_p_ogdf__PlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__LayoutPlanRepModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of PlanarizationLayout_setPlanarLayouter. Expected SWIGTYPE_p_ogdf__LayoutPlanRepModule");
    }
  }
  (arg1)->setPlanarLayouter(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PlanarizationLayout_setPacker) {
  ogdf::PlanarizationLayout *arg1 = (ogdf::PlanarizationLayout *) 0 ;
  ogdf::CCLayoutPackModule *arg2 = (ogdf::CCLayoutPackModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__PlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PlanarizationLayout_setPacker. Expected SWIGTYPE_p_ogdf__PlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__CCLayoutPackModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of PlanarizationLayout_setPacker. Expected SWIGTYPE_p_ogdf__CCLayoutPackModule");
    }
  }
  (arg1)->setPacker(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_SugiyamaLayout) {
  ogdf::SugiyamaLayout *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (ogdf::SugiyamaLayout *)new ogdf::SugiyamaLayout();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ogdf__SugiyamaLayout, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_SugiyamaLayout(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (ogdf::SugiyamaLayout *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_ogdf__SugiyamaLayout TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "ogdf::SugiyamaLayout resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_call) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_call. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SugiyamaLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_fails) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_fails. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fails(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_runs) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_runs. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->runs(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_transpose) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_transpose. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->transpose(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_arrangeCCs) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_arrangeCCs. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->arrangeCCs(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_minDistCC) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_minDistCC. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->minDistCC(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_pageRatio) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_pageRatio. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->pageRatio(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_alignBaseClasses) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_alignBaseClasses. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->alignBaseClasses(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_alignSiblings) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_alignSiblings. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->alignSiblings(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_permuteFirst) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_permuteFirst. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->permuteFirst(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_maxThreads) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  unsigned int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_maxThreads. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->maxThreads(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_setRanking) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  ogdf::RankingModule *arg2 = (ogdf::RankingModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_setRanking. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__RankingModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SugiyamaLayout_setRanking. Expected SWIGTYPE_p_ogdf__RankingModule");
    }
  }
  (arg1)->setRanking(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_setCrossMin) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  ogdf::LayeredCrossMinModule *arg2 = (ogdf::LayeredCrossMinModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_setCrossMin. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__LayeredCrossMinModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SugiyamaLayout_setCrossMin. Expected SWIGTYPE_p_ogdf__LayeredCrossMinModule");
    }
  }
  (arg1)->setCrossMin(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_setLayout) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  ogdf::HierarchyLayoutModule *arg2 = (ogdf::HierarchyLayoutModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_setLayout. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__HierarchyLayoutModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SugiyamaLayout_setLayout. Expected SWIGTYPE_p_ogdf__HierarchyLayoutModule");
    }
  }
  (arg1)->setLayout(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_setClusterLayout) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  ogdf::HierarchyClusterLayoutModule *arg2 = (ogdf::HierarchyClusterLayoutModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_setClusterLayout. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__HierarchyClusterLayoutModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SugiyamaLayout_setClusterLayout. Expected SWIGTYPE_p_ogdf__HierarchyClusterLayoutModule");
    }
  }
  (arg1)->setClusterLayout(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SugiyamaLayout_setPacker) {
  ogdf::SugiyamaLayout *arg1 = (ogdf::SugiyamaLayout *) 0 ;
  ogdf::CCLayoutPackModule *arg2 = (ogdf::CCLayoutPackModule *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__SugiyamaLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SugiyamaLayout_setPacker. Expected SWIGTYPE_p_ogdf__SugiyamaLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__CCLayoutPackModule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SugiyamaLayout_setPacker. Expected SWIGTYPE_p_ogdf__CCLayoutPackModule");
    }
  }
  (arg1)->setPacker(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_UpwardPlanarizationLayout_call) {
  ogdf::UpwardPlanarizationLayout *arg1 = (ogdf::UpwardPlanarizationLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__UpwardPlanarizationLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UpwardPlanarizationLayout_call. Expected SWIGTYPE_p_ogdf__UpwardPlanarizationLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of UpwardPlanarizationLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DominanceLayout_call) {
  ogdf::DominanceLayout *arg1 = (ogdf::DominanceLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DominanceLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DominanceLayout_call. Expected SWIGTYPE_p_ogdf__DominanceLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DominanceLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_DominanceLayout_setMinGridDistance) {
  ogdf::DominanceLayout *arg1 = (ogdf::DominanceLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__DominanceLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DominanceLayout_setMinGridDistance. Expected SWIGTYPE_p_ogdf__DominanceLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setMinGridDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_VisibilityLayout_call) {
  ogdf::VisibilityLayout *arg1 = (ogdf::VisibilityLayout *) 0 ;
  ogdf::GraphAttributes *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__VisibilityLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of VisibilityLayout_call. Expected SWIGTYPE_p_ogdf__VisibilityLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of VisibilityLayout_call. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  (arg1)->call(*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_VisibilityLayout_setMinGridDistance) {
  ogdf::VisibilityLayout *arg1 = (ogdf::VisibilityLayout *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__VisibilityLayout, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of VisibilityLayout_setMinGridDistance. Expected SWIGTYPE_p_ogdf__VisibilityLayout");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->setMinGridDistance(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_SVGSettings) {
  SVGSettings *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (SVGSettings *)new SVGSettings();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_SVGSettings, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_margin__SWIG_0) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_margin. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->margin();
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontSize__SWIG_0) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_fontSize. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->fontSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontColor__SWIG_0) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  zval **args[1];
  string *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_fontColor. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (string *) &(arg1)->fontColor();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_string, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontFamily__SWIG_0) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  zval **args[1];
  string *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_fontFamily. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (string *) &(arg1)->fontFamily();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_string, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_margin__SWIG_1) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_margin. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->margin(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_margin) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      _wrap_SVGSettings_margin__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_SVGSettings_margin__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'SVGSettings_margin'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontSize__SWIG_1) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_fontSize. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->fontSize(arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontSize) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      _wrap_SVGSettings_fontSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_SVGSettings_fontSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'SVGSettings_fontSize'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontColor__SWIG_1) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_fontColor. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SVGSettings_fontColor. Expected SWIGTYPE_p_string");
    }
  }
  (arg1)->fontColor((string const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontColor) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      _wrap_SVGSettings_fontColor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_SVGSettings_fontColor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'SVGSettings_fontColor'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontFamily__SWIG_1) {
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SVGSettings, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SVGSettings_fontFamily. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SVGSettings_fontFamily. Expected SWIGTYPE_p_string");
    }
  }
  (arg1)->fontFamily((string const &)*arg2);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_SVGSettings_fontFamily) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      _wrap_SVGSettings_fontFamily__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_SVGSettings_fontFamily__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'SVGSettings_fontFamily'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_SVGSettings(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  SVGSettings *arg1 = (SVGSettings *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (SVGSettings *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_SVGSettings TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "SVGSettings resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGML(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGML(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGML((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readOGML(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readOGML(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeOGML((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRome__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readRome. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readRome(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRome__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readRome. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readRome. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readRome(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRome__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readRome. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readRome. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readRome(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRome) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readRome__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readRome__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readRome__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readRome'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRome__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeRome. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeRome((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRome__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeRome. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeRome. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeRome((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRome__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeRome. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeRome. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeRome((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRome) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeRome__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeRome__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeRome__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeRome'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readLEDA__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readLEDA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readLEDA(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readLEDA__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readLEDA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readLEDA. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readLEDA(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readLEDA__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readLEDA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readLEDA. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readLEDA(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readLEDA) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readLEDA__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readLEDA__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readLEDA__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readLEDA'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeLEDA__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeLEDA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeLEDA((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeLEDA__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeLEDA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeLEDA. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeLEDA((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeLEDA__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeLEDA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeLEDA. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeLEDA((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeLEDA) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeLEDA__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeLEDA__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeLEDA__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeLEDA'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChaco__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readChaco. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readChaco(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChaco__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readChaco. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readChaco. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readChaco(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChaco__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readChaco. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readChaco. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readChaco(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChaco) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readChaco__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readChaco__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readChaco__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readChaco'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChaco__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeChaco. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeChaco((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChaco__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeChaco. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeChaco. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeChaco((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChaco__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeChaco. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeChaco. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeChaco((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChaco) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeChaco__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeChaco__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeChaco__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeChaco'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readPMDissGraph__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readPMDissGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readPMDissGraph(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readPMDissGraph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readPMDissGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readPMDissGraph. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readPMDissGraph(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readPMDissGraph__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readPMDissGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readPMDissGraph. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readPMDissGraph(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readPMDissGraph) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readPMDissGraph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readPMDissGraph__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readPMDissGraph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readPMDissGraph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writePMDissGraph__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writePMDissGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writePMDissGraph((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writePMDissGraph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writePMDissGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writePMDissGraph. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writePMDissGraph((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writePMDissGraph__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writePMDissGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writePMDissGraph. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writePMDissGraph((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writePMDissGraph) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writePMDissGraph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writePMDissGraph__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writePMDissGraph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writePMDissGraph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readYGraph__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readYGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readYGraph(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readYGraph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readYGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readYGraph. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readYGraph(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readYGraph__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readYGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readYGraph. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readYGraph(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readYGraph) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readYGraph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readYGraph__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readYGraph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readYGraph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGML((ClusterGraph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ClusterGraph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ClusterGraph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readOGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readOGML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeOGML((ClusterGraph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ClusterGraph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ClusterGraph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGML((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readOGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readOGML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeOGML((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRudy__SWIG_0) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readRudy. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readRudy. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readRudy(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRudy__SWIG_1) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readRudy. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readRudy. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readRudy. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readRudy(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRudy__SWIG_2) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readRudy. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readRudy. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readRudy. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readRudy(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readRudy) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readRudy__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readRudy__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readRudy__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readRudy'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRudy__SWIG_0) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeRudy. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeRudy((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRudy__SWIG_1) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeRudy. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeRudy. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeRudy((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRudy__SWIG_2) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeRudy. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeRudy. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeRudy((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeRudy) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeRudy__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeRudy__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeRudy__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeRudy'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  string *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_string, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGML(*arg1,*arg2,*arg3,(string const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGML) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGML__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGML__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readGML__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGML__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGML__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readGML__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGML__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGML__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readGML__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readGML__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readGML__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readGML'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGML((ClusterGraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ClusterGraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML__SWIG_11) {
  ClusterGraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGML((ClusterGraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGML) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_11(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGML__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeGML'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  istream *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readOGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readOGML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readOGML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_istream, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readOGML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readOGML(*arg1,*arg2,*arg3,*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readOGML) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readOGML__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readOGML__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readOGML__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readOGML__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readOGML__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readOGML__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readOGML__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readOGML__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readOGML__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readOGML__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readOGML__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readOGML'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeOGML((ClusterGraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ClusterGraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML__SWIG_11) {
  ClusterGraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeOGML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeOGML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeOGML((ClusterGraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeOGML) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_11(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeOGML__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeOGML'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readBENCH__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::List< edge > *arg3 = (ogdf::List< edge > *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readBENCH. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readBENCH. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readBENCH. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readBENCH(*arg1,*arg2,arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readBENCH__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::List< edge > *arg3 = (ogdf::List< edge > *) 0 ;
  istream *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readBENCH. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readBENCH. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readBENCH. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_istream, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readBENCH. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readBENCH(*arg1,*arg2,arg3,*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readBENCH) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readBENCH__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readBENCH__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readBENCH'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readPLA__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::List< edge > *arg3 = (ogdf::List< edge > *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readPLA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readPLA. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readPLA. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readPLA(*arg1,*arg2,arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readPLA__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::List< edge > *arg3 = (ogdf::List< edge > *) 0 ;
  string *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readPLA. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readPLA. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readPLA. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_string, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readPLA. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readPLA(*arg1,*arg2,arg3,(string const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readPLA) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readPLA__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readPLA__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readPLA'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChallengeGraph__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  GridLayout *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_GridLayout, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_GridLayout");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readChallengeGraph(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChallengeGraph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  GridLayout *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_GridLayout, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_GridLayout");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readChallengeGraph(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChallengeGraph__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  GridLayout *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_GridLayout, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_GridLayout");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readChallengeGraph. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readChallengeGraph(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readChallengeGraph) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_GridLayout, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readChallengeGraph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_GridLayout, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readChallengeGraph__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_GridLayout, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readChallengeGraph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readChallengeGraph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChallengeGraph__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  GridLayout *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_GridLayout, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_GridLayout");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeChallengeGraph((ogdf::Graph const &)*arg1,(GridLayout const &)*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChallengeGraph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  GridLayout *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_GridLayout, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_GridLayout");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeChallengeGraph((ogdf::Graph const &)*arg1,(GridLayout const &)*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChallengeGraph__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  GridLayout *arg2 = 0 ;
  ostream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_GridLayout, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_GridLayout");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ostream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_writeChallengeGraph. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeChallengeGraph((ogdf::Graph const &)*arg1,(GridLayout const &)*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeChallengeGraph) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_GridLayout, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_writeChallengeGraph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_GridLayout, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_writeChallengeGraph__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_GridLayout, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_writeChallengeGraph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeChallengeGraph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGraphML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGraphML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGraphML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGraphML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  istream *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGraphML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_istream, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readGraphML. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGraphML(*arg1,*arg2,*arg3,*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGraphML) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGraphML__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGraphML__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readGraphML__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGraphML__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGraphML__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readGraphML__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGraphML__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGraphML__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readGraphML__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readGraphML__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readGraphML__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readGraphML'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGraphML((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGraphML((ClusterGraph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ClusterGraph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ClusterGraph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGraphML((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGraphML((ClusterGraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ClusterGraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML__SWIG_11) {
  ClusterGraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGraphML. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGraphML((ClusterGraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGraphML) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_11(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGraphML__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeGraphML'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readDOT(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readDOT(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDOT. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDOT. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  string *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDOT. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_string, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readDOT(*arg1,*arg2,*arg3,(string const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDOT) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readDOT__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readDOT__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readDOT__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readDOT__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readDOT__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readDOT__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readDOT__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readDOT__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readDOT__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readDOT__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readDOT__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readDOT'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeDOT((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeDOT((ClusterGraph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ClusterGraph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ClusterGraph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeDOT((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeDOT((ClusterGraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ClusterGraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT__SWIG_11) {
  ClusterGraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDOT. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDOT. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeDOT((ClusterGraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDOT) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_11(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeDOT__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeDOT'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGEXF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGEXF. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGEXF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGEXF. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  istream *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGEXF. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_istream, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readGEXF. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGEXF(*arg1,*arg2,*arg3,*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGEXF) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGEXF__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGEXF__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readGEXF__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGEXF__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGEXF__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readGEXF__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGEXF__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGEXF__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readGEXF__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readGEXF__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readGEXF__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readGEXF'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGEXF((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGEXF((ClusterGraph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ClusterGraph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ClusterGraph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGEXF((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGEXF((ClusterGraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ClusterGraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF__SWIG_11) {
  ClusterGraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGEXF. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGEXF((ClusterGraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGEXF) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_11(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGEXF__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeGEXF'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGDF__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGDF(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGDF__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGDF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGDF(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGDF__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGDF. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGDF(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGDF__SWIG_3) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readGDF(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGDF__SWIG_4) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGDF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readGDF(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGDF__SWIG_5) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readGDF. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readGDF(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readGDF) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGDF__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readGDF__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readGDF__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGDF__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readGDF__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readGDF__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readGDF'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGDF__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGDF((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGDF__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGDF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGDF((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGDF__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGDF. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGDF. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGDF((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGDF__SWIG_3) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGDF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeGDF((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGDF__SWIG_4) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGDF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGDF. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeGDF((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGDF__SWIG_5) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeGDF. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeGDF. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeGDF((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeGDF) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGDF__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGDF__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGDF__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGDF__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeGDF__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeGDF__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeGDF'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readTLP(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readTLP(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readTLP. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readTLP. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  ClusterGraph *arg2 = 0 ;
  ogdf::Graph *arg3 = 0 ;
  string *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readTLP. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_string, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readTLP(*arg1,*arg2,*arg3,(string const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readTLP) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readTLP__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readTLP__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readTLP__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readTLP__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readTLP__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readTLP__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readTLP__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readTLP__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readTLP__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readTLP__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readTLP__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readTLP'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeTLP((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_3) {
  ClusterGraph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeTLP((ClusterGraph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_4) {
  ClusterGraph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ClusterGraph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_5) {
  ClusterGraph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ClusterGraph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ClusterGraph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_6) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeTLP((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_7) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_8) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_9) {
  ClusterGraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeTLP((ClusterGraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_10) {
  ClusterGraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ClusterGraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP__SWIG_11) {
  ClusterGraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeTLP. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeTLP. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeTLP((ClusterGraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeTLP) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_10(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_11(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeTLP__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeTLP'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDL__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readDL(*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDL__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDL. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readDL(*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDL__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  istream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDL. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readDL(*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDL__SWIG_3) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readDL(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDL__SWIG_4) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDL. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readDL(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDL__SWIG_5) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ogdf::Graph *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readDL. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readDL(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readDL) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readDL__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_readDL__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_readDL__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readDL__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readDL__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readDL__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readDL'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDL__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeDL((ogdf::Graph const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDL__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDL. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeDL((ogdf::Graph const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDL__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDL. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDL. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeDL((ogdf::Graph const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDL__SWIG_3) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDL. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeDL((ogdf::GraphAttributes const &)*arg1,(char const *)arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDL__SWIG_4) {
  ogdf::GraphAttributes *arg1 = 0 ;
  string *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDL. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_string, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDL. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::writeDL((ogdf::GraphAttributes const &)*arg1,(string const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDL__SWIG_5) {
  ogdf::GraphAttributes *arg1 = 0 ;
  ostream *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeDL. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeDL. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeDL((ogdf::GraphAttributes const &)*arg1,*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeDL) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDL__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDL__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeDL__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDL__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
      }
      if (_v) {
        _wrap_GraphIO_writeDL__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_GraphIO_writeDL__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeDL'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readSTP__SWIG_0) {
  EdgeWeightedGraph< double > *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::NodeArray< bool > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_EdgeWeightedGraphT_double_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readSTP. Expected SWIGTYPE_p_EdgeWeightedGraphT_double_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__NodeArrayT_bool_t");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readSTP(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readSTP__SWIG_1) {
  EdgeWeightedGraph< int > *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::NodeArray< bool > *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_EdgeWeightedGraphT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readSTP. Expected SWIGTYPE_p_EdgeWeightedGraphT_int_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__NodeArrayT_bool_t");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readSTP(*arg1,*arg2,*arg3,(char const *)arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readSTP__SWIG_2) {
  EdgeWeightedGraph< double > *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::NodeArray< bool > *arg3 = 0 ;
  string *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_EdgeWeightedGraphT_double_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readSTP. Expected SWIGTYPE_p_EdgeWeightedGraphT_double_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__NodeArrayT_bool_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_string, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readSTP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readSTP(*arg1,*arg2,*arg3,(string const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readSTP__SWIG_3) {
  EdgeWeightedGraph< int > *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::NodeArray< bool > *arg3 = 0 ;
  string *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_EdgeWeightedGraphT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readSTP. Expected SWIGTYPE_p_EdgeWeightedGraphT_int_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__NodeArrayT_bool_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_string, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readSTP. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readSTP(*arg1,*arg2,*arg3,(string const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readSTP__SWIG_4) {
  EdgeWeightedGraph< double > *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::NodeArray< bool > *arg3 = 0 ;
  istream *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_EdgeWeightedGraphT_double_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readSTP. Expected SWIGTYPE_p_EdgeWeightedGraphT_double_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__NodeArrayT_bool_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_istream, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readSTP. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readSTP(*arg1,*arg2,*arg3,*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readSTP__SWIG_5) {
  EdgeWeightedGraph< int > *arg1 = 0 ;
  ogdf::List< node > *arg2 = 0 ;
  ogdf::NodeArray< bool > *arg3 = 0 ;
  istream *arg4 = 0 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_EdgeWeightedGraphT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readSTP. Expected SWIGTYPE_p_EdgeWeightedGraphT_int_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_node_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__ListT_node_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readSTP. Expected SWIGTYPE_p_ogdf__NodeArrayT_bool_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_istream, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of GraphIO_readSTP. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readSTP(*arg1,*arg2,*arg3,*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readSTP) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_EdgeWeightedGraphT_double_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readSTP__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_EdgeWeightedGraphT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readSTP__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_EdgeWeightedGraphT_double_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readSTP__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_EdgeWeightedGraphT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
          }
          if (_v) {
            _wrap_GraphIO_readSTP__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_EdgeWeightedGraphT_double_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readSTP__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_EdgeWeightedGraphT_int_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_node_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ogdf__NodeArrayT_bool_t, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_GraphIO_readSTP__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readSTP'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readEdgeListSubgraph__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< edge > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::readEdgeListSubgraph(*arg1,*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readEdgeListSubgraph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< edge > *arg2 = 0 ;
  string *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_string, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_string");
    }
  }
  result = (bool)ogdf::GraphIO::readEdgeListSubgraph(*arg1,*arg2,(string const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readEdgeListSubgraph__SWIG_2) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< edge > *arg2 = 0 ;
  istream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_readEdgeListSubgraph. Expected SWIGTYPE_p_istream");
    }
  }
  result = (bool)ogdf::GraphIO::readEdgeListSubgraph(*arg1,*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_readEdgeListSubgraph) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_string, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readEdgeListSubgraph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_istream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_readEdgeListSubgraph__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_readEdgeListSubgraph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_readEdgeListSubgraph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeEdgeListSubgraph__SWIG_0) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< edge > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (bool)ogdf::GraphIO::writeEdgeListSubgraph((ogdf::Graph const &)*arg1,(ogdf::List< edge > const &)*arg2,(char const *)arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeEdgeListSubgraph__SWIG_1) {
  ogdf::Graph *arg1 = 0 ;
  ogdf::List< edge > *arg2 = 0 ;
  ostream *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__Graph, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_writeEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__Graph");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_ogdf__ListT_edge_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of GraphIO_writeEdgeListSubgraph. Expected SWIGTYPE_p_ogdf__ListT_edge_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_ostream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_writeEdgeListSubgraph. Expected SWIGTYPE_p_ostream");
    }
  }
  result = (bool)ogdf::GraphIO::writeEdgeListSubgraph((ogdf::Graph const &)*arg1,(ogdf::List< edge > const &)*arg2,*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_writeEdgeListSubgraph) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_ostream, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_writeEdgeListSubgraph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__Graph, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_ogdf__ListT_edge_t, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_GraphIO_writeEdgeListSubgraph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_writeEdgeListSubgraph'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_drawSVG__SWIG_0) {
  ogdf::GraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  SVGSettings *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ogdf__GraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_drawSVG. Expected SWIGTYPE_p_ogdf__GraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_SVGSettings, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_drawSVG. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  result = (bool)ogdf::GraphIO::drawSVG((ogdf::GraphAttributes const &)*arg1,(char const *)arg2,(SVGSettings const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_drawSVG__SWIG_1) {
  ClusterGraphAttributes *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  SVGSettings *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ClusterGraphAttributes, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_drawSVG. Expected SWIGTYPE_p_ClusterGraphAttributes");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_SVGSettings, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of GraphIO_drawSVG. Expected SWIGTYPE_p_SVGSettings");
    }
  }
  result = (bool)ogdf::GraphIO::drawSVG((ClusterGraphAttributes const &)*arg1,(char const *)arg2,(SVGSettings const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_drawSVG) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ogdf__GraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_drawSVG__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_ClusterGraphAttributes, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_SVGSettings, 0) >= 0);
        }
        if (_v) {
          _wrap_GraphIO_drawSVG__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'GraphIO_drawSVG'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_indentChar) {
  char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (char)ogdf::GraphIO::indentChar();
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_indentWidth) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)ogdf::GraphIO::indentWidth();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_setIndentChar) {
  char arg1 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[0]);
  arg1 = (char) *Z_STRVAL_PP(args[0]);
  /*@SWIG@*/;
  
  ogdf::GraphIO::setIndentChar(arg1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_setIndentWidth) {
  int arg1 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  ogdf::GraphIO::setIndentWidth(arg1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_GraphIO_indent) {
  ostream *arg1 = 0 ;
  int arg2 ;
  zval **args[2];
  ostream *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_ostream, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GraphIO_indent. Expected SWIGTYPE_p_ostream");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.5/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (ostream *) &ogdf::GraphIO::indent(*arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ostream, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_GraphConstraints) {
  /* No destructor for simple type _p_GraphConstraints */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ZeroPlacer) {
  /* No destructor for class ZeroPlacer */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__CirclePlacer) {
  /* No destructor for class CirclePlacer */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__RandomPlacer) {
  /* No destructor for class RandomPlacer */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__Stroke) {
  __wrap_delete_Stroke(rsrc, SWIGTYPE_p_ogdf__Stroke->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Orientation) {
  /* No destructor for simple type _p_Orientation */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__GEMLayout) {
  /* No destructor for class GEMLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__OrthoLayout) {
  /* No destructor for class OrthoLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__OptimalHierarchyLayout) {
  /* No destructor for class OptimalHierarchyLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__FastSimpleHierarchyLayout) {
  /* No destructor for class FastSimpleHierarchyLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__FastHierarchyLayout) {
  /* No destructor for class FastHierarchyLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__FMMMLayout) {
  /* No destructor for class FMMMLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__TutteLayout) {
  /* No destructor for class TutteLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__TreeLayout) {
  __wrap_delete_TreeLayout(rsrc, SWIGTYPE_p_ogdf__TreeLayout->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__RadialTreeLayout) {
  __wrap_delete_RadialTreeLayout(rsrc, SWIGTYPE_p_ogdf__RadialTreeLayout->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__SugiyamaLayout) {
  __wrap_delete_SugiyamaLayout(rsrc, SWIGTYPE_p_ogdf__SugiyamaLayout->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__DominanceLayout) {
  /* No destructor for class DominanceLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__VisibilityLayout) {
  /* No destructor for class VisibilityLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_AcyclicSubgraphModule) {
  /* No destructor for simple type _p_AcyclicSubgraphModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__LayoutModule) {
  /* No destructor for class LayoutModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__UPRLayoutModule) {
  /* No destructor for class UPRLayoutModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__LayoutPlanRepModule) {
  /* No destructor for class LayoutPlanRepModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EmbedderModule) {
  /* No destructor for class EmbedderModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EdgeInsertionModule) {
  /* No destructor for class EdgeInsertionModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__PlanarSubgraphModule) {
  /* No destructor for class PlanarSubgraphModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__CrossingMinimizationModule) {
  /* No destructor for class CrossingMinimizationModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__LayeredCrossMinModule) {
  /* No destructor for class LayeredCrossMinModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__AcyclicSubgraphModule) {
  /* No destructor for class AcyclicSubgraphModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__HierarchyLayoutModule) {
  /* No destructor for class HierarchyLayoutModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__HierarchyClusterLayoutModule) {
  /* No destructor for class HierarchyClusterLayoutModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_DPolyline) {
  /* No destructor for simple type _p_DPolyline */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_short) {
  /* No destructor for simple type _p_short */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_short) {
  /* No destructor for simple type _p_unsigned_short */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ClusterGraph) {
  /* No destructor for simple type _p_ClusterGraph */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_node_t) {
  /* No destructor for simple type _p_ogdf__ListT_node_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__GridSifting) {
  /* No destructor for class GridSifting */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__GlobalSifting) {
  /* No destructor for class GlobalSifting */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__BarycenterPlacer) {
  /* No destructor for class BarycenterPlacer */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__InitialPlacer) {
  /* No destructor for class InitialPlacer */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_int) {
  /* No destructor for simple type _p_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__VariableEmbeddingInserterDyn) {
  /* No destructor for class VariableEmbeddingInserterDyn */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_long_long) {
  /* No destructor for simple type _p_long_long */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_long_long) {
  /* No destructor for simple type _p_unsigned_long_long */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__Color) {
  __wrap_delete_Color(rsrc, SWIGTYPE_p_ogdf__Color->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__DavidsonHarelLayout) {
  /* No destructor for class DavidsonHarelLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__CircularLayout) {
  __wrap_delete_CircularLayout(rsrc, SWIGTYPE_p_ogdf__CircularLayout->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__BalloonLayout) {
  /* No destructor for class BalloonLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__PlanarizationLayout) {
  __wrap_delete_PlanarizationLayout(rsrc, SWIGTYPE_p_ogdf__PlanarizationLayout->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__UpwardPlanarizationLayout) {
  /* No destructor for class UpwardPlanarizationLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_GridLayout) {
  /* No destructor for simple type _p_GridLayout */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__GraphAttributes) {
  __wrap_delete_GraphAttributes(rsrc, SWIGTYPE_p_ogdf__GraphAttributes->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ClusterGraphAttributes) {
  /* No destructor for simple type _p_ClusterGraphAttributes */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__RandomMerger) {
  /* No destructor for class RandomMerger */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__MatchingMerger) {
  /* No destructor for class MatchingMerger */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__MultilevelBuilder) {
  /* No destructor for class MultilevelBuilder */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__FastPlanarSubgraph) {
  /* No destructor for class FastPlanarSubgraph */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_ogdf__NodeElement_p_t) {
  /* No destructor for simple type _p_ogdf__ListT_ogdf__NodeElement_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_ogdf__EdgeElement_p_t) {
  /* No destructor for simple type _p_ogdf__ListT_ogdf__EdgeElement_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_ogdf__AdjElement_p_t) {
  /* No destructor for simple type _p_ogdf__ListT_ogdf__AdjElement_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_SVGSettings) {
  __wrap_delete_SVGSettings(rsrc, SWIGTYPE_p_SVGSettings->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_edge_t) {
  /* No destructor for simple type _p_ogdf__ListT_edge_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EdgeArrayT_double_t) {
  __wrap_delete_DoubleEdgeArray(rsrc, SWIGTYPE_p_ogdf__EdgeArrayT_double_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__NodeArrayT_double_t) {
  __wrap_delete_DoubleNodeArray(rsrc, SWIGTYPE_p_ogdf__NodeArrayT_double_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_int) {
  /* No destructor for simple type _int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_EdgeWeightedGraphT_double_t) {
  /* No destructor for simple type _p_EdgeWeightedGraphT_double_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__CoffmanGrahamRanking) {
  /* No destructor for class CoffmanGrahamRanking */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__LongestPathRanking) {
  /* No destructor for class LongestPathRanking */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__OptimalRanking) {
  /* No destructor for class OptimalRanking */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EdgeArrayT_float_t) {
  __wrap_delete_FloatEdgeArray(rsrc, SWIGTYPE_p_ogdf__EdgeArrayT_float_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__NodeArrayT_float_t) {
  __wrap_delete_FloatNodeArray(rsrc, SWIGTYPE_p_ogdf__NodeArrayT_float_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EdgeArrayT_long_t) {
  __wrap_delete_LongEdgeArray(rsrc, SWIGTYPE_p_ogdf__EdgeArrayT_long_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__NodeArrayT_long_t) {
  __wrap_delete_LongNodeArray(rsrc, SWIGTYPE_p_ogdf__NodeArrayT_long_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__CCLayoutPackModule) {
  /* No destructor for class CCLayoutPackModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__RankingModule) {
  /* No destructor for class RankingModule */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_istream) {
  /* No destructor for simple type _p_istream */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ostream) {
  /* No destructor for simple type _p_ostream */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__SolarMerger) {
  /* No destructor for class SolarMerger */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__LocalBiconnectedMerger) {
  /* No destructor for class LocalBiconnectedMerger */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__IndependentSetMerger) {
  /* No destructor for class IndependentSetMerger */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EdgeCoverMerger) {
  /* No destructor for class EdgeCoverMerger */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_ogdf__ListT_edge_t_p_t) {
  /* No destructor for simple type _p_ogdf__ListT_ogdf__ListT_edge_t_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_ogdf__ListT_node_t_p_t) {
  /* No destructor for simple type _p_ogdf__ListT_ogdf__ListT_node_t_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_string) {
  /* No destructor for simple type _p_string */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EdgeArrayT_int_t) {
  __wrap_delete_IntEdgeArray(rsrc, SWIGTYPE_p_ogdf__EdgeArrayT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListIteratorT_int_t) {
  __wrap_delete_IntListIterator(rsrc, SWIGTYPE_p_ogdf__ListIteratorT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__ListT_int_t) {
  __wrap_delete_IntList(rsrc, SWIGTYPE_p_ogdf__ListT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__NodeArrayT_int_t) {
  __wrap_delete_IntNodeArray(rsrc, SWIGTYPE_p_ogdf__NodeArrayT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_DRect) {
  /* No destructor for simple type _p_DRect */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__MultiEdgeApproxInserter) {
  /* No destructor for class MultiEdgeApproxInserter */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__VariableEmbeddingInserter) {
  /* No destructor for class VariableEmbeddingInserter */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__FixedEmbeddingInserter) {
  /* No destructor for class FixedEmbeddingInserter */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_EdgeWeightedGraphT_int_t) {
  /* No destructor for simple type _p_EdgeWeightedGraphT_int_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_int) {
  /* No destructor for simple type _p_unsigned_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_signed_char) {
  /* No destructor for simple type _p_signed_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_char) {
  /* No destructor for simple type _p_unsigned_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__Fill) {
  /* No destructor for class Fill */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__NodeArrayT_bool_t) {
  /* No destructor for simple type _p_ogdf__NodeArrayT_bool_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__Graph) {
  __wrap_delete_Graph(rsrc, SWIGTYPE_p_ogdf__Graph->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__AdjElement) {
  __wrap_delete_AdjElement(rsrc, SWIGTYPE_p_ogdf__AdjElement->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__EdgeElement) {
  __wrap_delete_EdgeElement(rsrc, SWIGTYPE_p_ogdf__EdgeElement->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ogdf__NodeElement) {
  __wrap_delete_NodeElement(rsrc, SWIGTYPE_p_ogdf__NodeElement->name TSRMLS_CC);
}
/* end wrapper section */
/* class entry subsection */


/* arginfo subsection */
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_listiteratorequalsequals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_listiteratornotequals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_succ, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_pred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_inc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_dec, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlistiterator_eq, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_intlistiterator, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_c_list, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_c_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_front, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_back, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_pos, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_begin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_end, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_rbegin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_rend, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_cyclicpred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_cyclicsucc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_listequalsequals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_listnotequals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_pushfront, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_pushback, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_insert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_insertbefore, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_insertafter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_popfront, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_popfrontret, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_popback, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_popbackret, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist__del, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_removefirst, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_exchange, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_movetofront, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_movetoback, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_movetosucc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_movetoprec, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_conc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_concfront, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_reverse, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_quicksort, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_permute, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_search, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_chooseiterator, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intlist_chooseelement, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_theedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_thenode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_twin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_twinnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_index, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_clockwisefacesucc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_clockwisefacepred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_counterclockwisefacesucc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_counterclockwisefacepred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_facecyclesucc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_facecyclepred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_succ, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_pred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_cyclicsucc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_cyclicpred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_adjelement_compare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_index, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_indeg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_outdeg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_degree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_firstadj, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_lastadj, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_succ, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_pred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nodeelement_compare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_index, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_source, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_target, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_adjsource, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_adjtarget, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_opposite, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_isselfloop, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_succ, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_pred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_isincident, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_commonnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgeelement_compare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_graph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_c_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_numberofnodes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_numberofedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_maxnodeindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_maxedgeindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_maxadjentryindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_nodearraytablesize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_edgearraytablesize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_adjentryarraytablesize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_firstnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_lastnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_firstedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_lastedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_choosenode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_chooseedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_allnodes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_alledges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_adjedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_adjentries, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_inedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_outedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_newnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_newedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_delnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_deledge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_hideedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_restoreedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_restorealledges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_split, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_unsplit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_splitnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_contract, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_move, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_movetarget, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_movesource, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_searchedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_reverseedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_reversealledges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_collaps, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_sort, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_moveadj, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_moveadjafter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_moveadjbefore, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_reverseadjedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_swapadjedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_genus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_representscombembedding, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_consistencycheck, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_resetedgeidcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graph_nextpower2, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_intnodearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intnodearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intnodearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intnodearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intnodearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intnodearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intnodearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_longnodearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longnodearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longnodearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longnodearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longnodearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longnodearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longnodearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_floatnodearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatnodearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatnodearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatnodearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatnodearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatnodearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatnodearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_doublenodearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublenodearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublenodearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublenodearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublenodearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublenodearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublenodearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_intedgearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intedgearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intedgearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intedgearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intedgearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intedgearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_intedgearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_longedgearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longedgearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longedgearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longedgearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longedgearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longedgearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longedgearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_floatedgearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatedgearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatedgearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatedgearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatedgearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatedgearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_floatedgearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_doubleedgearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubleedgearray_valid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubleedgearray_graphof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubleedgearray_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubleedgearray_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubleedgearray_get_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubleedgearray_set_val, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_multilevelbuilder_setedgelengthadjustment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_multilevelbuilder_getnumlevels, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_edgecovermerger, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_edgecovermerger_setfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_independentsetmerger_setsearchdepthbase, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_independentsetmerger, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_localbiconnectedmerger_setfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matchingmerger_selectbynodemass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_randommerger_setfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_solarmerger, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_initialplacer_setrandomoffset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_randomplacer_setcirclesize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circleplacer_setradiusfixed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circleplacer_setcirclesize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circleplacer_setnodeselection, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_zeroplacer_setrandomrange, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_barycenterplacer_weightedpositionpriority, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fasthierarchylayout_nodedistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fasthierarchylayout_layerdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fasthierarchylayout_fixedlayerdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsimplehierarchylayout_nodedistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsimplehierarchylayout_layerdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsimplehierarchylayout_downward, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsimplehierarchylayout_lefttoright, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsimplehierarchylayout_balanced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_optimalhierarchylayout_nodedistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_optimalhierarchylayout_layerdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_optimalhierarchylayout_fixedlayerdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_optimalhierarchylayout_weightsegments, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_optimalhierarchylayout_weightbalancing, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_optimalranking_separatemultiedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_optimalranking_setsubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longestpathranking_separatedeg0layer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longestpathranking_separatemultiedges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longestpathranking_optimizeedgelength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longestpathranking_alignbaseclasses, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longestpathranking_alignsiblings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_longestpathranking_setsubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_coffmangrahamranking_setsubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_coffmangrahamranking_width, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_globalsifting_nrepeats, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gridsifting_verticalstepsbound, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastplanarsubgraph_runs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fixedembeddinginserter_removereinsert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fixedembeddinginserter_percentmostcrossed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fixedembeddinginserter_keepembedding, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_variableembeddinginserter_removereinsert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_variableembeddinginserter_percentmostcrossed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_multiedgeapproxinserter_removereinsertfix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_multiedgeapproxinserter_removereinsertvar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_multiedgeapproxinserter_percentmostcrossedfix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_multiedgeapproxinserter_percentmostcrossedvar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_multiedgeapproxinserter_statistics, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_variableembeddinginserterdyn_removereinsert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_variableembeddinginserterdyn_percentmostcrossed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ortholayout_separation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ortholayout_coverhang, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ortholayout_margin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ortholayout_progressive, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ortholayout_scaling, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ortholayout_bendbound, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_inttostroketype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_inttofillpattern, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_color, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_color_red, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_color_green, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_color_blue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_color_alpha, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_color_tostring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_color_fromstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_color___notequals__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_color_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_color_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_width_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_width_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_type_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_type_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_cap_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_cap_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_join_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stroke_m_join_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_stroke, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fill_m_color_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fill_m_color_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fill_m_bgcolor_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fill_m_bgcolor_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fill_m_pattern_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fill_m_pattern_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fill, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_graphattributes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_attributes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_initattributes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_destroyattributes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_constgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_directed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setdirected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_sety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_height, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setheight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_width, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setwidth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_shape, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setshape, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_fillpattern, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setfillpattern, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_fillcolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setfillcolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_fillbgcolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setfillbgcolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_templatenode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_settemplatenode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_weight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_idnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setidnode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_bends, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setbends, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_arrowtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setarrowtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_stroketype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setstroketype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_strokecolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setstrokecolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_strokewidth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setstrokewidth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_label, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setlabel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_intweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setintweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_doubleweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setdoubleweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes__type, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_subgraphbits, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setsubgraphbits, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_insubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_addsubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_removesubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_boundingbox, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setallwidth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_setallheight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_clearallbends, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_removeunnecessarybendshv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_addnodecenter2bends, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_isassociationclass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphattributes_hierarchylist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_gemlayout, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_numberofrounds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_minimaltemperature, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_initialtemperature, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_gravitationalconstant, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_desiredlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_maximaldisturbance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_rotationangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_oscillationangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_rotationsensitivity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_oscillationsensitivity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_attractionformula, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_mindistcc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gemlayout_pageratio, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fmmmlayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_getcputime, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_usehighleveloptions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_setsinglelevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_pageformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_unitedgelength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_newinitialplacement, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_qualityversusspeed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_randseed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_edgelengthmeasurement, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_allowedpositions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_maxintposexponent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_pageratio, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_stepsforrotatingcomponents, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_tipoverccs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_mindistcc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_presortccs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_mingraphsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_galaxychoice, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_randomtries, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_maxiterchange, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_maxiterfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_initialplacementmult, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_forcemodel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_springstrength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_repforcesstrength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_repulsiveforcescalculation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_stopcriterion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_threshold, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_fixediterations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_forcescalingfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_cooltemperature, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_coolvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_initialplacementforces, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_resizedrawing, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_resizingscalar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_finetuningiterations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_finetunescalar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_adjustpostrepstrengthdynamically, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_postspringstrength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_poststrengthofrepforces, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_frgridquotient, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_nmtreeconstruction, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_nmsmallcell, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_nmparticlesinleaves, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fmmmlayout_nmprecision, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_davidsonharellayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_fixsettings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setspeed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setpreferrededgelengthmultiplier, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setpreferrededgelength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setrepulsionweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_getrepulsionweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setattractionweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_getattractionweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setnodeoverlapweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_getnodeoverlapweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setplanarityweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_getplanarityweight, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setstarttemperature, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_getstarttemperature, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setnumberofiterations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_getnumberofiterations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_davidsonharellayout_setiterationnumberasfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_tuttelayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tuttelayout_bbox, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tuttelayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_treelayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_siblingdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_subtreedistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_leveldistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_treedistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_orthogonallayout, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_orientation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_treelayout_rootselection, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_radialtreelayout, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_radialtreelayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_radialtreelayout_leveldistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_radialtreelayout_connectedcomponentdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_radialtreelayout_rootselection, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_circularlayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circularlayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circularlayout_mindistcircle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circularlayout_mindistlevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circularlayout_mindistsibling, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circularlayout_mindistcc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_circularlayout_pageratio, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_balloonlayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_balloonlayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_balloonlayout_setevenangles, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_planarizationlayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_planarizationlayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_planarizationlayout_pageratio, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_planarizationlayout_mincliquesize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_planarizationlayout_setcrossmin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_planarizationlayout_setembedder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_planarizationlayout_setplanarlayouter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_planarizationlayout_setpacker, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_sugiyamalayout, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_fails, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_runs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_transpose, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_arrangeccs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_mindistcc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_pageratio, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_alignbaseclasses, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_alignsiblings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_permutefirst, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_maxthreads, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_setranking, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_setcrossmin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_setlayout, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_setclusterlayout, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sugiyamalayout_setpacker, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_upwardplanarizationlayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dominancelayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dominancelayout_setmingriddistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_visibilitylayout_call, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_visibilitylayout_setmingriddistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_svgsettings, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_svgsettings_margin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_svgsettings_fontsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_svgsettings_fontcolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_svgsettings_fontfamily, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readrome, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writerome, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readleda, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writeleda, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readchaco, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writechaco, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readpmdissgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writepmdissgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readygraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readrudy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writerudy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readgml, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writegml, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readogml, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writeogml, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readbench, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readpla, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readchallengegraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writechallengegraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readgraphml, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writegraphml, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readdot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writedot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readgexf, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writegexf, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readgdf, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writegdf, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readtlp, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writetlp, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readdl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writedl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readstp, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_readedgelistsubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_writeedgelistsubgraph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_drawsvg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_indentchar, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_indentwidth, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_setindentchar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_setindentwidth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_graphio_indent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry ogdf_functions[] = {
 SWIG_ZEND_NAMED_FE(intlistiterator_valid,_wrap_IntListIterator_valid,swig_arginfo_intlistiterator_valid)
 SWIG_ZEND_NAMED_FE(intlistiterator_listiteratorequalsequals,_wrap_IntListIterator_ListIteratorEqualsEquals,swig_arginfo_intlistiterator_listiteratorequalsequals)
 SWIG_ZEND_NAMED_FE(intlistiterator_listiteratornotequals,_wrap_IntListIterator_ListIteratorNotEquals,swig_arginfo_intlistiterator_listiteratornotequals)
 SWIG_ZEND_NAMED_FE(intlistiterator_succ,_wrap_IntListIterator_succ,swig_arginfo_intlistiterator_succ)
 SWIG_ZEND_NAMED_FE(intlistiterator_pred,_wrap_IntListIterator_pred,swig_arginfo_intlistiterator_pred)
 SWIG_ZEND_NAMED_FE(intlistiterator_get_val,_wrap_IntListIterator_get_val,swig_arginfo_intlistiterator_get_val)
 SWIG_ZEND_NAMED_FE(intlistiterator_set_val,_wrap_IntListIterator_set_val,swig_arginfo_intlistiterator_set_val)
 SWIG_ZEND_NAMED_FE(intlistiterator_inc,_wrap_IntListIterator_inc,swig_arginfo_intlistiterator_inc)
 SWIG_ZEND_NAMED_FE(intlistiterator_dec,_wrap_IntListIterator_dec,swig_arginfo_intlistiterator_dec)
 SWIG_ZEND_NAMED_FE(intlistiterator_eq,_wrap_IntListIterator_eq,swig_arginfo_intlistiterator_eq)
 SWIG_ZEND_NAMED_FE(new_intlistiterator,_wrap_new_IntListIterator,swig_arginfo_new_intlistiterator)
 SWIG_ZEND_NAMED_FE(new_c_list,_wrap_new_c_List,swig_arginfo_new_c_list)
 SWIG_ZEND_NAMED_FE(intlist_c_empty,_wrap_IntList_c_empty,swig_arginfo_intlist_c_empty)
 SWIG_ZEND_NAMED_FE(intlist_size,_wrap_IntList_size,swig_arginfo_intlist_size)
 SWIG_ZEND_NAMED_FE(intlist_front,_wrap_IntList_front,swig_arginfo_intlist_front)
 SWIG_ZEND_NAMED_FE(intlist_back,_wrap_IntList_back,swig_arginfo_intlist_back)
 SWIG_ZEND_NAMED_FE(intlist_get,_wrap_IntList_get,swig_arginfo_intlist_get)
 SWIG_ZEND_NAMED_FE(intlist_pos,_wrap_IntList_pos,swig_arginfo_intlist_pos)
 SWIG_ZEND_NAMED_FE(intlist_begin,_wrap_IntList_begin,swig_arginfo_intlist_begin)
 SWIG_ZEND_NAMED_FE(intlist_end,_wrap_IntList_end,swig_arginfo_intlist_end)
 SWIG_ZEND_NAMED_FE(intlist_rbegin,_wrap_IntList_rbegin,swig_arginfo_intlist_rbegin)
 SWIG_ZEND_NAMED_FE(intlist_rend,_wrap_IntList_rend,swig_arginfo_intlist_rend)
 SWIG_ZEND_NAMED_FE(intlist_cyclicpred,_wrap_IntList_cyclicPred,swig_arginfo_intlist_cyclicpred)
 SWIG_ZEND_NAMED_FE(intlist_cyclicsucc,_wrap_IntList_cyclicSucc,swig_arginfo_intlist_cyclicsucc)
 SWIG_ZEND_NAMED_FE(intlist_listequalsequals,_wrap_IntList_ListEqualsEquals,swig_arginfo_intlist_listequalsequals)
 SWIG_ZEND_NAMED_FE(intlist_listnotequals,_wrap_IntList_ListNotEquals,swig_arginfo_intlist_listnotequals)
 SWIG_ZEND_NAMED_FE(intlist_pushfront,_wrap_IntList_pushFront,swig_arginfo_intlist_pushfront)
 SWIG_ZEND_NAMED_FE(intlist_pushback,_wrap_IntList_pushBack,swig_arginfo_intlist_pushback)
 SWIG_ZEND_NAMED_FE(intlist_insert,_wrap_IntList_insert,swig_arginfo_intlist_insert)
 SWIG_ZEND_NAMED_FE(intlist_insertbefore,_wrap_IntList_insertBefore,swig_arginfo_intlist_insertbefore)
 SWIG_ZEND_NAMED_FE(intlist_insertafter,_wrap_IntList_insertAfter,swig_arginfo_intlist_insertafter)
 SWIG_ZEND_NAMED_FE(intlist_popfront,_wrap_IntList_popFront,swig_arginfo_intlist_popfront)
 SWIG_ZEND_NAMED_FE(intlist_popfrontret,_wrap_IntList_popFrontRet,swig_arginfo_intlist_popfrontret)
 SWIG_ZEND_NAMED_FE(intlist_popback,_wrap_IntList_popBack,swig_arginfo_intlist_popback)
 SWIG_ZEND_NAMED_FE(intlist_popbackret,_wrap_IntList_popBackRet,swig_arginfo_intlist_popbackret)
 SWIG_ZEND_NAMED_FE(intlist__del,_wrap_IntList__del,swig_arginfo_intlist__del)
 SWIG_ZEND_NAMED_FE(intlist_removefirst,_wrap_IntList_removeFirst,swig_arginfo_intlist_removefirst)
 SWIG_ZEND_NAMED_FE(intlist_clear,_wrap_IntList_clear,swig_arginfo_intlist_clear)
 SWIG_ZEND_NAMED_FE(intlist_exchange,_wrap_IntList_exchange,swig_arginfo_intlist_exchange)
 SWIG_ZEND_NAMED_FE(intlist_movetofront,_wrap_IntList_moveToFront,swig_arginfo_intlist_movetofront)
 SWIG_ZEND_NAMED_FE(intlist_movetoback,_wrap_IntList_moveToBack,swig_arginfo_intlist_movetoback)
 SWIG_ZEND_NAMED_FE(intlist_movetosucc,_wrap_IntList_moveToSucc,swig_arginfo_intlist_movetosucc)
 SWIG_ZEND_NAMED_FE(intlist_movetoprec,_wrap_IntList_moveToPrec,swig_arginfo_intlist_movetoprec)
 SWIG_ZEND_NAMED_FE(intlist_conc,_wrap_IntList_conc,swig_arginfo_intlist_conc)
 SWIG_ZEND_NAMED_FE(intlist_concfront,_wrap_IntList_concFront,swig_arginfo_intlist_concfront)
 SWIG_ZEND_NAMED_FE(intlist_reverse,_wrap_IntList_reverse,swig_arginfo_intlist_reverse)
 SWIG_ZEND_NAMED_FE(intlist_quicksort,_wrap_IntList_quicksort,swig_arginfo_intlist_quicksort)
 SWIG_ZEND_NAMED_FE(intlist_permute,_wrap_IntList_permute,swig_arginfo_intlist_permute)
 SWIG_ZEND_NAMED_FE(intlist_search,_wrap_IntList_search,swig_arginfo_intlist_search)
 SWIG_ZEND_NAMED_FE(intlist_chooseiterator,_wrap_IntList_chooseIterator,swig_arginfo_intlist_chooseiterator)
 SWIG_ZEND_NAMED_FE(intlist_chooseelement,_wrap_IntList_chooseElement,swig_arginfo_intlist_chooseelement)
 SWIG_ZEND_NAMED_FE(adjelement_theedge,_wrap_AdjElement_theEdge,swig_arginfo_adjelement_theedge)
 SWIG_ZEND_NAMED_FE(adjelement_thenode,_wrap_AdjElement_theNode,swig_arginfo_adjelement_thenode)
 SWIG_ZEND_NAMED_FE(adjelement_twin,_wrap_AdjElement_twin,swig_arginfo_adjelement_twin)
 SWIG_ZEND_NAMED_FE(adjelement_twinnode,_wrap_AdjElement_twinNode,swig_arginfo_adjelement_twinnode)
 SWIG_ZEND_NAMED_FE(adjelement_index,_wrap_AdjElement_index,swig_arginfo_adjelement_index)
 SWIG_ZEND_NAMED_FE(adjelement_clockwisefacesucc,_wrap_AdjElement_clockwiseFaceSucc,swig_arginfo_adjelement_clockwisefacesucc)
 SWIG_ZEND_NAMED_FE(adjelement_clockwisefacepred,_wrap_AdjElement_clockwiseFacePred,swig_arginfo_adjelement_clockwisefacepred)
 SWIG_ZEND_NAMED_FE(adjelement_counterclockwisefacesucc,_wrap_AdjElement_counterClockwiseFaceSucc,swig_arginfo_adjelement_counterclockwisefacesucc)
 SWIG_ZEND_NAMED_FE(adjelement_counterclockwisefacepred,_wrap_AdjElement_counterClockwiseFacePred,swig_arginfo_adjelement_counterclockwisefacepred)
 SWIG_ZEND_NAMED_FE(adjelement_facecyclesucc,_wrap_AdjElement_faceCycleSucc,swig_arginfo_adjelement_facecyclesucc)
 SWIG_ZEND_NAMED_FE(adjelement_facecyclepred,_wrap_AdjElement_faceCyclePred,swig_arginfo_adjelement_facecyclepred)
 SWIG_ZEND_NAMED_FE(adjelement_succ,_wrap_AdjElement_succ,swig_arginfo_adjelement_succ)
 SWIG_ZEND_NAMED_FE(adjelement_pred,_wrap_AdjElement_pred,swig_arginfo_adjelement_pred)
 SWIG_ZEND_NAMED_FE(adjelement_cyclicsucc,_wrap_AdjElement_cyclicSucc,swig_arginfo_adjelement_cyclicsucc)
 SWIG_ZEND_NAMED_FE(adjelement_cyclicpred,_wrap_AdjElement_cyclicPred,swig_arginfo_adjelement_cyclicpred)
 SWIG_ZEND_NAMED_FE(adjelement_compare,_wrap_AdjElement_compare,swig_arginfo_adjelement_compare)
 SWIG_ZEND_NAMED_FE(nodeelement_index,_wrap_NodeElement_index,swig_arginfo_nodeelement_index)
 SWIG_ZEND_NAMED_FE(nodeelement_indeg,_wrap_NodeElement_indeg,swig_arginfo_nodeelement_indeg)
 SWIG_ZEND_NAMED_FE(nodeelement_outdeg,_wrap_NodeElement_outdeg,swig_arginfo_nodeelement_outdeg)
 SWIG_ZEND_NAMED_FE(nodeelement_degree,_wrap_NodeElement_degree,swig_arginfo_nodeelement_degree)
 SWIG_ZEND_NAMED_FE(nodeelement_firstadj,_wrap_NodeElement_firstAdj,swig_arginfo_nodeelement_firstadj)
 SWIG_ZEND_NAMED_FE(nodeelement_lastadj,_wrap_NodeElement_lastAdj,swig_arginfo_nodeelement_lastadj)
 SWIG_ZEND_NAMED_FE(nodeelement_succ,_wrap_NodeElement_succ,swig_arginfo_nodeelement_succ)
 SWIG_ZEND_NAMED_FE(nodeelement_pred,_wrap_NodeElement_pred,swig_arginfo_nodeelement_pred)
 SWIG_ZEND_NAMED_FE(nodeelement_compare,_wrap_NodeElement_compare,swig_arginfo_nodeelement_compare)
 SWIG_ZEND_NAMED_FE(edgeelement_index,_wrap_EdgeElement_index,swig_arginfo_edgeelement_index)
 SWIG_ZEND_NAMED_FE(edgeelement_source,_wrap_EdgeElement_source,swig_arginfo_edgeelement_source)
 SWIG_ZEND_NAMED_FE(edgeelement_target,_wrap_EdgeElement_target,swig_arginfo_edgeelement_target)
 SWIG_ZEND_NAMED_FE(edgeelement_adjsource,_wrap_EdgeElement_adjSource,swig_arginfo_edgeelement_adjsource)
 SWIG_ZEND_NAMED_FE(edgeelement_adjtarget,_wrap_EdgeElement_adjTarget,swig_arginfo_edgeelement_adjtarget)
 SWIG_ZEND_NAMED_FE(edgeelement_opposite,_wrap_EdgeElement_opposite,swig_arginfo_edgeelement_opposite)
 SWIG_ZEND_NAMED_FE(edgeelement_isselfloop,_wrap_EdgeElement_isSelfLoop,swig_arginfo_edgeelement_isselfloop)
 SWIG_ZEND_NAMED_FE(edgeelement_succ,_wrap_EdgeElement_succ,swig_arginfo_edgeelement_succ)
 SWIG_ZEND_NAMED_FE(edgeelement_pred,_wrap_EdgeElement_pred,swig_arginfo_edgeelement_pred)
 SWIG_ZEND_NAMED_FE(edgeelement_isincident,_wrap_EdgeElement_isIncident,swig_arginfo_edgeelement_isincident)
 SWIG_ZEND_NAMED_FE(edgeelement_commonnode,_wrap_EdgeElement_commonNode,swig_arginfo_edgeelement_commonnode)
 SWIG_ZEND_NAMED_FE(edgeelement_compare,_wrap_EdgeElement_compare,swig_arginfo_edgeelement_compare)
 SWIG_ZEND_NAMED_FE(new_graph,_wrap_new_Graph,swig_arginfo_new_graph)
 SWIG_ZEND_NAMED_FE(graph_c_empty,_wrap_Graph_c_empty,swig_arginfo_graph_c_empty)
 SWIG_ZEND_NAMED_FE(graph_numberofnodes,_wrap_Graph_numberOfNodes,swig_arginfo_graph_numberofnodes)
 SWIG_ZEND_NAMED_FE(graph_numberofedges,_wrap_Graph_numberOfEdges,swig_arginfo_graph_numberofedges)
 SWIG_ZEND_NAMED_FE(graph_maxnodeindex,_wrap_Graph_maxNodeIndex,swig_arginfo_graph_maxnodeindex)
 SWIG_ZEND_NAMED_FE(graph_maxedgeindex,_wrap_Graph_maxEdgeIndex,swig_arginfo_graph_maxedgeindex)
 SWIG_ZEND_NAMED_FE(graph_maxadjentryindex,_wrap_Graph_maxAdjEntryIndex,swig_arginfo_graph_maxadjentryindex)
 SWIG_ZEND_NAMED_FE(graph_nodearraytablesize,_wrap_Graph_nodeArrayTableSize,swig_arginfo_graph_nodearraytablesize)
 SWIG_ZEND_NAMED_FE(graph_edgearraytablesize,_wrap_Graph_edgeArrayTableSize,swig_arginfo_graph_edgearraytablesize)
 SWIG_ZEND_NAMED_FE(graph_adjentryarraytablesize,_wrap_Graph_adjEntryArrayTableSize,swig_arginfo_graph_adjentryarraytablesize)
 SWIG_ZEND_NAMED_FE(graph_firstnode,_wrap_Graph_firstNode,swig_arginfo_graph_firstnode)
 SWIG_ZEND_NAMED_FE(graph_lastnode,_wrap_Graph_lastNode,swig_arginfo_graph_lastnode)
 SWIG_ZEND_NAMED_FE(graph_firstedge,_wrap_Graph_firstEdge,swig_arginfo_graph_firstedge)
 SWIG_ZEND_NAMED_FE(graph_lastedge,_wrap_Graph_lastEdge,swig_arginfo_graph_lastedge)
 SWIG_ZEND_NAMED_FE(graph_choosenode,_wrap_Graph_chooseNode,swig_arginfo_graph_choosenode)
 SWIG_ZEND_NAMED_FE(graph_chooseedge,_wrap_Graph_chooseEdge,swig_arginfo_graph_chooseedge)
 SWIG_ZEND_NAMED_FE(graph_allnodes,_wrap_Graph_allNodes,swig_arginfo_graph_allnodes)
 SWIG_ZEND_NAMED_FE(graph_alledges,_wrap_Graph_allEdges,swig_arginfo_graph_alledges)
 SWIG_ZEND_NAMED_FE(graph_adjedges,_wrap_Graph_adjEdges,swig_arginfo_graph_adjedges)
 SWIG_ZEND_NAMED_FE(graph_adjentries,_wrap_Graph_adjEntries,swig_arginfo_graph_adjentries)
 SWIG_ZEND_NAMED_FE(graph_inedges,_wrap_Graph_inEdges,swig_arginfo_graph_inedges)
 SWIG_ZEND_NAMED_FE(graph_outedges,_wrap_Graph_outEdges,swig_arginfo_graph_outedges)
 SWIG_ZEND_NAMED_FE(graph_newnode,_wrap_Graph_newNode,swig_arginfo_graph_newnode)
 SWIG_ZEND_NAMED_FE(graph_newedge,_wrap_Graph_newEdge,swig_arginfo_graph_newedge)
 SWIG_ZEND_NAMED_FE(graph_delnode,_wrap_Graph_delNode,swig_arginfo_graph_delnode)
 SWIG_ZEND_NAMED_FE(graph_deledge,_wrap_Graph_delEdge,swig_arginfo_graph_deledge)
 SWIG_ZEND_NAMED_FE(graph_clear,_wrap_Graph_clear,swig_arginfo_graph_clear)
 SWIG_ZEND_NAMED_FE(graph_hideedge,_wrap_Graph_hideEdge,swig_arginfo_graph_hideedge)
 SWIG_ZEND_NAMED_FE(graph_restoreedge,_wrap_Graph_restoreEdge,swig_arginfo_graph_restoreedge)
 SWIG_ZEND_NAMED_FE(graph_restorealledges,_wrap_Graph_restoreAllEdges,swig_arginfo_graph_restorealledges)
 SWIG_ZEND_NAMED_FE(graph_split,_wrap_Graph_split,swig_arginfo_graph_split)
 SWIG_ZEND_NAMED_FE(graph_unsplit,_wrap_Graph_unsplit,swig_arginfo_graph_unsplit)
 SWIG_ZEND_NAMED_FE(graph_splitnode,_wrap_Graph_splitNode,swig_arginfo_graph_splitnode)
 SWIG_ZEND_NAMED_FE(graph_contract,_wrap_Graph_contract,swig_arginfo_graph_contract)
 SWIG_ZEND_NAMED_FE(graph_move,_wrap_Graph_move,swig_arginfo_graph_move)
 SWIG_ZEND_NAMED_FE(graph_movetarget,_wrap_Graph_moveTarget,swig_arginfo_graph_movetarget)
 SWIG_ZEND_NAMED_FE(graph_movesource,_wrap_Graph_moveSource,swig_arginfo_graph_movesource)
 SWIG_ZEND_NAMED_FE(graph_searchedge,_wrap_Graph_searchEdge,swig_arginfo_graph_searchedge)
 SWIG_ZEND_NAMED_FE(graph_reverseedge,_wrap_Graph_reverseEdge,swig_arginfo_graph_reverseedge)
 SWIG_ZEND_NAMED_FE(graph_reversealledges,_wrap_Graph_reverseAllEdges,swig_arginfo_graph_reversealledges)
 SWIG_ZEND_NAMED_FE(graph_collaps,_wrap_Graph_collaps,swig_arginfo_graph_collaps)
 SWIG_ZEND_NAMED_FE(graph_sort,_wrap_Graph_sort,swig_arginfo_graph_sort)
 SWIG_ZEND_NAMED_FE(graph_moveadj,_wrap_Graph_moveAdj,swig_arginfo_graph_moveadj)
 SWIG_ZEND_NAMED_FE(graph_moveadjafter,_wrap_Graph_moveAdjAfter,swig_arginfo_graph_moveadjafter)
 SWIG_ZEND_NAMED_FE(graph_moveadjbefore,_wrap_Graph_moveAdjBefore,swig_arginfo_graph_moveadjbefore)
 SWIG_ZEND_NAMED_FE(graph_reverseadjedges,_wrap_Graph_reverseAdjEdges,swig_arginfo_graph_reverseadjedges)
 SWIG_ZEND_NAMED_FE(graph_swapadjedges,_wrap_Graph_swapAdjEdges,swig_arginfo_graph_swapadjedges)
 SWIG_ZEND_NAMED_FE(graph_genus,_wrap_Graph_genus,swig_arginfo_graph_genus)
 SWIG_ZEND_NAMED_FE(graph_representscombembedding,_wrap_Graph_representsCombEmbedding,swig_arginfo_graph_representscombembedding)
 SWIG_ZEND_NAMED_FE(graph_consistencycheck,_wrap_Graph_consistencyCheck,swig_arginfo_graph_consistencycheck)
 SWIG_ZEND_NAMED_FE(graph_resetedgeidcount,_wrap_Graph_resetEdgeIdCount,swig_arginfo_graph_resetedgeidcount)
 SWIG_ZEND_NAMED_FE(graph_nextpower2,_wrap_Graph_nextPower2,swig_arginfo_graph_nextpower2)
 SWIG_ZEND_NAMED_FE(new_intnodearray,_wrap_new_IntNodeArray,swig_arginfo_new_intnodearray)
 SWIG_ZEND_NAMED_FE(intnodearray_valid,_wrap_IntNodeArray_valid,swig_arginfo_intnodearray_valid)
 SWIG_ZEND_NAMED_FE(intnodearray_graphof,_wrap_IntNodeArray_graphOf,swig_arginfo_intnodearray_graphof)
 SWIG_ZEND_NAMED_FE(intnodearray_init,_wrap_IntNodeArray_init,swig_arginfo_intnodearray_init)
 SWIG_ZEND_NAMED_FE(intnodearray_fill,_wrap_IntNodeArray_fill,swig_arginfo_intnodearray_fill)
 SWIG_ZEND_NAMED_FE(intnodearray_get_val,_wrap_IntNodeArray_get_val,swig_arginfo_intnodearray_get_val)
 SWIG_ZEND_NAMED_FE(intnodearray_set_val,_wrap_IntNodeArray_set_val,swig_arginfo_intnodearray_set_val)
 SWIG_ZEND_NAMED_FE(new_longnodearray,_wrap_new_LongNodeArray,swig_arginfo_new_longnodearray)
 SWIG_ZEND_NAMED_FE(longnodearray_valid,_wrap_LongNodeArray_valid,swig_arginfo_longnodearray_valid)
 SWIG_ZEND_NAMED_FE(longnodearray_graphof,_wrap_LongNodeArray_graphOf,swig_arginfo_longnodearray_graphof)
 SWIG_ZEND_NAMED_FE(longnodearray_init,_wrap_LongNodeArray_init,swig_arginfo_longnodearray_init)
 SWIG_ZEND_NAMED_FE(longnodearray_fill,_wrap_LongNodeArray_fill,swig_arginfo_longnodearray_fill)
 SWIG_ZEND_NAMED_FE(longnodearray_get_val,_wrap_LongNodeArray_get_val,swig_arginfo_longnodearray_get_val)
 SWIG_ZEND_NAMED_FE(longnodearray_set_val,_wrap_LongNodeArray_set_val,swig_arginfo_longnodearray_set_val)
 SWIG_ZEND_NAMED_FE(new_floatnodearray,_wrap_new_FloatNodeArray,swig_arginfo_new_floatnodearray)
 SWIG_ZEND_NAMED_FE(floatnodearray_valid,_wrap_FloatNodeArray_valid,swig_arginfo_floatnodearray_valid)
 SWIG_ZEND_NAMED_FE(floatnodearray_graphof,_wrap_FloatNodeArray_graphOf,swig_arginfo_floatnodearray_graphof)
 SWIG_ZEND_NAMED_FE(floatnodearray_init,_wrap_FloatNodeArray_init,swig_arginfo_floatnodearray_init)
 SWIG_ZEND_NAMED_FE(floatnodearray_fill,_wrap_FloatNodeArray_fill,swig_arginfo_floatnodearray_fill)
 SWIG_ZEND_NAMED_FE(floatnodearray_get_val,_wrap_FloatNodeArray_get_val,swig_arginfo_floatnodearray_get_val)
 SWIG_ZEND_NAMED_FE(floatnodearray_set_val,_wrap_FloatNodeArray_set_val,swig_arginfo_floatnodearray_set_val)
 SWIG_ZEND_NAMED_FE(new_doublenodearray,_wrap_new_DoubleNodeArray,swig_arginfo_new_doublenodearray)
 SWIG_ZEND_NAMED_FE(doublenodearray_valid,_wrap_DoubleNodeArray_valid,swig_arginfo_doublenodearray_valid)
 SWIG_ZEND_NAMED_FE(doublenodearray_graphof,_wrap_DoubleNodeArray_graphOf,swig_arginfo_doublenodearray_graphof)
 SWIG_ZEND_NAMED_FE(doublenodearray_init,_wrap_DoubleNodeArray_init,swig_arginfo_doublenodearray_init)
 SWIG_ZEND_NAMED_FE(doublenodearray_fill,_wrap_DoubleNodeArray_fill,swig_arginfo_doublenodearray_fill)
 SWIG_ZEND_NAMED_FE(doublenodearray_get_val,_wrap_DoubleNodeArray_get_val,swig_arginfo_doublenodearray_get_val)
 SWIG_ZEND_NAMED_FE(doublenodearray_set_val,_wrap_DoubleNodeArray_set_val,swig_arginfo_doublenodearray_set_val)
 SWIG_ZEND_NAMED_FE(new_intedgearray,_wrap_new_IntEdgeArray,swig_arginfo_new_intedgearray)
 SWIG_ZEND_NAMED_FE(intedgearray_valid,_wrap_IntEdgeArray_valid,swig_arginfo_intedgearray_valid)
 SWIG_ZEND_NAMED_FE(intedgearray_graphof,_wrap_IntEdgeArray_graphOf,swig_arginfo_intedgearray_graphof)
 SWIG_ZEND_NAMED_FE(intedgearray_init,_wrap_IntEdgeArray_init,swig_arginfo_intedgearray_init)
 SWIG_ZEND_NAMED_FE(intedgearray_fill,_wrap_IntEdgeArray_fill,swig_arginfo_intedgearray_fill)
 SWIG_ZEND_NAMED_FE(intedgearray_get_val,_wrap_IntEdgeArray_get_val,swig_arginfo_intedgearray_get_val)
 SWIG_ZEND_NAMED_FE(intedgearray_set_val,_wrap_IntEdgeArray_set_val,swig_arginfo_intedgearray_set_val)
 SWIG_ZEND_NAMED_FE(new_longedgearray,_wrap_new_LongEdgeArray,swig_arginfo_new_longedgearray)
 SWIG_ZEND_NAMED_FE(longedgearray_valid,_wrap_LongEdgeArray_valid,swig_arginfo_longedgearray_valid)
 SWIG_ZEND_NAMED_FE(longedgearray_graphof,_wrap_LongEdgeArray_graphOf,swig_arginfo_longedgearray_graphof)
 SWIG_ZEND_NAMED_FE(longedgearray_init,_wrap_LongEdgeArray_init,swig_arginfo_longedgearray_init)
 SWIG_ZEND_NAMED_FE(longedgearray_fill,_wrap_LongEdgeArray_fill,swig_arginfo_longedgearray_fill)
 SWIG_ZEND_NAMED_FE(longedgearray_get_val,_wrap_LongEdgeArray_get_val,swig_arginfo_longedgearray_get_val)
 SWIG_ZEND_NAMED_FE(longedgearray_set_val,_wrap_LongEdgeArray_set_val,swig_arginfo_longedgearray_set_val)
 SWIG_ZEND_NAMED_FE(new_floatedgearray,_wrap_new_FloatEdgeArray,swig_arginfo_new_floatedgearray)
 SWIG_ZEND_NAMED_FE(floatedgearray_valid,_wrap_FloatEdgeArray_valid,swig_arginfo_floatedgearray_valid)
 SWIG_ZEND_NAMED_FE(floatedgearray_graphof,_wrap_FloatEdgeArray_graphOf,swig_arginfo_floatedgearray_graphof)
 SWIG_ZEND_NAMED_FE(floatedgearray_init,_wrap_FloatEdgeArray_init,swig_arginfo_floatedgearray_init)
 SWIG_ZEND_NAMED_FE(floatedgearray_fill,_wrap_FloatEdgeArray_fill,swig_arginfo_floatedgearray_fill)
 SWIG_ZEND_NAMED_FE(floatedgearray_get_val,_wrap_FloatEdgeArray_get_val,swig_arginfo_floatedgearray_get_val)
 SWIG_ZEND_NAMED_FE(floatedgearray_set_val,_wrap_FloatEdgeArray_set_val,swig_arginfo_floatedgearray_set_val)
 SWIG_ZEND_NAMED_FE(new_doubleedgearray,_wrap_new_DoubleEdgeArray,swig_arginfo_new_doubleedgearray)
 SWIG_ZEND_NAMED_FE(doubleedgearray_valid,_wrap_DoubleEdgeArray_valid,swig_arginfo_doubleedgearray_valid)
 SWIG_ZEND_NAMED_FE(doubleedgearray_graphof,_wrap_DoubleEdgeArray_graphOf,swig_arginfo_doubleedgearray_graphof)
 SWIG_ZEND_NAMED_FE(doubleedgearray_init,_wrap_DoubleEdgeArray_init,swig_arginfo_doubleedgearray_init)
 SWIG_ZEND_NAMED_FE(doubleedgearray_fill,_wrap_DoubleEdgeArray_fill,swig_arginfo_doubleedgearray_fill)
 SWIG_ZEND_NAMED_FE(doubleedgearray_get_val,_wrap_DoubleEdgeArray_get_val,swig_arginfo_doubleedgearray_get_val)
 SWIG_ZEND_NAMED_FE(doubleedgearray_set_val,_wrap_DoubleEdgeArray_set_val,swig_arginfo_doubleedgearray_set_val)
 SWIG_ZEND_NAMED_FE(multilevelbuilder_setedgelengthadjustment,_wrap_MultilevelBuilder_setEdgeLengthAdjustment,swig_arginfo_multilevelbuilder_setedgelengthadjustment)
 SWIG_ZEND_NAMED_FE(multilevelbuilder_getnumlevels,_wrap_MultilevelBuilder_getNumLevels,swig_arginfo_multilevelbuilder_getnumlevels)
 SWIG_ZEND_NAMED_FE(new_edgecovermerger,_wrap_new_EdgeCoverMerger,swig_arginfo_new_edgecovermerger)
 SWIG_ZEND_NAMED_FE(edgecovermerger_setfactor,_wrap_EdgeCoverMerger_setFactor,swig_arginfo_edgecovermerger_setfactor)
 SWIG_ZEND_NAMED_FE(independentsetmerger_setsearchdepthbase,_wrap_IndependentSetMerger_setSearchDepthBase,swig_arginfo_independentsetmerger_setsearchdepthbase)
 SWIG_ZEND_NAMED_FE(new_independentsetmerger,_wrap_new_IndependentSetMerger,swig_arginfo_new_independentsetmerger)
 SWIG_ZEND_NAMED_FE(localbiconnectedmerger_setfactor,_wrap_LocalBiconnectedMerger_setFactor,swig_arginfo_localbiconnectedmerger_setfactor)
 SWIG_ZEND_NAMED_FE(matchingmerger_selectbynodemass,_wrap_MatchingMerger_selectByNodeMass,swig_arginfo_matchingmerger_selectbynodemass)
 SWIG_ZEND_NAMED_FE(randommerger_setfactor,_wrap_RandomMerger_setFactor,swig_arginfo_randommerger_setfactor)
 SWIG_ZEND_NAMED_FE(new_solarmerger,_wrap_new_SolarMerger,swig_arginfo_new_solarmerger)
 SWIG_ZEND_NAMED_FE(initialplacer_setrandomoffset,_wrap_InitialPlacer_setRandomOffset,swig_arginfo_initialplacer_setrandomoffset)
 SWIG_ZEND_NAMED_FE(randomplacer_setcirclesize,_wrap_RandomPlacer_setCircleSize,swig_arginfo_randomplacer_setcirclesize)
 SWIG_ZEND_NAMED_FE(circleplacer_setradiusfixed,_wrap_CirclePlacer_setRadiusFixed,swig_arginfo_circleplacer_setradiusfixed)
 SWIG_ZEND_NAMED_FE(circleplacer_setcirclesize,_wrap_CirclePlacer_setCircleSize,swig_arginfo_circleplacer_setcirclesize)
 SWIG_ZEND_NAMED_FE(circleplacer_setnodeselection,_wrap_CirclePlacer_setNodeSelection,swig_arginfo_circleplacer_setnodeselection)
 SWIG_ZEND_NAMED_FE(zeroplacer_setrandomrange,_wrap_ZeroPlacer_setRandomRange,swig_arginfo_zeroplacer_setrandomrange)
 SWIG_ZEND_NAMED_FE(barycenterplacer_weightedpositionpriority,_wrap_BarycenterPlacer_weightedPositionPriority,swig_arginfo_barycenterplacer_weightedpositionpriority)
 SWIG_ZEND_NAMED_FE(fasthierarchylayout_nodedistance,_wrap_FastHierarchyLayout_nodeDistance,swig_arginfo_fasthierarchylayout_nodedistance)
 SWIG_ZEND_NAMED_FE(fasthierarchylayout_layerdistance,_wrap_FastHierarchyLayout_layerDistance,swig_arginfo_fasthierarchylayout_layerdistance)
 SWIG_ZEND_NAMED_FE(fasthierarchylayout_fixedlayerdistance,_wrap_FastHierarchyLayout_fixedLayerDistance,swig_arginfo_fasthierarchylayout_fixedlayerdistance)
 SWIG_ZEND_NAMED_FE(fastsimplehierarchylayout_nodedistance,_wrap_FastSimpleHierarchyLayout_nodeDistance,swig_arginfo_fastsimplehierarchylayout_nodedistance)
 SWIG_ZEND_NAMED_FE(fastsimplehierarchylayout_layerdistance,_wrap_FastSimpleHierarchyLayout_layerDistance,swig_arginfo_fastsimplehierarchylayout_layerdistance)
 SWIG_ZEND_NAMED_FE(fastsimplehierarchylayout_downward,_wrap_FastSimpleHierarchyLayout_downward,swig_arginfo_fastsimplehierarchylayout_downward)
 SWIG_ZEND_NAMED_FE(fastsimplehierarchylayout_lefttoright,_wrap_FastSimpleHierarchyLayout_leftToRight,swig_arginfo_fastsimplehierarchylayout_lefttoright)
 SWIG_ZEND_NAMED_FE(fastsimplehierarchylayout_balanced,_wrap_FastSimpleHierarchyLayout_balanced,swig_arginfo_fastsimplehierarchylayout_balanced)
 SWIG_ZEND_NAMED_FE(optimalhierarchylayout_nodedistance,_wrap_OptimalHierarchyLayout_nodeDistance,swig_arginfo_optimalhierarchylayout_nodedistance)
 SWIG_ZEND_NAMED_FE(optimalhierarchylayout_layerdistance,_wrap_OptimalHierarchyLayout_layerDistance,swig_arginfo_optimalhierarchylayout_layerdistance)
 SWIG_ZEND_NAMED_FE(optimalhierarchylayout_fixedlayerdistance,_wrap_OptimalHierarchyLayout_fixedLayerDistance,swig_arginfo_optimalhierarchylayout_fixedlayerdistance)
 SWIG_ZEND_NAMED_FE(optimalhierarchylayout_weightsegments,_wrap_OptimalHierarchyLayout_weightSegments,swig_arginfo_optimalhierarchylayout_weightsegments)
 SWIG_ZEND_NAMED_FE(optimalhierarchylayout_weightbalancing,_wrap_OptimalHierarchyLayout_weightBalancing,swig_arginfo_optimalhierarchylayout_weightbalancing)
 SWIG_ZEND_NAMED_FE(optimalranking_separatemultiedges,_wrap_OptimalRanking_separateMultiEdges,swig_arginfo_optimalranking_separatemultiedges)
 SWIG_ZEND_NAMED_FE(optimalranking_setsubgraph,_wrap_OptimalRanking_setSubgraph,swig_arginfo_optimalranking_setsubgraph)
 SWIG_ZEND_NAMED_FE(longestpathranking_separatedeg0layer,_wrap_LongestPathRanking_separateDeg0Layer,swig_arginfo_longestpathranking_separatedeg0layer)
 SWIG_ZEND_NAMED_FE(longestpathranking_separatemultiedges,_wrap_LongestPathRanking_separateMultiEdges,swig_arginfo_longestpathranking_separatemultiedges)
 SWIG_ZEND_NAMED_FE(longestpathranking_optimizeedgelength,_wrap_LongestPathRanking_optimizeEdgeLength,swig_arginfo_longestpathranking_optimizeedgelength)
 SWIG_ZEND_NAMED_FE(longestpathranking_alignbaseclasses,_wrap_LongestPathRanking_alignBaseClasses,swig_arginfo_longestpathranking_alignbaseclasses)
 SWIG_ZEND_NAMED_FE(longestpathranking_alignsiblings,_wrap_LongestPathRanking_alignSiblings,swig_arginfo_longestpathranking_alignsiblings)
 SWIG_ZEND_NAMED_FE(longestpathranking_setsubgraph,_wrap_LongestPathRanking_setSubgraph,swig_arginfo_longestpathranking_setsubgraph)
 SWIG_ZEND_NAMED_FE(coffmangrahamranking_setsubgraph,_wrap_CoffmanGrahamRanking_setSubgraph,swig_arginfo_coffmangrahamranking_setsubgraph)
 SWIG_ZEND_NAMED_FE(coffmangrahamranking_width,_wrap_CoffmanGrahamRanking_width,swig_arginfo_coffmangrahamranking_width)
 SWIG_ZEND_NAMED_FE(globalsifting_nrepeats,_wrap_GlobalSifting_nRepeats,swig_arginfo_globalsifting_nrepeats)
 SWIG_ZEND_NAMED_FE(gridsifting_verticalstepsbound,_wrap_GridSifting_verticalStepsBound,swig_arginfo_gridsifting_verticalstepsbound)
 SWIG_ZEND_NAMED_FE(fastplanarsubgraph_runs,_wrap_FastPlanarSubgraph_runs,swig_arginfo_fastplanarsubgraph_runs)
 SWIG_ZEND_NAMED_FE(fixedembeddinginserter_removereinsert,_wrap_FixedEmbeddingInserter_removeReinsert,swig_arginfo_fixedembeddinginserter_removereinsert)
 SWIG_ZEND_NAMED_FE(fixedembeddinginserter_percentmostcrossed,_wrap_FixedEmbeddingInserter_percentMostCrossed,swig_arginfo_fixedembeddinginserter_percentmostcrossed)
 SWIG_ZEND_NAMED_FE(fixedembeddinginserter_keepembedding,_wrap_FixedEmbeddingInserter_keepEmbedding,swig_arginfo_fixedembeddinginserter_keepembedding)
 SWIG_ZEND_NAMED_FE(variableembeddinginserter_removereinsert,_wrap_VariableEmbeddingInserter_removeReinsert,swig_arginfo_variableembeddinginserter_removereinsert)
 SWIG_ZEND_NAMED_FE(variableembeddinginserter_percentmostcrossed,_wrap_VariableEmbeddingInserter_percentMostCrossed,swig_arginfo_variableembeddinginserter_percentmostcrossed)
 SWIG_ZEND_NAMED_FE(multiedgeapproxinserter_removereinsertfix,_wrap_MultiEdgeApproxInserter_removeReinsertFix,swig_arginfo_multiedgeapproxinserter_removereinsertfix)
 SWIG_ZEND_NAMED_FE(multiedgeapproxinserter_removereinsertvar,_wrap_MultiEdgeApproxInserter_removeReinsertVar,swig_arginfo_multiedgeapproxinserter_removereinsertvar)
 SWIG_ZEND_NAMED_FE(multiedgeapproxinserter_percentmostcrossedfix,_wrap_MultiEdgeApproxInserter_percentMostCrossedFix,swig_arginfo_multiedgeapproxinserter_percentmostcrossedfix)
 SWIG_ZEND_NAMED_FE(multiedgeapproxinserter_percentmostcrossedvar,_wrap_MultiEdgeApproxInserter_percentMostCrossedVar,swig_arginfo_multiedgeapproxinserter_percentmostcrossedvar)
 SWIG_ZEND_NAMED_FE(multiedgeapproxinserter_statistics,_wrap_MultiEdgeApproxInserter_statistics,swig_arginfo_multiedgeapproxinserter_statistics)
 SWIG_ZEND_NAMED_FE(variableembeddinginserterdyn_removereinsert,_wrap_VariableEmbeddingInserterDyn_removeReinsert,swig_arginfo_variableembeddinginserterdyn_removereinsert)
 SWIG_ZEND_NAMED_FE(variableembeddinginserterdyn_percentmostcrossed,_wrap_VariableEmbeddingInserterDyn_percentMostCrossed,swig_arginfo_variableembeddinginserterdyn_percentmostcrossed)
 SWIG_ZEND_NAMED_FE(ortholayout_separation,_wrap_OrthoLayout_separation,swig_arginfo_ortholayout_separation)
 SWIG_ZEND_NAMED_FE(ortholayout_coverhang,_wrap_OrthoLayout_cOverhang,swig_arginfo_ortholayout_coverhang)
 SWIG_ZEND_NAMED_FE(ortholayout_margin,_wrap_OrthoLayout_margin,swig_arginfo_ortholayout_margin)
 SWIG_ZEND_NAMED_FE(ortholayout_progressive,_wrap_OrthoLayout_progressive,swig_arginfo_ortholayout_progressive)
 SWIG_ZEND_NAMED_FE(ortholayout_scaling,_wrap_OrthoLayout_scaling,swig_arginfo_ortholayout_scaling)
 SWIG_ZEND_NAMED_FE(ortholayout_bendbound,_wrap_OrthoLayout_bendBound,swig_arginfo_ortholayout_bendbound)
 SWIG_ZEND_NAMED_FE(inttostroketype,_wrap_intToStrokeType,swig_arginfo_inttostroketype)
 SWIG_ZEND_NAMED_FE(inttofillpattern,_wrap_intToFillPattern,swig_arginfo_inttofillpattern)
 SWIG_ZEND_NAMED_FE(new_color,_wrap_new_Color,swig_arginfo_new_color)
 SWIG_ZEND_NAMED_FE(color_red,_wrap_Color_red,swig_arginfo_color_red)
 SWIG_ZEND_NAMED_FE(color_green,_wrap_Color_green,swig_arginfo_color_green)
 SWIG_ZEND_NAMED_FE(color_blue,_wrap_Color_blue,swig_arginfo_color_blue)
 SWIG_ZEND_NAMED_FE(color_alpha,_wrap_Color_alpha,swig_arginfo_color_alpha)
 SWIG_ZEND_NAMED_FE(color_tostring,_wrap_Color_toString,swig_arginfo_color_tostring)
 SWIG_ZEND_NAMED_FE(color_fromstring,_wrap_Color_fromString,swig_arginfo_color_fromstring)
 SWIG_ZEND_NAMED_FE(color___notequals__,_wrap_Color___notequals__,swig_arginfo_color___notequals__)
 SWIG_ZEND_NAMED_FE(stroke_m_color_set,_wrap_Stroke_m_color_set,swig_arginfo_stroke_m_color_set)
 SWIG_ZEND_NAMED_FE(stroke_m_color_get,_wrap_Stroke_m_color_get,swig_arginfo_stroke_m_color_get)
 SWIG_ZEND_NAMED_FE(stroke_m_width_set,_wrap_Stroke_m_width_set,swig_arginfo_stroke_m_width_set)
 SWIG_ZEND_NAMED_FE(stroke_m_width_get,_wrap_Stroke_m_width_get,swig_arginfo_stroke_m_width_get)
 SWIG_ZEND_NAMED_FE(stroke_m_type_set,_wrap_Stroke_m_type_set,swig_arginfo_stroke_m_type_set)
 SWIG_ZEND_NAMED_FE(stroke_m_type_get,_wrap_Stroke_m_type_get,swig_arginfo_stroke_m_type_get)
 SWIG_ZEND_NAMED_FE(stroke_m_cap_set,_wrap_Stroke_m_cap_set,swig_arginfo_stroke_m_cap_set)
 SWIG_ZEND_NAMED_FE(stroke_m_cap_get,_wrap_Stroke_m_cap_get,swig_arginfo_stroke_m_cap_get)
 SWIG_ZEND_NAMED_FE(stroke_m_join_set,_wrap_Stroke_m_join_set,swig_arginfo_stroke_m_join_set)
 SWIG_ZEND_NAMED_FE(stroke_m_join_get,_wrap_Stroke_m_join_get,swig_arginfo_stroke_m_join_get)
 SWIG_ZEND_NAMED_FE(new_stroke,_wrap_new_Stroke,swig_arginfo_new_stroke)
 SWIG_ZEND_NAMED_FE(fill_m_color_set,_wrap_Fill_m_color_set,swig_arginfo_fill_m_color_set)
 SWIG_ZEND_NAMED_FE(fill_m_color_get,_wrap_Fill_m_color_get,swig_arginfo_fill_m_color_get)
 SWIG_ZEND_NAMED_FE(fill_m_bgcolor_set,_wrap_Fill_m_bgColor_set,swig_arginfo_fill_m_bgcolor_set)
 SWIG_ZEND_NAMED_FE(fill_m_bgcolor_get,_wrap_Fill_m_bgColor_get,swig_arginfo_fill_m_bgcolor_get)
 SWIG_ZEND_NAMED_FE(fill_m_pattern_set,_wrap_Fill_m_pattern_set,swig_arginfo_fill_m_pattern_set)
 SWIG_ZEND_NAMED_FE(fill_m_pattern_get,_wrap_Fill_m_pattern_get,swig_arginfo_fill_m_pattern_get)
 SWIG_ZEND_NAMED_FE(new_fill,_wrap_new_Fill,swig_arginfo_new_fill)
 SWIG_ZEND_NAMED_FE(new_graphattributes,_wrap_new_GraphAttributes,swig_arginfo_new_graphattributes)
 SWIG_ZEND_NAMED_FE(graphattributes_attributes,_wrap_GraphAttributes_attributes,swig_arginfo_graphattributes_attributes)
 SWIG_ZEND_NAMED_FE(graphattributes_init,_wrap_GraphAttributes_init,swig_arginfo_graphattributes_init)
 SWIG_ZEND_NAMED_FE(graphattributes_initattributes,_wrap_GraphAttributes_initAttributes,swig_arginfo_graphattributes_initattributes)
 SWIG_ZEND_NAMED_FE(graphattributes_destroyattributes,_wrap_GraphAttributes_destroyAttributes,swig_arginfo_graphattributes_destroyattributes)
 SWIG_ZEND_NAMED_FE(graphattributes_constgraph,_wrap_GraphAttributes_constGraph,swig_arginfo_graphattributes_constgraph)
 SWIG_ZEND_NAMED_FE(graphattributes_directed,_wrap_GraphAttributes_directed,swig_arginfo_graphattributes_directed)
 SWIG_ZEND_NAMED_FE(graphattributes_setdirected,_wrap_GraphAttributes_setDirected,swig_arginfo_graphattributes_setdirected)
 SWIG_ZEND_NAMED_FE(graphattributes_x,_wrap_GraphAttributes_x,swig_arginfo_graphattributes_x)
 SWIG_ZEND_NAMED_FE(graphattributes_setx,_wrap_GraphAttributes_setX,swig_arginfo_graphattributes_setx)
 SWIG_ZEND_NAMED_FE(graphattributes_y,_wrap_GraphAttributes_y,swig_arginfo_graphattributes_y)
 SWIG_ZEND_NAMED_FE(graphattributes_sety,_wrap_GraphAttributes_setY,swig_arginfo_graphattributes_sety)
 SWIG_ZEND_NAMED_FE(graphattributes_z,_wrap_GraphAttributes_z,swig_arginfo_graphattributes_z)
 SWIG_ZEND_NAMED_FE(graphattributes_setz,_wrap_GraphAttributes_setZ,swig_arginfo_graphattributes_setz)
 SWIG_ZEND_NAMED_FE(graphattributes_height,_wrap_GraphAttributes_height,swig_arginfo_graphattributes_height)
 SWIG_ZEND_NAMED_FE(graphattributes_setheight,_wrap_GraphAttributes_setHeight,swig_arginfo_graphattributes_setheight)
 SWIG_ZEND_NAMED_FE(graphattributes_width,_wrap_GraphAttributes_width,swig_arginfo_graphattributes_width)
 SWIG_ZEND_NAMED_FE(graphattributes_setwidth,_wrap_GraphAttributes_setWidth,swig_arginfo_graphattributes_setwidth)
 SWIG_ZEND_NAMED_FE(graphattributes_shape,_wrap_GraphAttributes_shape,swig_arginfo_graphattributes_shape)
 SWIG_ZEND_NAMED_FE(graphattributes_setshape,_wrap_GraphAttributes_setShape,swig_arginfo_graphattributes_setshape)
 SWIG_ZEND_NAMED_FE(graphattributes_fillpattern,_wrap_GraphAttributes_fillPattern,swig_arginfo_graphattributes_fillpattern)
 SWIG_ZEND_NAMED_FE(graphattributes_setfillpattern,_wrap_GraphAttributes_setFillPattern,swig_arginfo_graphattributes_setfillpattern)
 SWIG_ZEND_NAMED_FE(graphattributes_fillcolor,_wrap_GraphAttributes_fillColor,swig_arginfo_graphattributes_fillcolor)
 SWIG_ZEND_NAMED_FE(graphattributes_setfillcolor,_wrap_GraphAttributes_setFillColor,swig_arginfo_graphattributes_setfillcolor)
 SWIG_ZEND_NAMED_FE(graphattributes_fillbgcolor,_wrap_GraphAttributes_fillBgColor,swig_arginfo_graphattributes_fillbgcolor)
 SWIG_ZEND_NAMED_FE(graphattributes_setfillbgcolor,_wrap_GraphAttributes_setFillBgColor,swig_arginfo_graphattributes_setfillbgcolor)
 SWIG_ZEND_NAMED_FE(graphattributes_templatenode,_wrap_GraphAttributes_templateNode,swig_arginfo_graphattributes_templatenode)
 SWIG_ZEND_NAMED_FE(graphattributes_settemplatenode,_wrap_GraphAttributes_setTemplateNode,swig_arginfo_graphattributes_settemplatenode)
 SWIG_ZEND_NAMED_FE(graphattributes_weight,_wrap_GraphAttributes_weight,swig_arginfo_graphattributes_weight)
 SWIG_ZEND_NAMED_FE(graphattributes_setweight,_wrap_GraphAttributes_setWeight,swig_arginfo_graphattributes_setweight)
 SWIG_ZEND_NAMED_FE(graphattributes_idnode,_wrap_GraphAttributes_idNode,swig_arginfo_graphattributes_idnode)
 SWIG_ZEND_NAMED_FE(graphattributes_setidnode,_wrap_GraphAttributes_setIdNode,swig_arginfo_graphattributes_setidnode)
 SWIG_ZEND_NAMED_FE(graphattributes_bends,_wrap_GraphAttributes_bends,swig_arginfo_graphattributes_bends)
 SWIG_ZEND_NAMED_FE(graphattributes_setbends,_wrap_GraphAttributes_setBends,swig_arginfo_graphattributes_setbends)
 SWIG_ZEND_NAMED_FE(graphattributes_arrowtype,_wrap_GraphAttributes_arrowType,swig_arginfo_graphattributes_arrowtype)
 SWIG_ZEND_NAMED_FE(graphattributes_setarrowtype,_wrap_GraphAttributes_setArrowType,swig_arginfo_graphattributes_setarrowtype)
 SWIG_ZEND_NAMED_FE(graphattributes_stroketype,_wrap_GraphAttributes_strokeType,swig_arginfo_graphattributes_stroketype)
 SWIG_ZEND_NAMED_FE(graphattributes_setstroketype,_wrap_GraphAttributes_setStrokeType,swig_arginfo_graphattributes_setstroketype)
 SWIG_ZEND_NAMED_FE(graphattributes_strokecolor,_wrap_GraphAttributes_strokeColor,swig_arginfo_graphattributes_strokecolor)
 SWIG_ZEND_NAMED_FE(graphattributes_setstrokecolor,_wrap_GraphAttributes_setStrokeColor,swig_arginfo_graphattributes_setstrokecolor)
 SWIG_ZEND_NAMED_FE(graphattributes_strokewidth,_wrap_GraphAttributes_strokeWidth,swig_arginfo_graphattributes_strokewidth)
 SWIG_ZEND_NAMED_FE(graphattributes_setstrokewidth,_wrap_GraphAttributes_setStrokeWidth,swig_arginfo_graphattributes_setstrokewidth)
 SWIG_ZEND_NAMED_FE(graphattributes_label,_wrap_GraphAttributes_label,swig_arginfo_graphattributes_label)
 SWIG_ZEND_NAMED_FE(graphattributes_setlabel,_wrap_GraphAttributes_setLabel,swig_arginfo_graphattributes_setlabel)
 SWIG_ZEND_NAMED_FE(graphattributes_intweight,_wrap_GraphAttributes_intWeight,swig_arginfo_graphattributes_intweight)
 SWIG_ZEND_NAMED_FE(graphattributes_setintweight,_wrap_GraphAttributes_setIntWeight,swig_arginfo_graphattributes_setintweight)
 SWIG_ZEND_NAMED_FE(graphattributes_doubleweight,_wrap_GraphAttributes_doubleWeight,swig_arginfo_graphattributes_doubleweight)
 SWIG_ZEND_NAMED_FE(graphattributes_setdoubleweight,_wrap_GraphAttributes_setDoubleWeight,swig_arginfo_graphattributes_setdoubleweight)
 SWIG_ZEND_NAMED_FE(graphattributes__type,_wrap_GraphAttributes__type,swig_arginfo_graphattributes__type)
 SWIG_ZEND_NAMED_FE(graphattributes_settype,_wrap_GraphAttributes_setType,swig_arginfo_graphattributes_settype)
 SWIG_ZEND_NAMED_FE(graphattributes_subgraphbits,_wrap_GraphAttributes_subGraphBits,swig_arginfo_graphattributes_subgraphbits)
 SWIG_ZEND_NAMED_FE(graphattributes_setsubgraphbits,_wrap_GraphAttributes_setSubGraphBits,swig_arginfo_graphattributes_setsubgraphbits)
 SWIG_ZEND_NAMED_FE(graphattributes_insubgraph,_wrap_GraphAttributes_inSubGraph,swig_arginfo_graphattributes_insubgraph)
 SWIG_ZEND_NAMED_FE(graphattributes_addsubgraph,_wrap_GraphAttributes_addSubGraph,swig_arginfo_graphattributes_addsubgraph)
 SWIG_ZEND_NAMED_FE(graphattributes_removesubgraph,_wrap_GraphAttributes_removeSubGraph,swig_arginfo_graphattributes_removesubgraph)
 SWIG_ZEND_NAMED_FE(graphattributes_boundingbox,_wrap_GraphAttributes_boundingBox,swig_arginfo_graphattributes_boundingbox)
 SWIG_ZEND_NAMED_FE(graphattributes_setallwidth,_wrap_GraphAttributes_setAllWidth,swig_arginfo_graphattributes_setallwidth)
 SWIG_ZEND_NAMED_FE(graphattributes_setallheight,_wrap_GraphAttributes_setAllHeight,swig_arginfo_graphattributes_setallheight)
 SWIG_ZEND_NAMED_FE(graphattributes_clearallbends,_wrap_GraphAttributes_clearAllBends,swig_arginfo_graphattributes_clearallbends)
 SWIG_ZEND_NAMED_FE(graphattributes_removeunnecessarybendshv,_wrap_GraphAttributes_removeUnnecessaryBendsHV,swig_arginfo_graphattributes_removeunnecessarybendshv)
 SWIG_ZEND_NAMED_FE(graphattributes_addnodecenter2bends,_wrap_GraphAttributes_addNodeCenter2Bends,swig_arginfo_graphattributes_addnodecenter2bends)
 SWIG_ZEND_NAMED_FE(graphattributes_isassociationclass,_wrap_GraphAttributes_isAssociationClass,swig_arginfo_graphattributes_isassociationclass)
 SWIG_ZEND_NAMED_FE(graphattributes_hierarchylist,_wrap_GraphAttributes_hierarchyList,swig_arginfo_graphattributes_hierarchylist)
 SWIG_ZEND_NAMED_FE(new_gemlayout,_wrap_new_GEMLayout,swig_arginfo_new_gemlayout)
 SWIG_ZEND_NAMED_FE(gemlayout_call,_wrap_GEMLayout_call,swig_arginfo_gemlayout_call)
 SWIG_ZEND_NAMED_FE(gemlayout_numberofrounds,_wrap_GEMLayout_numberOfRounds,swig_arginfo_gemlayout_numberofrounds)
 SWIG_ZEND_NAMED_FE(gemlayout_minimaltemperature,_wrap_GEMLayout_minimalTemperature,swig_arginfo_gemlayout_minimaltemperature)
 SWIG_ZEND_NAMED_FE(gemlayout_initialtemperature,_wrap_GEMLayout_initialTemperature,swig_arginfo_gemlayout_initialtemperature)
 SWIG_ZEND_NAMED_FE(gemlayout_gravitationalconstant,_wrap_GEMLayout_gravitationalConstant,swig_arginfo_gemlayout_gravitationalconstant)
 SWIG_ZEND_NAMED_FE(gemlayout_desiredlength,_wrap_GEMLayout_desiredLength,swig_arginfo_gemlayout_desiredlength)
 SWIG_ZEND_NAMED_FE(gemlayout_maximaldisturbance,_wrap_GEMLayout_maximalDisturbance,swig_arginfo_gemlayout_maximaldisturbance)
 SWIG_ZEND_NAMED_FE(gemlayout_rotationangle,_wrap_GEMLayout_rotationAngle,swig_arginfo_gemlayout_rotationangle)
 SWIG_ZEND_NAMED_FE(gemlayout_oscillationangle,_wrap_GEMLayout_oscillationAngle,swig_arginfo_gemlayout_oscillationangle)
 SWIG_ZEND_NAMED_FE(gemlayout_rotationsensitivity,_wrap_GEMLayout_rotationSensitivity,swig_arginfo_gemlayout_rotationsensitivity)
 SWIG_ZEND_NAMED_FE(gemlayout_oscillationsensitivity,_wrap_GEMLayout_oscillationSensitivity,swig_arginfo_gemlayout_oscillationsensitivity)
 SWIG_ZEND_NAMED_FE(gemlayout_attractionformula,_wrap_GEMLayout_attractionFormula,swig_arginfo_gemlayout_attractionformula)
 SWIG_ZEND_NAMED_FE(gemlayout_mindistcc,_wrap_GEMLayout_minDistCC,swig_arginfo_gemlayout_mindistcc)
 SWIG_ZEND_NAMED_FE(gemlayout_pageratio,_wrap_GEMLayout_pageRatio,swig_arginfo_gemlayout_pageratio)
 SWIG_ZEND_NAMED_FE(new_fmmmlayout,_wrap_new_FMMMLayout,swig_arginfo_new_fmmmlayout)
 SWIG_ZEND_NAMED_FE(fmmmlayout_call,_wrap_FMMMLayout_call,swig_arginfo_fmmmlayout_call)
 SWIG_ZEND_NAMED_FE(fmmmlayout_getcputime,_wrap_FMMMLayout_getCpuTime,swig_arginfo_fmmmlayout_getcputime)
 SWIG_ZEND_NAMED_FE(fmmmlayout_usehighleveloptions,_wrap_FMMMLayout_useHighLevelOptions,swig_arginfo_fmmmlayout_usehighleveloptions)
 SWIG_ZEND_NAMED_FE(fmmmlayout_setsinglelevel,_wrap_FMMMLayout_setSingleLevel,swig_arginfo_fmmmlayout_setsinglelevel)
 SWIG_ZEND_NAMED_FE(fmmmlayout_pageformat,_wrap_FMMMLayout_pageFormat,swig_arginfo_fmmmlayout_pageformat)
 SWIG_ZEND_NAMED_FE(fmmmlayout_unitedgelength,_wrap_FMMMLayout_unitEdgeLength,swig_arginfo_fmmmlayout_unitedgelength)
 SWIG_ZEND_NAMED_FE(fmmmlayout_newinitialplacement,_wrap_FMMMLayout_newInitialPlacement,swig_arginfo_fmmmlayout_newinitialplacement)
 SWIG_ZEND_NAMED_FE(fmmmlayout_qualityversusspeed,_wrap_FMMMLayout_qualityVersusSpeed,swig_arginfo_fmmmlayout_qualityversusspeed)
 SWIG_ZEND_NAMED_FE(fmmmlayout_randseed,_wrap_FMMMLayout_randSeed,swig_arginfo_fmmmlayout_randseed)
 SWIG_ZEND_NAMED_FE(fmmmlayout_edgelengthmeasurement,_wrap_FMMMLayout_edgeLengthMeasurement,swig_arginfo_fmmmlayout_edgelengthmeasurement)
 SWIG_ZEND_NAMED_FE(fmmmlayout_allowedpositions,_wrap_FMMMLayout_allowedPositions,swig_arginfo_fmmmlayout_allowedpositions)
 SWIG_ZEND_NAMED_FE(fmmmlayout_maxintposexponent,_wrap_FMMMLayout_maxIntPosExponent,swig_arginfo_fmmmlayout_maxintposexponent)
 SWIG_ZEND_NAMED_FE(fmmmlayout_pageratio,_wrap_FMMMLayout_pageRatio,swig_arginfo_fmmmlayout_pageratio)
 SWIG_ZEND_NAMED_FE(fmmmlayout_stepsforrotatingcomponents,_wrap_FMMMLayout_stepsForRotatingComponents,swig_arginfo_fmmmlayout_stepsforrotatingcomponents)
 SWIG_ZEND_NAMED_FE(fmmmlayout_tipoverccs,_wrap_FMMMLayout_tipOverCCs,swig_arginfo_fmmmlayout_tipoverccs)
 SWIG_ZEND_NAMED_FE(fmmmlayout_mindistcc,_wrap_FMMMLayout_minDistCC,swig_arginfo_fmmmlayout_mindistcc)
 SWIG_ZEND_NAMED_FE(fmmmlayout_presortccs,_wrap_FMMMLayout_presortCCs,swig_arginfo_fmmmlayout_presortccs)
 SWIG_ZEND_NAMED_FE(fmmmlayout_mingraphsize,_wrap_FMMMLayout_minGraphSize,swig_arginfo_fmmmlayout_mingraphsize)
 SWIG_ZEND_NAMED_FE(fmmmlayout_galaxychoice,_wrap_FMMMLayout_galaxyChoice,swig_arginfo_fmmmlayout_galaxychoice)
 SWIG_ZEND_NAMED_FE(fmmmlayout_randomtries,_wrap_FMMMLayout_randomTries,swig_arginfo_fmmmlayout_randomtries)
 SWIG_ZEND_NAMED_FE(fmmmlayout_maxiterchange,_wrap_FMMMLayout_maxIterChange,swig_arginfo_fmmmlayout_maxiterchange)
 SWIG_ZEND_NAMED_FE(fmmmlayout_maxiterfactor,_wrap_FMMMLayout_maxIterFactor,swig_arginfo_fmmmlayout_maxiterfactor)
 SWIG_ZEND_NAMED_FE(fmmmlayout_initialplacementmult,_wrap_FMMMLayout_initialPlacementMult,swig_arginfo_fmmmlayout_initialplacementmult)
 SWIG_ZEND_NAMED_FE(fmmmlayout_forcemodel,_wrap_FMMMLayout_forceModel,swig_arginfo_fmmmlayout_forcemodel)
 SWIG_ZEND_NAMED_FE(fmmmlayout_springstrength,_wrap_FMMMLayout_springStrength,swig_arginfo_fmmmlayout_springstrength)
 SWIG_ZEND_NAMED_FE(fmmmlayout_repforcesstrength,_wrap_FMMMLayout_repForcesStrength,swig_arginfo_fmmmlayout_repforcesstrength)
 SWIG_ZEND_NAMED_FE(fmmmlayout_repulsiveforcescalculation,_wrap_FMMMLayout_repulsiveForcesCalculation,swig_arginfo_fmmmlayout_repulsiveforcescalculation)
 SWIG_ZEND_NAMED_FE(fmmmlayout_stopcriterion,_wrap_FMMMLayout_stopCriterion,swig_arginfo_fmmmlayout_stopcriterion)
 SWIG_ZEND_NAMED_FE(fmmmlayout_threshold,_wrap_FMMMLayout_threshold,swig_arginfo_fmmmlayout_threshold)
 SWIG_ZEND_NAMED_FE(fmmmlayout_fixediterations,_wrap_FMMMLayout_fixedIterations,swig_arginfo_fmmmlayout_fixediterations)
 SWIG_ZEND_NAMED_FE(fmmmlayout_forcescalingfactor,_wrap_FMMMLayout_forceScalingFactor,swig_arginfo_fmmmlayout_forcescalingfactor)
 SWIG_ZEND_NAMED_FE(fmmmlayout_cooltemperature,_wrap_FMMMLayout_coolTemperature,swig_arginfo_fmmmlayout_cooltemperature)
 SWIG_ZEND_NAMED_FE(fmmmlayout_coolvalue,_wrap_FMMMLayout_coolValue,swig_arginfo_fmmmlayout_coolvalue)
 SWIG_ZEND_NAMED_FE(fmmmlayout_initialplacementforces,_wrap_FMMMLayout_initialPlacementForces,swig_arginfo_fmmmlayout_initialplacementforces)
 SWIG_ZEND_NAMED_FE(fmmmlayout_resizedrawing,_wrap_FMMMLayout_resizeDrawing,swig_arginfo_fmmmlayout_resizedrawing)
 SWIG_ZEND_NAMED_FE(fmmmlayout_resizingscalar,_wrap_FMMMLayout_resizingScalar,swig_arginfo_fmmmlayout_resizingscalar)
 SWIG_ZEND_NAMED_FE(fmmmlayout_finetuningiterations,_wrap_FMMMLayout_fineTuningIterations,swig_arginfo_fmmmlayout_finetuningiterations)
 SWIG_ZEND_NAMED_FE(fmmmlayout_finetunescalar,_wrap_FMMMLayout_fineTuneScalar,swig_arginfo_fmmmlayout_finetunescalar)
 SWIG_ZEND_NAMED_FE(fmmmlayout_adjustpostrepstrengthdynamically,_wrap_FMMMLayout_adjustPostRepStrengthDynamically,swig_arginfo_fmmmlayout_adjustpostrepstrengthdynamically)
 SWIG_ZEND_NAMED_FE(fmmmlayout_postspringstrength,_wrap_FMMMLayout_postSpringStrength,swig_arginfo_fmmmlayout_postspringstrength)
 SWIG_ZEND_NAMED_FE(fmmmlayout_poststrengthofrepforces,_wrap_FMMMLayout_postStrengthOfRepForces,swig_arginfo_fmmmlayout_poststrengthofrepforces)
 SWIG_ZEND_NAMED_FE(fmmmlayout_frgridquotient,_wrap_FMMMLayout_frGridQuotient,swig_arginfo_fmmmlayout_frgridquotient)
 SWIG_ZEND_NAMED_FE(fmmmlayout_nmtreeconstruction,_wrap_FMMMLayout_nmTreeConstruction,swig_arginfo_fmmmlayout_nmtreeconstruction)
 SWIG_ZEND_NAMED_FE(fmmmlayout_nmsmallcell,_wrap_FMMMLayout_nmSmallCell,swig_arginfo_fmmmlayout_nmsmallcell)
 SWIG_ZEND_NAMED_FE(fmmmlayout_nmparticlesinleaves,_wrap_FMMMLayout_nmParticlesInLeaves,swig_arginfo_fmmmlayout_nmparticlesinleaves)
 SWIG_ZEND_NAMED_FE(fmmmlayout_nmprecision,_wrap_FMMMLayout_nmPrecision,swig_arginfo_fmmmlayout_nmprecision)
 SWIG_ZEND_NAMED_FE(new_davidsonharellayout,_wrap_new_DavidsonHarelLayout,swig_arginfo_new_davidsonharellayout)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_call,_wrap_DavidsonHarelLayout_call,swig_arginfo_davidsonharellayout_call)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_fixsettings,_wrap_DavidsonHarelLayout_fixSettings,swig_arginfo_davidsonharellayout_fixsettings)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setspeed,_wrap_DavidsonHarelLayout_setSpeed,swig_arginfo_davidsonharellayout_setspeed)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setpreferrededgelengthmultiplier,_wrap_DavidsonHarelLayout_setPreferredEdgeLengthMultiplier,swig_arginfo_davidsonharellayout_setpreferrededgelengthmultiplier)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setpreferrededgelength,_wrap_DavidsonHarelLayout_setPreferredEdgeLength,swig_arginfo_davidsonharellayout_setpreferrededgelength)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setrepulsionweight,_wrap_DavidsonHarelLayout_setRepulsionWeight,swig_arginfo_davidsonharellayout_setrepulsionweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_getrepulsionweight,_wrap_DavidsonHarelLayout_getRepulsionWeight,swig_arginfo_davidsonharellayout_getrepulsionweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setattractionweight,_wrap_DavidsonHarelLayout_setAttractionWeight,swig_arginfo_davidsonharellayout_setattractionweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_getattractionweight,_wrap_DavidsonHarelLayout_getAttractionWeight,swig_arginfo_davidsonharellayout_getattractionweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setnodeoverlapweight,_wrap_DavidsonHarelLayout_setNodeOverlapWeight,swig_arginfo_davidsonharellayout_setnodeoverlapweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_getnodeoverlapweight,_wrap_DavidsonHarelLayout_getNodeOverlapWeight,swig_arginfo_davidsonharellayout_getnodeoverlapweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setplanarityweight,_wrap_DavidsonHarelLayout_setPlanarityWeight,swig_arginfo_davidsonharellayout_setplanarityweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_getplanarityweight,_wrap_DavidsonHarelLayout_getPlanarityWeight,swig_arginfo_davidsonharellayout_getplanarityweight)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setstarttemperature,_wrap_DavidsonHarelLayout_setStartTemperature,swig_arginfo_davidsonharellayout_setstarttemperature)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_getstarttemperature,_wrap_DavidsonHarelLayout_getStartTemperature,swig_arginfo_davidsonharellayout_getstarttemperature)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setnumberofiterations,_wrap_DavidsonHarelLayout_setNumberOfIterations,swig_arginfo_davidsonharellayout_setnumberofiterations)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_getnumberofiterations,_wrap_DavidsonHarelLayout_getNumberOfIterations,swig_arginfo_davidsonharellayout_getnumberofiterations)
 SWIG_ZEND_NAMED_FE(davidsonharellayout_setiterationnumberasfactor,_wrap_DavidsonHarelLayout_setIterationNumberAsFactor,swig_arginfo_davidsonharellayout_setiterationnumberasfactor)
 SWIG_ZEND_NAMED_FE(new_tuttelayout,_wrap_new_TutteLayout,swig_arginfo_new_tuttelayout)
 SWIG_ZEND_NAMED_FE(tuttelayout_bbox,_wrap_TutteLayout_bbox,swig_arginfo_tuttelayout_bbox)
 SWIG_ZEND_NAMED_FE(tuttelayout_call,_wrap_TutteLayout_call,swig_arginfo_tuttelayout_call)
 SWIG_ZEND_NAMED_FE(new_treelayout,_wrap_new_TreeLayout,swig_arginfo_new_treelayout)
 SWIG_ZEND_NAMED_FE(treelayout_call,_wrap_TreeLayout_call,swig_arginfo_treelayout_call)
 SWIG_ZEND_NAMED_FE(treelayout_siblingdistance,_wrap_TreeLayout_siblingDistance,swig_arginfo_treelayout_siblingdistance)
 SWIG_ZEND_NAMED_FE(treelayout_subtreedistance,_wrap_TreeLayout_subtreeDistance,swig_arginfo_treelayout_subtreedistance)
 SWIG_ZEND_NAMED_FE(treelayout_leveldistance,_wrap_TreeLayout_levelDistance,swig_arginfo_treelayout_leveldistance)
 SWIG_ZEND_NAMED_FE(treelayout_treedistance,_wrap_TreeLayout_treeDistance,swig_arginfo_treelayout_treedistance)
 SWIG_ZEND_NAMED_FE(treelayout_orthogonallayout,_wrap_TreeLayout_orthogonalLayout,swig_arginfo_treelayout_orthogonallayout)
 SWIG_ZEND_NAMED_FE(treelayout_orientation,_wrap_TreeLayout_orientation,swig_arginfo_treelayout_orientation)
 SWIG_ZEND_NAMED_FE(treelayout_rootselection,_wrap_TreeLayout_rootSelection,swig_arginfo_treelayout_rootselection)
 SWIG_ZEND_NAMED_FE(new_radialtreelayout,_wrap_new_RadialTreeLayout,swig_arginfo_new_radialtreelayout)
 SWIG_ZEND_NAMED_FE(radialtreelayout_call,_wrap_RadialTreeLayout_call,swig_arginfo_radialtreelayout_call)
 SWIG_ZEND_NAMED_FE(radialtreelayout_leveldistance,_wrap_RadialTreeLayout_levelDistance,swig_arginfo_radialtreelayout_leveldistance)
 SWIG_ZEND_NAMED_FE(radialtreelayout_connectedcomponentdistance,_wrap_RadialTreeLayout_connectedComponentDistance,swig_arginfo_radialtreelayout_connectedcomponentdistance)
 SWIG_ZEND_NAMED_FE(radialtreelayout_rootselection,_wrap_RadialTreeLayout_rootSelection,swig_arginfo_radialtreelayout_rootselection)
 SWIG_ZEND_NAMED_FE(new_circularlayout,_wrap_new_CircularLayout,swig_arginfo_new_circularlayout)
 SWIG_ZEND_NAMED_FE(circularlayout_call,_wrap_CircularLayout_call,swig_arginfo_circularlayout_call)
 SWIG_ZEND_NAMED_FE(circularlayout_mindistcircle,_wrap_CircularLayout_minDistCircle,swig_arginfo_circularlayout_mindistcircle)
 SWIG_ZEND_NAMED_FE(circularlayout_mindistlevel,_wrap_CircularLayout_minDistLevel,swig_arginfo_circularlayout_mindistlevel)
 SWIG_ZEND_NAMED_FE(circularlayout_mindistsibling,_wrap_CircularLayout_minDistSibling,swig_arginfo_circularlayout_mindistsibling)
 SWIG_ZEND_NAMED_FE(circularlayout_mindistcc,_wrap_CircularLayout_minDistCC,swig_arginfo_circularlayout_mindistcc)
 SWIG_ZEND_NAMED_FE(circularlayout_pageratio,_wrap_CircularLayout_pageRatio,swig_arginfo_circularlayout_pageratio)
 SWIG_ZEND_NAMED_FE(new_balloonlayout,_wrap_new_BalloonLayout,swig_arginfo_new_balloonlayout)
 SWIG_ZEND_NAMED_FE(balloonlayout_call,_wrap_BalloonLayout_call,swig_arginfo_balloonlayout_call)
 SWIG_ZEND_NAMED_FE(balloonlayout_setevenangles,_wrap_BalloonLayout_setEvenAngles,swig_arginfo_balloonlayout_setevenangles)
 SWIG_ZEND_NAMED_FE(new_planarizationlayout,_wrap_new_PlanarizationLayout,swig_arginfo_new_planarizationlayout)
 SWIG_ZEND_NAMED_FE(planarizationlayout_call,_wrap_PlanarizationLayout_call,swig_arginfo_planarizationlayout_call)
 SWIG_ZEND_NAMED_FE(planarizationlayout_pageratio,_wrap_PlanarizationLayout_pageRatio,swig_arginfo_planarizationlayout_pageratio)
 SWIG_ZEND_NAMED_FE(planarizationlayout_mincliquesize,_wrap_PlanarizationLayout_minCliqueSize,swig_arginfo_planarizationlayout_mincliquesize)
 SWIG_ZEND_NAMED_FE(planarizationlayout_setcrossmin,_wrap_PlanarizationLayout_setCrossMin,swig_arginfo_planarizationlayout_setcrossmin)
 SWIG_ZEND_NAMED_FE(planarizationlayout_setembedder,_wrap_PlanarizationLayout_setEmbedder,swig_arginfo_planarizationlayout_setembedder)
 SWIG_ZEND_NAMED_FE(planarizationlayout_setplanarlayouter,_wrap_PlanarizationLayout_setPlanarLayouter,swig_arginfo_planarizationlayout_setplanarlayouter)
 SWIG_ZEND_NAMED_FE(planarizationlayout_setpacker,_wrap_PlanarizationLayout_setPacker,swig_arginfo_planarizationlayout_setpacker)
 SWIG_ZEND_NAMED_FE(new_sugiyamalayout,_wrap_new_SugiyamaLayout,swig_arginfo_new_sugiyamalayout)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_call,_wrap_SugiyamaLayout_call,swig_arginfo_sugiyamalayout_call)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_fails,_wrap_SugiyamaLayout_fails,swig_arginfo_sugiyamalayout_fails)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_runs,_wrap_SugiyamaLayout_runs,swig_arginfo_sugiyamalayout_runs)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_transpose,_wrap_SugiyamaLayout_transpose,swig_arginfo_sugiyamalayout_transpose)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_arrangeccs,_wrap_SugiyamaLayout_arrangeCCs,swig_arginfo_sugiyamalayout_arrangeccs)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_mindistcc,_wrap_SugiyamaLayout_minDistCC,swig_arginfo_sugiyamalayout_mindistcc)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_pageratio,_wrap_SugiyamaLayout_pageRatio,swig_arginfo_sugiyamalayout_pageratio)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_alignbaseclasses,_wrap_SugiyamaLayout_alignBaseClasses,swig_arginfo_sugiyamalayout_alignbaseclasses)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_alignsiblings,_wrap_SugiyamaLayout_alignSiblings,swig_arginfo_sugiyamalayout_alignsiblings)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_permutefirst,_wrap_SugiyamaLayout_permuteFirst,swig_arginfo_sugiyamalayout_permutefirst)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_maxthreads,_wrap_SugiyamaLayout_maxThreads,swig_arginfo_sugiyamalayout_maxthreads)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_setranking,_wrap_SugiyamaLayout_setRanking,swig_arginfo_sugiyamalayout_setranking)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_setcrossmin,_wrap_SugiyamaLayout_setCrossMin,swig_arginfo_sugiyamalayout_setcrossmin)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_setlayout,_wrap_SugiyamaLayout_setLayout,swig_arginfo_sugiyamalayout_setlayout)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_setclusterlayout,_wrap_SugiyamaLayout_setClusterLayout,swig_arginfo_sugiyamalayout_setclusterlayout)
 SWIG_ZEND_NAMED_FE(sugiyamalayout_setpacker,_wrap_SugiyamaLayout_setPacker,swig_arginfo_sugiyamalayout_setpacker)
 SWIG_ZEND_NAMED_FE(upwardplanarizationlayout_call,_wrap_UpwardPlanarizationLayout_call,swig_arginfo_upwardplanarizationlayout_call)
 SWIG_ZEND_NAMED_FE(dominancelayout_call,_wrap_DominanceLayout_call,swig_arginfo_dominancelayout_call)
 SWIG_ZEND_NAMED_FE(dominancelayout_setmingriddistance,_wrap_DominanceLayout_setMinGridDistance,swig_arginfo_dominancelayout_setmingriddistance)
 SWIG_ZEND_NAMED_FE(visibilitylayout_call,_wrap_VisibilityLayout_call,swig_arginfo_visibilitylayout_call)
 SWIG_ZEND_NAMED_FE(visibilitylayout_setmingriddistance,_wrap_VisibilityLayout_setMinGridDistance,swig_arginfo_visibilitylayout_setmingriddistance)
 SWIG_ZEND_NAMED_FE(new_svgsettings,_wrap_new_SVGSettings,swig_arginfo_new_svgsettings)
 SWIG_ZEND_NAMED_FE(svgsettings_margin,_wrap_SVGSettings_margin,swig_arginfo_svgsettings_margin)
 SWIG_ZEND_NAMED_FE(svgsettings_fontsize,_wrap_SVGSettings_fontSize,swig_arginfo_svgsettings_fontsize)
 SWIG_ZEND_NAMED_FE(svgsettings_fontcolor,_wrap_SVGSettings_fontColor,swig_arginfo_svgsettings_fontcolor)
 SWIG_ZEND_NAMED_FE(svgsettings_fontfamily,_wrap_SVGSettings_fontFamily,swig_arginfo_svgsettings_fontfamily)
 SWIG_ZEND_NAMED_FE(graphio_readrome,_wrap_GraphIO_readRome,swig_arginfo_graphio_readrome)
 SWIG_ZEND_NAMED_FE(graphio_writerome,_wrap_GraphIO_writeRome,swig_arginfo_graphio_writerome)
 SWIG_ZEND_NAMED_FE(graphio_readleda,_wrap_GraphIO_readLEDA,swig_arginfo_graphio_readleda)
 SWIG_ZEND_NAMED_FE(graphio_writeleda,_wrap_GraphIO_writeLEDA,swig_arginfo_graphio_writeleda)
 SWIG_ZEND_NAMED_FE(graphio_readchaco,_wrap_GraphIO_readChaco,swig_arginfo_graphio_readchaco)
 SWIG_ZEND_NAMED_FE(graphio_writechaco,_wrap_GraphIO_writeChaco,swig_arginfo_graphio_writechaco)
 SWIG_ZEND_NAMED_FE(graphio_readpmdissgraph,_wrap_GraphIO_readPMDissGraph,swig_arginfo_graphio_readpmdissgraph)
 SWIG_ZEND_NAMED_FE(graphio_writepmdissgraph,_wrap_GraphIO_writePMDissGraph,swig_arginfo_graphio_writepmdissgraph)
 SWIG_ZEND_NAMED_FE(graphio_readygraph,_wrap_GraphIO_readYGraph,swig_arginfo_graphio_readygraph)
 SWIG_ZEND_NAMED_FE(graphio_readrudy,_wrap_GraphIO_readRudy,swig_arginfo_graphio_readrudy)
 SWIG_ZEND_NAMED_FE(graphio_writerudy,_wrap_GraphIO_writeRudy,swig_arginfo_graphio_writerudy)
 SWIG_ZEND_NAMED_FE(graphio_readgml,_wrap_GraphIO_readGML,swig_arginfo_graphio_readgml)
 SWIG_ZEND_NAMED_FE(graphio_writegml,_wrap_GraphIO_writeGML,swig_arginfo_graphio_writegml)
 SWIG_ZEND_NAMED_FE(graphio_readogml,_wrap_GraphIO_readOGML,swig_arginfo_graphio_readogml)
 SWIG_ZEND_NAMED_FE(graphio_writeogml,_wrap_GraphIO_writeOGML,swig_arginfo_graphio_writeogml)
 SWIG_ZEND_NAMED_FE(graphio_readbench,_wrap_GraphIO_readBENCH,swig_arginfo_graphio_readbench)
 SWIG_ZEND_NAMED_FE(graphio_readpla,_wrap_GraphIO_readPLA,swig_arginfo_graphio_readpla)
 SWIG_ZEND_NAMED_FE(graphio_readchallengegraph,_wrap_GraphIO_readChallengeGraph,swig_arginfo_graphio_readchallengegraph)
 SWIG_ZEND_NAMED_FE(graphio_writechallengegraph,_wrap_GraphIO_writeChallengeGraph,swig_arginfo_graphio_writechallengegraph)
 SWIG_ZEND_NAMED_FE(graphio_readgraphml,_wrap_GraphIO_readGraphML,swig_arginfo_graphio_readgraphml)
 SWIG_ZEND_NAMED_FE(graphio_writegraphml,_wrap_GraphIO_writeGraphML,swig_arginfo_graphio_writegraphml)
 SWIG_ZEND_NAMED_FE(graphio_readdot,_wrap_GraphIO_readDOT,swig_arginfo_graphio_readdot)
 SWIG_ZEND_NAMED_FE(graphio_writedot,_wrap_GraphIO_writeDOT,swig_arginfo_graphio_writedot)
 SWIG_ZEND_NAMED_FE(graphio_readgexf,_wrap_GraphIO_readGEXF,swig_arginfo_graphio_readgexf)
 SWIG_ZEND_NAMED_FE(graphio_writegexf,_wrap_GraphIO_writeGEXF,swig_arginfo_graphio_writegexf)
 SWIG_ZEND_NAMED_FE(graphio_readgdf,_wrap_GraphIO_readGDF,swig_arginfo_graphio_readgdf)
 SWIG_ZEND_NAMED_FE(graphio_writegdf,_wrap_GraphIO_writeGDF,swig_arginfo_graphio_writegdf)
 SWIG_ZEND_NAMED_FE(graphio_readtlp,_wrap_GraphIO_readTLP,swig_arginfo_graphio_readtlp)
 SWIG_ZEND_NAMED_FE(graphio_writetlp,_wrap_GraphIO_writeTLP,swig_arginfo_graphio_writetlp)
 SWIG_ZEND_NAMED_FE(graphio_readdl,_wrap_GraphIO_readDL,swig_arginfo_graphio_readdl)
 SWIG_ZEND_NAMED_FE(graphio_writedl,_wrap_GraphIO_writeDL,swig_arginfo_graphio_writedl)
 SWIG_ZEND_NAMED_FE(graphio_readstp,_wrap_GraphIO_readSTP,swig_arginfo_graphio_readstp)
 SWIG_ZEND_NAMED_FE(graphio_readedgelistsubgraph,_wrap_GraphIO_readEdgeListSubgraph,swig_arginfo_graphio_readedgelistsubgraph)
 SWIG_ZEND_NAMED_FE(graphio_writeedgelistsubgraph,_wrap_GraphIO_writeEdgeListSubgraph,swig_arginfo_graphio_writeedgelistsubgraph)
 SWIG_ZEND_NAMED_FE(graphio_drawsvg,_wrap_GraphIO_drawSVG,swig_arginfo_graphio_drawsvg)
 SWIG_ZEND_NAMED_FE(graphio_indentchar,_wrap_GraphIO_indentChar,swig_arginfo_graphio_indentchar)
 SWIG_ZEND_NAMED_FE(graphio_indentwidth,_wrap_GraphIO_indentWidth,swig_arginfo_graphio_indentwidth)
 SWIG_ZEND_NAMED_FE(graphio_setindentchar,_wrap_GraphIO_setIndentChar,swig_arginfo_graphio_setindentchar)
 SWIG_ZEND_NAMED_FE(graphio_setindentwidth,_wrap_GraphIO_setIndentWidth,swig_arginfo_graphio_setindentwidth)
 SWIG_ZEND_NAMED_FE(graphio_indent,_wrap_GraphIO_indent,swig_arginfo_graphio_indent)
 SWIG_ZEND_NAMED_FE(swig_ogdf_alter_newobject,_wrap_swig_ogdf_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_ogdf_get_newobject,_wrap_swig_ogdf_get_newobject,NULL)
{NULL, NULL, NULL}
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry ogdf_module_entry = {
    STANDARD_MODULE_HEADER,
    (char*)"ogdf",
    ogdf_functions,
    PHP_MINIT(ogdf),
    PHP_MSHUTDOWN(ogdf),
    PHP_RINIT(ogdf),
    PHP_RSHUTDOWN(ogdf),
    PHP_MINFO(ogdf),
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &ogdf_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &ogdf_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(ogdf)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(ogdf, ogdf_init_globals, ogdf_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_GraphConstraints=zend_register_list_destructors_ex(_wrap_destroy_p_GraphConstraints,NULL,(char *)(SWIGTYPE_p_GraphConstraints->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_GraphConstraints,&le_swig__p_GraphConstraints);
le_swig__p_ogdf__ZeroPlacer=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ZeroPlacer,NULL,(char *)(SWIGTYPE_p_ogdf__ZeroPlacer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ZeroPlacer,&le_swig__p_ogdf__ZeroPlacer);
le_swig__p_ogdf__CirclePlacer=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__CirclePlacer,NULL,(char *)(SWIGTYPE_p_ogdf__CirclePlacer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__CirclePlacer,&le_swig__p_ogdf__CirclePlacer);
le_swig__p_ogdf__RandomPlacer=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__RandomPlacer,NULL,(char *)(SWIGTYPE_p_ogdf__RandomPlacer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__RandomPlacer,&le_swig__p_ogdf__RandomPlacer);
le_swig__p_ogdf__Stroke=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__Stroke,NULL,(char *)(SWIGTYPE_p_ogdf__Stroke->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__Stroke,&le_swig__p_ogdf__Stroke);
le_swig__p_Orientation=zend_register_list_destructors_ex(_wrap_destroy_p_Orientation,NULL,(char *)(SWIGTYPE_p_Orientation->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Orientation,&le_swig__p_Orientation);
le_swig__p_ogdf__GEMLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__GEMLayout,NULL,(char *)(SWIGTYPE_p_ogdf__GEMLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__GEMLayout,&le_swig__p_ogdf__GEMLayout);
le_swig__p_ogdf__OrthoLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__OrthoLayout,NULL,(char *)(SWIGTYPE_p_ogdf__OrthoLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__OrthoLayout,&le_swig__p_ogdf__OrthoLayout);
le_swig__p_ogdf__OptimalHierarchyLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__OptimalHierarchyLayout,NULL,(char *)(SWIGTYPE_p_ogdf__OptimalHierarchyLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__OptimalHierarchyLayout,&le_swig__p_ogdf__OptimalHierarchyLayout);
le_swig__p_ogdf__FastSimpleHierarchyLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__FastSimpleHierarchyLayout,NULL,(char *)(SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__FastSimpleHierarchyLayout,&le_swig__p_ogdf__FastSimpleHierarchyLayout);
le_swig__p_ogdf__FastHierarchyLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__FastHierarchyLayout,NULL,(char *)(SWIGTYPE_p_ogdf__FastHierarchyLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__FastHierarchyLayout,&le_swig__p_ogdf__FastHierarchyLayout);
le_swig__p_ogdf__FMMMLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__FMMMLayout,NULL,(char *)(SWIGTYPE_p_ogdf__FMMMLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__FMMMLayout,&le_swig__p_ogdf__FMMMLayout);
le_swig__p_ogdf__TutteLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__TutteLayout,NULL,(char *)(SWIGTYPE_p_ogdf__TutteLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__TutteLayout,&le_swig__p_ogdf__TutteLayout);
le_swig__p_ogdf__TreeLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__TreeLayout,NULL,(char *)(SWIGTYPE_p_ogdf__TreeLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__TreeLayout,&le_swig__p_ogdf__TreeLayout);
le_swig__p_ogdf__RadialTreeLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__RadialTreeLayout,NULL,(char *)(SWIGTYPE_p_ogdf__RadialTreeLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__RadialTreeLayout,&le_swig__p_ogdf__RadialTreeLayout);
le_swig__p_ogdf__SugiyamaLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__SugiyamaLayout,NULL,(char *)(SWIGTYPE_p_ogdf__SugiyamaLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__SugiyamaLayout,&le_swig__p_ogdf__SugiyamaLayout);
le_swig__p_ogdf__DominanceLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__DominanceLayout,NULL,(char *)(SWIGTYPE_p_ogdf__DominanceLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__DominanceLayout,&le_swig__p_ogdf__DominanceLayout);
le_swig__p_ogdf__VisibilityLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__VisibilityLayout,NULL,(char *)(SWIGTYPE_p_ogdf__VisibilityLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__VisibilityLayout,&le_swig__p_ogdf__VisibilityLayout);
le_swig__p_AcyclicSubgraphModule=zend_register_list_destructors_ex(_wrap_destroy_p_AcyclicSubgraphModule,NULL,(char *)(SWIGTYPE_p_AcyclicSubgraphModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_AcyclicSubgraphModule,&le_swig__p_AcyclicSubgraphModule);
le_swig__p_ogdf__LayoutModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__LayoutModule,NULL,(char *)(SWIGTYPE_p_ogdf__LayoutModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__LayoutModule,&le_swig__p_ogdf__LayoutModule);
le_swig__p_ogdf__UPRLayoutModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__UPRLayoutModule,NULL,(char *)(SWIGTYPE_p_ogdf__UPRLayoutModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__UPRLayoutModule,&le_swig__p_ogdf__UPRLayoutModule);
le_swig__p_ogdf__LayoutPlanRepModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__LayoutPlanRepModule,NULL,(char *)(SWIGTYPE_p_ogdf__LayoutPlanRepModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__LayoutPlanRepModule,&le_swig__p_ogdf__LayoutPlanRepModule);
le_swig__p_ogdf__EmbedderModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EmbedderModule,NULL,(char *)(SWIGTYPE_p_ogdf__EmbedderModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EmbedderModule,&le_swig__p_ogdf__EmbedderModule);
le_swig__p_ogdf__EdgeInsertionModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EdgeInsertionModule,NULL,(char *)(SWIGTYPE_p_ogdf__EdgeInsertionModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EdgeInsertionModule,&le_swig__p_ogdf__EdgeInsertionModule);
le_swig__p_ogdf__PlanarSubgraphModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__PlanarSubgraphModule,NULL,(char *)(SWIGTYPE_p_ogdf__PlanarSubgraphModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__PlanarSubgraphModule,&le_swig__p_ogdf__PlanarSubgraphModule);
le_swig__p_ogdf__CrossingMinimizationModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__CrossingMinimizationModule,NULL,(char *)(SWIGTYPE_p_ogdf__CrossingMinimizationModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__CrossingMinimizationModule,&le_swig__p_ogdf__CrossingMinimizationModule);
le_swig__p_ogdf__LayeredCrossMinModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__LayeredCrossMinModule,NULL,(char *)(SWIGTYPE_p_ogdf__LayeredCrossMinModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__LayeredCrossMinModule,&le_swig__p_ogdf__LayeredCrossMinModule);
le_swig__p_ogdf__AcyclicSubgraphModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__AcyclicSubgraphModule,NULL,(char *)(SWIGTYPE_p_ogdf__AcyclicSubgraphModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__AcyclicSubgraphModule,&le_swig__p_ogdf__AcyclicSubgraphModule);
le_swig__p_ogdf__HierarchyLayoutModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__HierarchyLayoutModule,NULL,(char *)(SWIGTYPE_p_ogdf__HierarchyLayoutModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__HierarchyLayoutModule,&le_swig__p_ogdf__HierarchyLayoutModule);
le_swig__p_ogdf__HierarchyClusterLayoutModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__HierarchyClusterLayoutModule,NULL,(char *)(SWIGTYPE_p_ogdf__HierarchyClusterLayoutModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__HierarchyClusterLayoutModule,&le_swig__p_ogdf__HierarchyClusterLayoutModule);
le_swig__p_DPolyline=zend_register_list_destructors_ex(_wrap_destroy_p_DPolyline,NULL,(char *)(SWIGTYPE_p_DPolyline->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_DPolyline,&le_swig__p_DPolyline);
le_swig__p_short=zend_register_list_destructors_ex(_wrap_destroy_p_short,NULL,(char *)(SWIGTYPE_p_short->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_short,&le_swig__p_short);
le_swig__p_unsigned_short=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_short,NULL,(char *)(SWIGTYPE_p_unsigned_short->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_short,&le_swig__p_unsigned_short);
le_swig__p_ClusterGraph=zend_register_list_destructors_ex(_wrap_destroy_p_ClusterGraph,NULL,(char *)(SWIGTYPE_p_ClusterGraph->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ClusterGraph,&le_swig__p_ClusterGraph);
le_swig__p_ogdf__ListT_node_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_node_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_node_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_node_t,&le_swig__p_ogdf__ListT_node_t);
le_swig__p_ogdf__GridSifting=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__GridSifting,NULL,(char *)(SWIGTYPE_p_ogdf__GridSifting->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__GridSifting,&le_swig__p_ogdf__GridSifting);
le_swig__p_ogdf__GlobalSifting=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__GlobalSifting,NULL,(char *)(SWIGTYPE_p_ogdf__GlobalSifting->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__GlobalSifting,&le_swig__p_ogdf__GlobalSifting);
le_swig__p_ogdf__BarycenterPlacer=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__BarycenterPlacer,NULL,(char *)(SWIGTYPE_p_ogdf__BarycenterPlacer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__BarycenterPlacer,&le_swig__p_ogdf__BarycenterPlacer);
le_swig__p_ogdf__InitialPlacer=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__InitialPlacer,NULL,(char *)(SWIGTYPE_p_ogdf__InitialPlacer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__InitialPlacer,&le_swig__p_ogdf__InitialPlacer);
le_swig__p_int=zend_register_list_destructors_ex(_wrap_destroy_p_int,NULL,(char *)(SWIGTYPE_p_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_int,&le_swig__p_int);
le_swig__p_ogdf__VariableEmbeddingInserterDyn=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__VariableEmbeddingInserterDyn,NULL,(char *)(SWIGTYPE_p_ogdf__VariableEmbeddingInserterDyn->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__VariableEmbeddingInserterDyn,&le_swig__p_ogdf__VariableEmbeddingInserterDyn);
le_swig__p_long_long=zend_register_list_destructors_ex(_wrap_destroy_p_long_long,NULL,(char *)(SWIGTYPE_p_long_long->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_long_long,&le_swig__p_long_long);
le_swig__p_unsigned_long_long=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_long_long,NULL,(char *)(SWIGTYPE_p_unsigned_long_long->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_long_long,&le_swig__p_unsigned_long_long);
le_swig__p_ogdf__Color=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__Color,NULL,(char *)(SWIGTYPE_p_ogdf__Color->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__Color,&le_swig__p_ogdf__Color);
le_swig__p_ogdf__DavidsonHarelLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__DavidsonHarelLayout,NULL,(char *)(SWIGTYPE_p_ogdf__DavidsonHarelLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__DavidsonHarelLayout,&le_swig__p_ogdf__DavidsonHarelLayout);
le_swig__p_ogdf__CircularLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__CircularLayout,NULL,(char *)(SWIGTYPE_p_ogdf__CircularLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__CircularLayout,&le_swig__p_ogdf__CircularLayout);
le_swig__p_ogdf__BalloonLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__BalloonLayout,NULL,(char *)(SWIGTYPE_p_ogdf__BalloonLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__BalloonLayout,&le_swig__p_ogdf__BalloonLayout);
le_swig__p_ogdf__PlanarizationLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__PlanarizationLayout,NULL,(char *)(SWIGTYPE_p_ogdf__PlanarizationLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__PlanarizationLayout,&le_swig__p_ogdf__PlanarizationLayout);
le_swig__p_ogdf__UpwardPlanarizationLayout=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__UpwardPlanarizationLayout,NULL,(char *)(SWIGTYPE_p_ogdf__UpwardPlanarizationLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__UpwardPlanarizationLayout,&le_swig__p_ogdf__UpwardPlanarizationLayout);
le_swig__p_GridLayout=zend_register_list_destructors_ex(_wrap_destroy_p_GridLayout,NULL,(char *)(SWIGTYPE_p_GridLayout->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_GridLayout,&le_swig__p_GridLayout);
le_swig__p_ogdf__GraphAttributes=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__GraphAttributes,NULL,(char *)(SWIGTYPE_p_ogdf__GraphAttributes->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__GraphAttributes,&le_swig__p_ogdf__GraphAttributes);
le_swig__p_ClusterGraphAttributes=zend_register_list_destructors_ex(_wrap_destroy_p_ClusterGraphAttributes,NULL,(char *)(SWIGTYPE_p_ClusterGraphAttributes->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ClusterGraphAttributes,&le_swig__p_ClusterGraphAttributes);
le_swig__p_ogdf__RandomMerger=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__RandomMerger,NULL,(char *)(SWIGTYPE_p_ogdf__RandomMerger->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__RandomMerger,&le_swig__p_ogdf__RandomMerger);
le_swig__p_ogdf__MatchingMerger=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__MatchingMerger,NULL,(char *)(SWIGTYPE_p_ogdf__MatchingMerger->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__MatchingMerger,&le_swig__p_ogdf__MatchingMerger);
le_swig__p_ogdf__MultilevelBuilder=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__MultilevelBuilder,NULL,(char *)(SWIGTYPE_p_ogdf__MultilevelBuilder->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__MultilevelBuilder,&le_swig__p_ogdf__MultilevelBuilder);
le_swig__p_ogdf__FastPlanarSubgraph=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__FastPlanarSubgraph,NULL,(char *)(SWIGTYPE_p_ogdf__FastPlanarSubgraph->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__FastPlanarSubgraph,&le_swig__p_ogdf__FastPlanarSubgraph);
le_swig__p_ogdf__ListT_ogdf__NodeElement_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_ogdf__NodeElement_p_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_ogdf__NodeElement_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_ogdf__NodeElement_p_t,&le_swig__p_ogdf__ListT_ogdf__NodeElement_p_t);
le_swig__p_ogdf__ListT_ogdf__EdgeElement_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_ogdf__EdgeElement_p_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_ogdf__EdgeElement_p_t,&le_swig__p_ogdf__ListT_ogdf__EdgeElement_p_t);
le_swig__p_ogdf__ListT_ogdf__AdjElement_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_ogdf__AdjElement_p_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_ogdf__AdjElement_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_ogdf__AdjElement_p_t,&le_swig__p_ogdf__ListT_ogdf__AdjElement_p_t);
le_swig__p_SVGSettings=zend_register_list_destructors_ex(_wrap_destroy_p_SVGSettings,NULL,(char *)(SWIGTYPE_p_SVGSettings->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_SVGSettings,&le_swig__p_SVGSettings);
le_swig__p_ogdf__ListT_edge_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_edge_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_edge_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_edge_t,&le_swig__p_ogdf__ListT_edge_t);
le_swig__p_ogdf__EdgeArrayT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EdgeArrayT_double_t,NULL,(char *)(SWIGTYPE_p_ogdf__EdgeArrayT_double_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EdgeArrayT_double_t,&le_swig__p_ogdf__EdgeArrayT_double_t);
le_swig__p_ogdf__NodeArrayT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__NodeArrayT_double_t,NULL,(char *)(SWIGTYPE_p_ogdf__NodeArrayT_double_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__NodeArrayT_double_t,&le_swig__p_ogdf__NodeArrayT_double_t);
le_swig__int=zend_register_list_destructors_ex(_wrap_destroy_int,NULL,(char *)(SWIGTYPE_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
le_swig__p_EdgeWeightedGraphT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_EdgeWeightedGraphT_double_t,NULL,(char *)(SWIGTYPE_p_EdgeWeightedGraphT_double_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_EdgeWeightedGraphT_double_t,&le_swig__p_EdgeWeightedGraphT_double_t);
le_swig__p_ogdf__CoffmanGrahamRanking=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__CoffmanGrahamRanking,NULL,(char *)(SWIGTYPE_p_ogdf__CoffmanGrahamRanking->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__CoffmanGrahamRanking,&le_swig__p_ogdf__CoffmanGrahamRanking);
le_swig__p_ogdf__LongestPathRanking=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__LongestPathRanking,NULL,(char *)(SWIGTYPE_p_ogdf__LongestPathRanking->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__LongestPathRanking,&le_swig__p_ogdf__LongestPathRanking);
le_swig__p_ogdf__OptimalRanking=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__OptimalRanking,NULL,(char *)(SWIGTYPE_p_ogdf__OptimalRanking->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__OptimalRanking,&le_swig__p_ogdf__OptimalRanking);
le_swig__p_ogdf__EdgeArrayT_float_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EdgeArrayT_float_t,NULL,(char *)(SWIGTYPE_p_ogdf__EdgeArrayT_float_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EdgeArrayT_float_t,&le_swig__p_ogdf__EdgeArrayT_float_t);
le_swig__p_ogdf__NodeArrayT_float_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__NodeArrayT_float_t,NULL,(char *)(SWIGTYPE_p_ogdf__NodeArrayT_float_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__NodeArrayT_float_t,&le_swig__p_ogdf__NodeArrayT_float_t);
le_swig__p_ogdf__EdgeArrayT_long_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EdgeArrayT_long_t,NULL,(char *)(SWIGTYPE_p_ogdf__EdgeArrayT_long_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EdgeArrayT_long_t,&le_swig__p_ogdf__EdgeArrayT_long_t);
le_swig__p_ogdf__NodeArrayT_long_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__NodeArrayT_long_t,NULL,(char *)(SWIGTYPE_p_ogdf__NodeArrayT_long_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__NodeArrayT_long_t,&le_swig__p_ogdf__NodeArrayT_long_t);
le_swig__p_ogdf__CCLayoutPackModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__CCLayoutPackModule,NULL,(char *)(SWIGTYPE_p_ogdf__CCLayoutPackModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__CCLayoutPackModule,&le_swig__p_ogdf__CCLayoutPackModule);
le_swig__p_ogdf__RankingModule=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__RankingModule,NULL,(char *)(SWIGTYPE_p_ogdf__RankingModule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__RankingModule,&le_swig__p_ogdf__RankingModule);
le_swig__p_istream=zend_register_list_destructors_ex(_wrap_destroy_p_istream,NULL,(char *)(SWIGTYPE_p_istream->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_istream,&le_swig__p_istream);
le_swig__p_ostream=zend_register_list_destructors_ex(_wrap_destroy_p_ostream,NULL,(char *)(SWIGTYPE_p_ostream->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ostream,&le_swig__p_ostream);
le_swig__p_ogdf__SolarMerger=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__SolarMerger,NULL,(char *)(SWIGTYPE_p_ogdf__SolarMerger->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__SolarMerger,&le_swig__p_ogdf__SolarMerger);
le_swig__p_ogdf__LocalBiconnectedMerger=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__LocalBiconnectedMerger,NULL,(char *)(SWIGTYPE_p_ogdf__LocalBiconnectedMerger->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__LocalBiconnectedMerger,&le_swig__p_ogdf__LocalBiconnectedMerger);
le_swig__p_ogdf__IndependentSetMerger=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__IndependentSetMerger,NULL,(char *)(SWIGTYPE_p_ogdf__IndependentSetMerger->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__IndependentSetMerger,&le_swig__p_ogdf__IndependentSetMerger);
le_swig__p_ogdf__EdgeCoverMerger=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EdgeCoverMerger,NULL,(char *)(SWIGTYPE_p_ogdf__EdgeCoverMerger->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EdgeCoverMerger,&le_swig__p_ogdf__EdgeCoverMerger);
le_swig__p_ogdf__ListT_ogdf__ListT_edge_t_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_ogdf__ListT_edge_t_p_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_ogdf__ListT_edge_t_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_ogdf__ListT_edge_t_p_t,&le_swig__p_ogdf__ListT_ogdf__ListT_edge_t_p_t);
le_swig__p_ogdf__ListT_ogdf__ListT_node_t_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_ogdf__ListT_node_t_p_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_ogdf__ListT_node_t_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_ogdf__ListT_node_t_p_t,&le_swig__p_ogdf__ListT_ogdf__ListT_node_t_p_t);
le_swig__p_string=zend_register_list_destructors_ex(_wrap_destroy_p_string,NULL,(char *)(SWIGTYPE_p_string->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_string,&le_swig__p_string);
le_swig__p_ogdf__EdgeArrayT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EdgeArrayT_int_t,NULL,(char *)(SWIGTYPE_p_ogdf__EdgeArrayT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EdgeArrayT_int_t,&le_swig__p_ogdf__EdgeArrayT_int_t);
le_swig__p_ogdf__ListIteratorT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListIteratorT_int_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListIteratorT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListIteratorT_int_t,&le_swig__p_ogdf__ListIteratorT_int_t);
le_swig__p_ogdf__ListT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__ListT_int_t,NULL,(char *)(SWIGTYPE_p_ogdf__ListT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__ListT_int_t,&le_swig__p_ogdf__ListT_int_t);
le_swig__p_ogdf__NodeArrayT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__NodeArrayT_int_t,NULL,(char *)(SWIGTYPE_p_ogdf__NodeArrayT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__NodeArrayT_int_t,&le_swig__p_ogdf__NodeArrayT_int_t);
le_swig__p_DRect=zend_register_list_destructors_ex(_wrap_destroy_p_DRect,NULL,(char *)(SWIGTYPE_p_DRect->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_DRect,&le_swig__p_DRect);
le_swig__p_ogdf__MultiEdgeApproxInserter=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__MultiEdgeApproxInserter,NULL,(char *)(SWIGTYPE_p_ogdf__MultiEdgeApproxInserter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__MultiEdgeApproxInserter,&le_swig__p_ogdf__MultiEdgeApproxInserter);
le_swig__p_ogdf__VariableEmbeddingInserter=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__VariableEmbeddingInserter,NULL,(char *)(SWIGTYPE_p_ogdf__VariableEmbeddingInserter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__VariableEmbeddingInserter,&le_swig__p_ogdf__VariableEmbeddingInserter);
le_swig__p_ogdf__FixedEmbeddingInserter=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__FixedEmbeddingInserter,NULL,(char *)(SWIGTYPE_p_ogdf__FixedEmbeddingInserter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__FixedEmbeddingInserter,&le_swig__p_ogdf__FixedEmbeddingInserter);
le_swig__p_EdgeWeightedGraphT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_EdgeWeightedGraphT_int_t,NULL,(char *)(SWIGTYPE_p_EdgeWeightedGraphT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_EdgeWeightedGraphT_int_t,&le_swig__p_EdgeWeightedGraphT_int_t);
le_swig__p_unsigned_int=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_int,NULL,(char *)(SWIGTYPE_p_unsigned_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_int,&le_swig__p_unsigned_int);
le_swig__p_signed_char=zend_register_list_destructors_ex(_wrap_destroy_p_signed_char,NULL,(char *)(SWIGTYPE_p_signed_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_signed_char,&le_swig__p_signed_char);
le_swig__p_unsigned_char=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_char,NULL,(char *)(SWIGTYPE_p_unsigned_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_char,&le_swig__p_unsigned_char);
le_swig__p_ogdf__Fill=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__Fill,NULL,(char *)(SWIGTYPE_p_ogdf__Fill->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__Fill,&le_swig__p_ogdf__Fill);
le_swig__p_ogdf__NodeArrayT_bool_t=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__NodeArrayT_bool_t,NULL,(char *)(SWIGTYPE_p_ogdf__NodeArrayT_bool_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__NodeArrayT_bool_t,&le_swig__p_ogdf__NodeArrayT_bool_t);
le_swig__p_ogdf__Graph=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__Graph,NULL,(char *)(SWIGTYPE_p_ogdf__Graph->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__Graph,&le_swig__p_ogdf__Graph);
le_swig__p_ogdf__AdjElement=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__AdjElement,NULL,(char *)(SWIGTYPE_p_ogdf__AdjElement->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__AdjElement,&le_swig__p_ogdf__AdjElement);
le_swig__p_ogdf__EdgeElement=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__EdgeElement,NULL,(char *)(SWIGTYPE_p_ogdf__EdgeElement->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__EdgeElement,&le_swig__p_ogdf__EdgeElement);
le_swig__p_ogdf__NodeElement=zend_register_list_destructors_ex(_wrap_destroy_p_ogdf__NodeElement,NULL,(char *)(SWIGTYPE_p_ogdf__NodeElement->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ogdf__NodeElement,&le_swig__p_ogdf__NodeElement);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
SWIG_LONG_CONSTANT(before, (int)ogdf::before);
SWIG_LONG_CONSTANT(after, (int)ogdf::after);
SWIG_LONG_CONSTANT(Graph_association, (int)ogdf::Graph::association);
SWIG_LONG_CONSTANT(Graph_generalization, (int)ogdf::Graph::generalization);
SWIG_LONG_CONSTANT(Graph_dependency, (int)ogdf::Graph::dependency);
SWIG_LONG_CONSTANT(Graph_vertex, (int)ogdf::Graph::vertex);
SWIG_LONG_CONSTANT(Graph_dummy, (int)ogdf::Graph::dummy);
SWIG_LONG_CONSTANT(Graph_generalizationMerger, (int)ogdf::Graph::generalizationMerger);
SWIG_LONG_CONSTANT(Graph_generalizationExpander, (int)ogdf::Graph::generalizationExpander);
SWIG_LONG_CONSTANT(Graph_highDegreeExpander, (int)ogdf::Graph::highDegreeExpander);
SWIG_LONG_CONSTANT(Graph_lowDegreeExpander, (int)ogdf::Graph::lowDegreeExpander);
SWIG_LONG_CONSTANT(Graph_associationClass, (int)ogdf::Graph::associationClass);
SWIG_LONG_CONSTANT(CirclePlacer_nsNew, (int)ogdf::CirclePlacer::nsNew);
SWIG_LONG_CONSTANT(CirclePlacer_nsOld, (int)ogdf::CirclePlacer::nsOld);
SWIG_LONG_CONSTANT(CirclePlacer_nsAll, (int)ogdf::CirclePlacer::nsAll);
SWIG_LONG_CONSTANT(rrNone, (int)ogdf::rrNone);
SWIG_LONG_CONSTANT(rrInserted, (int)ogdf::rrInserted);
SWIG_LONG_CONSTANT(rrMostCrossed, (int)ogdf::rrMostCrossed);
SWIG_LONG_CONSTANT(rrAll, (int)ogdf::rrAll);
SWIG_LONG_CONSTANT(rrIncremental, (int)ogdf::rrIncremental);
SWIG_LONG_CONSTANT(rrIncInserted, (int)ogdf::rrIncInserted);
SWIG_LONG_CONSTANT(stNone, (int)ogdf::stNone);
SWIG_LONG_CONSTANT(stSolid, (int)ogdf::stSolid);
SWIG_LONG_CONSTANT(stDash, (int)ogdf::stDash);
SWIG_LONG_CONSTANT(stDot, (int)ogdf::stDot);
SWIG_LONG_CONSTANT(stDashdot, (int)ogdf::stDashdot);
SWIG_LONG_CONSTANT(stDashdotdot, (int)ogdf::stDashdotdot);
SWIG_LONG_CONSTANT(slcButt, (int)ogdf::slcButt);
SWIG_LONG_CONSTANT(slcRound, (int)ogdf::slcRound);
SWIG_LONG_CONSTANT(slcSquare, (int)ogdf::slcSquare);
SWIG_LONG_CONSTANT(sljMiter, (int)ogdf::sljMiter);
SWIG_LONG_CONSTANT(sljRound, (int)ogdf::sljRound);
SWIG_LONG_CONSTANT(sljBevel, (int)ogdf::sljBevel);
SWIG_LONG_CONSTANT(fpNone, (int)ogdf::fpNone);
SWIG_LONG_CONSTANT(fpSolid, (int)ogdf::fpSolid);
SWIG_LONG_CONSTANT(fpDense1, (int)ogdf::fpDense1);
SWIG_LONG_CONSTANT(fpDense2, (int)ogdf::fpDense2);
SWIG_LONG_CONSTANT(fpDense3, (int)ogdf::fpDense3);
SWIG_LONG_CONSTANT(fpDense4, (int)ogdf::fpDense4);
SWIG_LONG_CONSTANT(fpDense5, (int)ogdf::fpDense5);
SWIG_LONG_CONSTANT(fpDense6, (int)ogdf::fpDense6);
SWIG_LONG_CONSTANT(fpDense7, (int)ogdf::fpDense7);
SWIG_LONG_CONSTANT(fpHorizontal, (int)ogdf::fpHorizontal);
SWIG_LONG_CONSTANT(fpVertical, (int)ogdf::fpVertical);
SWIG_LONG_CONSTANT(fpCross, (int)ogdf::fpCross);
SWIG_LONG_CONSTANT(fpBackwardDiagonal, (int)ogdf::fpBackwardDiagonal);
SWIG_LONG_CONSTANT(fpForwardDiagonal, (int)ogdf::fpForwardDiagonal);
SWIG_LONG_CONSTANT(fpDiagonalCross, (int)ogdf::fpDiagonalCross);
SWIG_LONG_CONSTANT(shRect, (int)ogdf::shRect);
SWIG_LONG_CONSTANT(shRoundedRect, (int)ogdf::shRoundedRect);
SWIG_LONG_CONSTANT(shEllipse, (int)ogdf::shEllipse);
SWIG_LONG_CONSTANT(shTriangle, (int)ogdf::shTriangle);
SWIG_LONG_CONSTANT(shPentagon, (int)ogdf::shPentagon);
SWIG_LONG_CONSTANT(shHexagon, (int)ogdf::shHexagon);
SWIG_LONG_CONSTANT(shOctagon, (int)ogdf::shOctagon);
SWIG_LONG_CONSTANT(shRhomb, (int)ogdf::shRhomb);
SWIG_LONG_CONSTANT(shTrapeze, (int)ogdf::shTrapeze);
SWIG_LONG_CONSTANT(shParallelogram, (int)ogdf::shParallelogram);
SWIG_LONG_CONSTANT(shInvTriangle, (int)ogdf::shInvTriangle);
SWIG_LONG_CONSTANT(shInvTrapeze, (int)ogdf::shInvTrapeze);
SWIG_LONG_CONSTANT(shInvParallelogram, (int)ogdf::shInvParallelogram);
SWIG_LONG_CONSTANT(shImage, (int)ogdf::shImage);
SWIG_LONG_CONSTANT(eaNone, (int)ogdf::eaNone);
SWIG_LONG_CONSTANT(eaLast, (int)ogdf::eaLast);
SWIG_LONG_CONSTANT(eaFirst, (int)ogdf::eaFirst);
SWIG_LONG_CONSTANT(eaBoth, (int)ogdf::eaBoth);
SWIG_LONG_CONSTANT(eaUndefined, (int)ogdf::eaUndefined);
SWIG_LONG_CONSTANT(GraphAttributes_nodeGraphics, (int)ogdf::GraphAttributes::nodeGraphics);
SWIG_LONG_CONSTANT(GraphAttributes_edgeGraphics, (int)ogdf::GraphAttributes::edgeGraphics);
SWIG_LONG_CONSTANT(GraphAttributes_edgeIntWeight, (int)ogdf::GraphAttributes::edgeIntWeight);
SWIG_LONG_CONSTANT(GraphAttributes_edgeDoubleWeight, (int)ogdf::GraphAttributes::edgeDoubleWeight);
SWIG_LONG_CONSTANT(GraphAttributes_edgeLabel, (int)ogdf::GraphAttributes::edgeLabel);
SWIG_LONG_CONSTANT(GraphAttributes_nodeLabel, (int)ogdf::GraphAttributes::nodeLabel);
SWIG_LONG_CONSTANT(GraphAttributes_edgeType, (int)ogdf::GraphAttributes::edgeType);
SWIG_LONG_CONSTANT(GraphAttributes_nodeType, (int)ogdf::GraphAttributes::nodeType);
SWIG_LONG_CONSTANT(GraphAttributes_nodeId, (int)ogdf::GraphAttributes::nodeId);
SWIG_LONG_CONSTANT(GraphAttributes_edgeArrow, (int)ogdf::GraphAttributes::edgeArrow);
SWIG_LONG_CONSTANT(GraphAttributes_edgeStyle, (int)ogdf::GraphAttributes::edgeStyle);
SWIG_LONG_CONSTANT(GraphAttributes_nodeStyle, (int)ogdf::GraphAttributes::nodeStyle);
SWIG_LONG_CONSTANT(GraphAttributes_nodeTemplate, (int)ogdf::GraphAttributes::nodeTemplate);
SWIG_LONG_CONSTANT(GraphAttributes_edgeSubGraphs, (int)ogdf::GraphAttributes::edgeSubGraphs);
SWIG_LONG_CONSTANT(GraphAttributes_nodeWeight, (int)ogdf::GraphAttributes::nodeWeight);
SWIG_LONG_CONSTANT(GraphAttributes_threeD, (int)ogdf::GraphAttributes::threeD);
SWIG_LONG_CONSTANT(FMMMLayout_pfPortrait, (int)ogdf::FMMMLayout::pfPortrait);
SWIG_LONG_CONSTANT(FMMMLayout_pfLandscape, (int)ogdf::FMMMLayout::pfLandscape);
SWIG_LONG_CONSTANT(FMMMLayout_pfSquare, (int)ogdf::FMMMLayout::pfSquare);
SWIG_LONG_CONSTANT(FMMMLayout_qvsGorgeousAndEfficient, (int)ogdf::FMMMLayout::qvsGorgeousAndEfficient);
SWIG_LONG_CONSTANT(FMMMLayout_qvsBeautifulAndFast, (int)ogdf::FMMMLayout::qvsBeautifulAndFast);
SWIG_LONG_CONSTANT(FMMMLayout_qvsNiceAndIncredibleSpeed, (int)ogdf::FMMMLayout::qvsNiceAndIncredibleSpeed);
SWIG_LONG_CONSTANT(FMMMLayout_elmMidpoint, (int)ogdf::FMMMLayout::elmMidpoint);
SWIG_LONG_CONSTANT(FMMMLayout_elmBoundingCircle, (int)ogdf::FMMMLayout::elmBoundingCircle);
SWIG_LONG_CONSTANT(FMMMLayout_apAll, (int)ogdf::FMMMLayout::apAll);
SWIG_LONG_CONSTANT(FMMMLayout_apInteger, (int)ogdf::FMMMLayout::apInteger);
SWIG_LONG_CONSTANT(FMMMLayout_apExponent, (int)ogdf::FMMMLayout::apExponent);
SWIG_LONG_CONSTANT(FMMMLayout_toNone, (int)ogdf::FMMMLayout::toNone);
SWIG_LONG_CONSTANT(FMMMLayout_toNoGrowingRow, (int)ogdf::FMMMLayout::toNoGrowingRow);
SWIG_LONG_CONSTANT(FMMMLayout_toAlways, (int)ogdf::FMMMLayout::toAlways);
SWIG_LONG_CONSTANT(FMMMLayout_psNone, (int)ogdf::FMMMLayout::psNone);
SWIG_LONG_CONSTANT(FMMMLayout_psDecreasingHeight, (int)ogdf::FMMMLayout::psDecreasingHeight);
SWIG_LONG_CONSTANT(FMMMLayout_psDecreasingWidth, (int)ogdf::FMMMLayout::psDecreasingWidth);
SWIG_LONG_CONSTANT(FMMMLayout_gcUniformProb, (int)ogdf::FMMMLayout::gcUniformProb);
SWIG_LONG_CONSTANT(FMMMLayout_gcNonUniformProbLowerMass, (int)ogdf::FMMMLayout::gcNonUniformProbLowerMass);
SWIG_LONG_CONSTANT(FMMMLayout_gcNonUniformProbHigherMass, (int)ogdf::FMMMLayout::gcNonUniformProbHigherMass);
SWIG_LONG_CONSTANT(FMMMLayout_micConstant, (int)ogdf::FMMMLayout::micConstant);
SWIG_LONG_CONSTANT(FMMMLayout_micLinearlyDecreasing, (int)ogdf::FMMMLayout::micLinearlyDecreasing);
SWIG_LONG_CONSTANT(FMMMLayout_micRapidlyDecreasing, (int)ogdf::FMMMLayout::micRapidlyDecreasing);
SWIG_LONG_CONSTANT(FMMMLayout_ipmSimple, (int)ogdf::FMMMLayout::ipmSimple);
SWIG_LONG_CONSTANT(FMMMLayout_ipmAdvanced, (int)ogdf::FMMMLayout::ipmAdvanced);
SWIG_LONG_CONSTANT(FMMMLayout_fmFruchtermanReingold, (int)ogdf::FMMMLayout::fmFruchtermanReingold);
SWIG_LONG_CONSTANT(FMMMLayout_fmEades, (int)ogdf::FMMMLayout::fmEades);
SWIG_LONG_CONSTANT(FMMMLayout_fmNew, (int)ogdf::FMMMLayout::fmNew);
SWIG_LONG_CONSTANT(FMMMLayout_rfcExact, (int)ogdf::FMMMLayout::rfcExact);
SWIG_LONG_CONSTANT(FMMMLayout_rfcGridApproximation, (int)ogdf::FMMMLayout::rfcGridApproximation);
SWIG_LONG_CONSTANT(FMMMLayout_rfcNMM, (int)ogdf::FMMMLayout::rfcNMM);
SWIG_LONG_CONSTANT(FMMMLayout_scFixedIterations, (int)ogdf::FMMMLayout::scFixedIterations);
SWIG_LONG_CONSTANT(FMMMLayout_scThreshold, (int)ogdf::FMMMLayout::scThreshold);
SWIG_LONG_CONSTANT(FMMMLayout_scFixedIterationsOrThreshold, (int)ogdf::FMMMLayout::scFixedIterationsOrThreshold);
SWIG_LONG_CONSTANT(FMMMLayout_ipfUniformGrid, (int)ogdf::FMMMLayout::ipfUniformGrid);
SWIG_LONG_CONSTANT(FMMMLayout_ipfRandomTime, (int)ogdf::FMMMLayout::ipfRandomTime);
SWIG_LONG_CONSTANT(FMMMLayout_ipfRandomRandIterNr, (int)ogdf::FMMMLayout::ipfRandomRandIterNr);
SWIG_LONG_CONSTANT(FMMMLayout_ipfKeepPositions, (int)ogdf::FMMMLayout::ipfKeepPositions);
SWIG_LONG_CONSTANT(FMMMLayout_rtcPathByPath, (int)ogdf::FMMMLayout::rtcPathByPath);
SWIG_LONG_CONSTANT(FMMMLayout_rtcSubtreeBySubtree, (int)ogdf::FMMMLayout::rtcSubtreeBySubtree);
SWIG_LONG_CONSTANT(FMMMLayout_scfIteratively, (int)ogdf::FMMMLayout::scfIteratively);
SWIG_LONG_CONSTANT(FMMMLayout_scfAluru, (int)ogdf::FMMMLayout::scfAluru);
SWIG_LONG_CONSTANT(DavidsonHarelLayout_spStandard, (int)ogdf::DavidsonHarelLayout::spStandard);
SWIG_LONG_CONSTANT(DavidsonHarelLayout_spRepulse, (int)ogdf::DavidsonHarelLayout::spRepulse);
SWIG_LONG_CONSTANT(DavidsonHarelLayout_spPlanar, (int)ogdf::DavidsonHarelLayout::spPlanar);
SWIG_LONG_CONSTANT(DavidsonHarelLayout_sppFast, (int)ogdf::DavidsonHarelLayout::sppFast);
SWIG_LONG_CONSTANT(DavidsonHarelLayout_sppMedium, (int)ogdf::DavidsonHarelLayout::sppMedium);
SWIG_LONG_CONSTANT(DavidsonHarelLayout_sppHQ, (int)ogdf::DavidsonHarelLayout::sppHQ);
SWIG_LONG_CONSTANT(TreeLayout_rootIsSource, (int)ogdf::TreeLayout::rootIsSource);
SWIG_LONG_CONSTANT(TreeLayout_rootIsSink, (int)ogdf::TreeLayout::rootIsSink);
SWIG_LONG_CONSTANT(TreeLayout_rootByCoord, (int)ogdf::TreeLayout::rootByCoord);
SWIG_LONG_CONSTANT(RadialTreeLayout_rootIsSource, (int)ogdf::RadialTreeLayout::rootIsSource);
SWIG_LONG_CONSTANT(RadialTreeLayout_rootIsSink, (int)ogdf::RadialTreeLayout::rootIsSink);
SWIG_LONG_CONSTANT(RadialTreeLayout_rootIsCenter, (int)ogdf::RadialTreeLayout::rootIsCenter);
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(ogdf)
{
/* rinit section */

/* vinit subsection */
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(ogdf)
{
/* shutdown section */
#ifdef ZTS
    ts_free_id(ogdf_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(ogdf)
{
/* rshutdown section */

    return SUCCESS;
}

PHP_MINFO_FUNCTION(ogdf)
{
}
/* end init section */
